"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  paymentMiddleware: () => paymentMiddleware
});
module.exports = __toCommonJS(src_exports);
var import_viem = require("viem");
var import_schemes = require("x402/schemes");
var import_shared = require("x402/shared");
var import_paywall = require("x402/paywall");
var import_types = require("x402/types");
var import_verify = require("x402/verify");
function paymentMiddleware(payTo, routes, facilitator, paywall) {
  const { verify, settle, supported } = (0, import_verify.useFacilitator)(facilitator);
  const x402Version = 1;
  const routePatterns = (0, import_shared.computeRoutePatterns)(routes);
  return async function paymentMiddleware2(c, next) {
    var _a;
    const method = c.req.method.toUpperCase();
    const matchingRoute = (0, import_shared.findMatchingRoute)(routePatterns, c.req.path, method);
    if (!matchingRoute) {
      return next();
    }
    const { price, network, config = {} } = matchingRoute.config;
    const {
      description,
      mimeType,
      maxTimeoutSeconds,
      inputSchema,
      outputSchema,
      customPaywallHtml,
      resource,
      errorMessages,
      discoverable
    } = config;
    const atomicAmountForAsset = (0, import_shared.processPriceToAtomicAmount)(price, network);
    if ("error" in atomicAmountForAsset) {
      throw new Error(atomicAmountForAsset.error);
    }
    const { maxAmountRequired, asset } = atomicAmountForAsset;
    const resourceUrl = resource || c.req.url;
    let paymentRequirements = [];
    if (import_types.SupportedEVMNetworks.includes(network)) {
      paymentRequirements.push({
        scheme: "exact",
        network,
        maxAmountRequired,
        resource: resourceUrl,
        description: description ?? "",
        mimeType: mimeType ?? "application/json",
        payTo: (0, import_viem.getAddress)(payTo),
        maxTimeoutSeconds: maxTimeoutSeconds ?? 300,
        asset: (0, import_viem.getAddress)(asset.address),
        // TODO: Rename outputSchema to requestStructure
        outputSchema: {
          input: {
            type: "http",
            method,
            discoverable: discoverable ?? true,
            ...inputSchema
          },
          output: outputSchema
        },
        extra: asset.eip712
      });
    } else if (import_types.SupportedSVMNetworks.includes(network)) {
      const paymentKinds = await supported();
      let feePayer;
      for (const kind of paymentKinds.kinds) {
        if (kind.network === network && kind.scheme === "exact") {
          feePayer = (_a = kind == null ? void 0 : kind.extra) == null ? void 0 : _a.feePayer;
          break;
        }
      }
      if (!feePayer) {
        throw new Error(`The facilitator did not provide a fee payer for network: ${network}.`);
      }
      paymentRequirements.push({
        scheme: "exact",
        network,
        maxAmountRequired,
        resource: resourceUrl,
        description: description ?? "",
        mimeType: mimeType ?? "",
        payTo,
        maxTimeoutSeconds: maxTimeoutSeconds ?? 60,
        asset: asset.address,
        // TODO: Rename outputSchema to requestStructure
        outputSchema: {
          input: {
            type: "http",
            method,
            discoverable: discoverable ?? true,
            ...inputSchema
          },
          output: outputSchema
        },
        extra: {
          feePayer
        }
      });
    } else {
      throw new Error(`Unsupported network: ${network}`);
    }
    const payment = c.req.header("X-PAYMENT");
    const userAgent = c.req.header("User-Agent") || "";
    const acceptHeader = c.req.header("Accept") || "";
    const isWebBrowser = acceptHeader.includes("text/html") && userAgent.includes("Mozilla");
    if (!payment) {
      if (isWebBrowser) {
        let displayAmount;
        if (typeof price === "string" || typeof price === "number") {
          const parsed = import_types.moneySchema.safeParse(price);
          if (parsed.success) {
            displayAmount = parsed.data;
          } else {
            displayAmount = Number.NaN;
          }
        } else {
          displayAmount = Number(price.amount) / 10 ** price.asset.decimals;
        }
        const currentUrl = new URL(c.req.url).pathname + new URL(c.req.url).search;
        const html = customPaywallHtml ?? (0, import_paywall.getPaywallHtml)({
          amount: displayAmount,
          paymentRequirements: (0, import_shared.toJsonSafe)(paymentRequirements),
          currentUrl,
          testnet: network === "base-sepolia",
          cdpClientKey: paywall == null ? void 0 : paywall.cdpClientKey,
          appName: paywall == null ? void 0 : paywall.appName,
          appLogo: paywall == null ? void 0 : paywall.appLogo,
          sessionTokenEndpoint: paywall == null ? void 0 : paywall.sessionTokenEndpoint
        });
        return c.html(html, 402);
      }
      return c.json(
        {
          error: (errorMessages == null ? void 0 : errorMessages.paymentRequired) || "X-PAYMENT header is required",
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
    let decodedPayment;
    try {
      decodedPayment = import_schemes.exact.evm.decodePayment(payment);
      decodedPayment.x402Version = x402Version;
    } catch (error) {
      return c.json(
        {
          error: (errorMessages == null ? void 0 : errorMessages.invalidPayment) || (error instanceof Error ? error : new Error("Invalid or malformed payment header")),
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
    const selectedPaymentRequirements = (0, import_shared.findMatchingPaymentRequirements)(
      paymentRequirements,
      decodedPayment
    );
    if (!selectedPaymentRequirements) {
      return c.json(
        {
          error: (errorMessages == null ? void 0 : errorMessages.noMatchingRequirements) || "Unable to find matching payment requirements",
          accepts: (0, import_shared.toJsonSafe)(paymentRequirements),
          x402Version
        },
        402
      );
    }
    const verification = await verify(decodedPayment, selectedPaymentRequirements);
    if (!verification.isValid) {
      return c.json(
        {
          error: (errorMessages == null ? void 0 : errorMessages.verificationFailed) || verification.invalidReason,
          accepts: paymentRequirements,
          payer: verification.payer,
          x402Version
        },
        402
      );
    }
    await next();
    let res = c.res;
    if (res.status >= 400) {
      return;
    }
    c.res = void 0;
    try {
      const settlement = await settle(decodedPayment, selectedPaymentRequirements);
      if (settlement.success) {
        const responseHeader = (0, import_types.settleResponseHeader)(settlement);
        res.headers.set("X-PAYMENT-RESPONSE", responseHeader);
      } else {
        throw new Error(settlement.errorReason);
      }
    } catch (error) {
      res = c.json(
        {
          error: (errorMessages == null ? void 0 : errorMessages.settlementFailed) || (error instanceof Error ? error : new Error("Failed to settle payment")),
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
    c.res = res;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  paymentMiddleware
});
//# sourceMappingURL=index.js.map