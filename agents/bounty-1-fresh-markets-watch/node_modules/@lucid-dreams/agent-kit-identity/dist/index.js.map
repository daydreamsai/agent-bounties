{"version":3,"sources":["../src/utils.ts","../src/identity.ts"],"names":["result"],"mappings":"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","file":"index.js","sourcesContent":["export type Hex = `0x${string}`;\n\nexport const ZERO_ADDRESS: Hex = \"0x0000000000000000000000000000000000000000\";\n\nexport function normalizeDomain(domain: string): string {\n  return domain?.trim?.().toLowerCase?.() ?? \"\";\n}\n\nexport function normalizeAddress(value: string | null | undefined): Hex {\n  if (!value) {\n    throw new Error(\"invalid hex address\");\n  }\n  const trimmed = value.trim();\n  if (!/^0x[0-9a-fA-F]{40}$/.test(trimmed)) {\n    throw new Error(`invalid hex address: ${value}`);\n  }\n  return trimmed.toLowerCase() as Hex;\n}\n\nexport function sanitizeAddress(value: string | null | undefined): Hex {\n  if (!value) return ZERO_ADDRESS;\n  try {\n    return normalizeAddress(value);\n  } catch {\n    return ZERO_ADDRESS;\n  }\n}\n\nexport function toCaip10(params: {\n  namespace?: string;\n  chainId: number | string;\n  address: string;\n}): string {\n  const namespace = params.namespace ?? \"eip155\";\n  const chainRef =\n    typeof params.chainId === \"number\"\n      ? params.chainId.toString(10)\n      : `${params.chainId ?? \"\"}`;\n  if (!chainRef) throw new Error(\"chainId is required for CAIP-10\");\n  const address = params.address?.toLowerCase?.();\n  if (!address || !address.startsWith(\"0x\")) {\n    throw new Error(\"address must be a hex string\");\n  }\n  return `${namespace}:${chainRef}:${address}`;\n}\n","import type { TrustConfig, RegistrationEntry } from \"./types\";\nimport {\n  ZERO_ADDRESS,\n  normalizeAddress,\n  normalizeDomain,\n  toCaip10,\n} from \"./utils\";\nimport type { Hex } from \"./utils\";\nexport type { Hex } from \"./utils\";\nexport { toCaip10 } from \"./utils\";\n\nexport type IdentityRegistryClientOptions<\n  PublicClient extends PublicClientLike,\n  WalletClient extends WalletClientLike | undefined = undefined\n> = {\n  address: Hex;\n  chainId?: number;\n  publicClient: PublicClient;\n  walletClient?: WalletClient;\n  namespace?: string;\n};\n\nexport type IdentityRecord = {\n  agentId: bigint;\n  agentDomain: string;\n  agentAddress: Hex;\n};\n\ntype AgentIdentifierInput = bigint | number | string;\n\ntype RegistrationEntryParams = {\n  agentId: AgentIdentifierInput;\n  address: string;\n  chainId: number | string;\n  namespace?: string;\n  signature?: string;\n};\n\ntype TrustOverridesInput = Partial<\n  Pick<\n    TrustConfig,\n    | \"trustModels\"\n    | \"validationRequestsUri\"\n    | \"validationResponsesUri\"\n    | \"feedbackDataUri\"\n  >\n>;\n\nfunction normalizeAgentId(agentId: AgentIdentifierInput): string {\n  if (typeof agentId === \"bigint\") {\n    if (agentId < 0n) {\n      throw new Error(\"agentId must be non-negative\");\n    }\n    return agentId.toString(10);\n  }\n  if (typeof agentId === \"number\") {\n    if (\n      !Number.isFinite(agentId) ||\n      !Number.isInteger(agentId) ||\n      agentId < 0\n    ) {\n      throw new Error(\"agentId must be a non-negative integer\");\n    }\n    if (!Number.isSafeInteger(agentId)) {\n      throw new Error(\n        \"agentId number must be a safe integer; use string or bigint for larger values\"\n      );\n    }\n    return agentId.toString(10);\n  }\n  const normalized = `${agentId ?? \"\"}`.trim();\n  if (!normalized) {\n    throw new Error(\"agentId is required\");\n  }\n  return normalized;\n}\n\nfunction createRegistrationEntry(\n  params: RegistrationEntryParams\n): RegistrationEntry {\n  const entry: RegistrationEntry = {\n    agentId: normalizeAgentId(params.agentId),\n    agentAddress: toCaip10({\n      namespace: params.namespace,\n      chainId: params.chainId,\n      address: params.address,\n    }),\n  };\n  if (params.signature) {\n    entry.signature = params.signature;\n  }\n  return entry;\n}\n\nfunction createTrustConfig(\n  params: RegistrationEntryParams,\n  overrides?: TrustOverridesInput\n): TrustConfig {\n  return {\n    registrations: [createRegistrationEntry(params)],\n    ...overrides,\n  };\n}\n\nexport type IdentityRegistryClient = {\n  readonly address: Hex;\n  readonly chainId?: number;\n  get(agentId: bigint | number | string): Promise<IdentityRecord | null>;\n  resolveByDomain(domain: string): Promise<IdentityRecord | null>;\n  resolveByAddress(address: Hex): Promise<IdentityRecord | null>;\n  register(input: RegisterAgentInput): Promise<RegisterAgentResult>;\n  update(input: UpdateAgentInput): Promise<UpdateAgentResult>;\n  toRegistrationEntry(\n    record: IdentityRecord,\n    signature?: string\n  ): RegistrationEntry;\n};\n\nexport type PublicClientLike = {\n  readContract(args: {\n    address: Hex;\n    abi: typeof IDENTITY_REGISTRY_ABI;\n    functionName: IdentityRegistryReadFunctionName;\n    args?: readonly unknown[];\n  }): Promise<any>;\n};\n\nexport type WalletClientLike = {\n  account?: { address?: Hex };\n  writeContract(args: {\n    address: Hex;\n    abi: typeof IDENTITY_REGISTRY_ABI;\n    functionName: IdentityRegistryWriteFunctionName;\n    args?: readonly unknown[];\n  }): Promise<Hex>;\n};\n\ntype IdentityRegistryReadFunctionName =\n  | \"Get\"\n  | \"ResolveByDomain\"\n  | \"ResolveByAddress\";\n\ntype IdentityRegistryWriteFunctionName = \"New\" | \"Update\";\n\nexport type RegisterAgentInput = {\n  domain: string;\n  agentAddress?: Hex;\n};\n\nexport type RegisterAgentResult = {\n  transactionHash: Hex;\n  agentAddress: Hex;\n  agentId?: bigint;\n};\n\nexport type UpdateAgentInput = {\n  agentId: bigint | number | string;\n  domain?: string;\n  agentAddress?: Hex;\n};\n\nexport type UpdateAgentResult = {\n  transactionHash: Hex;\n  agentId?: bigint;\n};\n\nexport const IDENTITY_REGISTRY_ABI = [\n  {\n    type: \"function\",\n    name: \"New\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"agentDomain\", type: \"string\" },\n      { name: \"agentAddress\", type: \"address\" },\n    ],\n    outputs: [{ name: \"agentId\", type: \"uint256\" }],\n  },\n  {\n    type: \"function\",\n    name: \"Update\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"agentId\", type: \"uint256\" },\n      { name: \"agentDomain\", type: \"string\" },\n      { name: \"agentAddress\", type: \"address\" },\n    ],\n    outputs: [{ name: \"ok\", type: \"bool\" }],\n  },\n  {\n    type: \"function\",\n    name: \"Get\",\n    stateMutability: \"view\",\n    inputs: [{ name: \"agentId\", type: \"uint256\" }],\n    outputs: [\n      { name: \"agentId\", type: \"uint256\" },\n      { name: \"agentDomain\", type: \"string\" },\n      { name: \"agentAddress\", type: \"address\" },\n    ],\n  },\n  {\n    type: \"function\",\n    name: \"ResolveByDomain\",\n    stateMutability: \"view\",\n    inputs: [{ name: \"agentDomain\", type: \"string\" }],\n    outputs: [\n      { name: \"agentId\", type: \"uint256\" },\n      { name: \"agentDomain\", type: \"string\" },\n      { name: \"agentAddress\", type: \"address\" },\n    ],\n  },\n  {\n    type: \"function\",\n    name: \"ResolveByAddress\",\n    stateMutability: \"view\",\n    inputs: [{ name: \"agentAddress\", type: \"address\" }],\n    outputs: [\n      { name: \"agentId\", type: \"uint256\" },\n      { name: \"agentDomain\", type: \"string\" },\n      { name: \"agentAddress\", type: \"address\" },\n    ],\n  },\n] as const;\n\nexport function createIdentityRegistryClient<\n  PublicClient extends PublicClientLike,\n  WalletClient extends WalletClientLike | undefined = undefined\n>(\n  options: IdentityRegistryClientOptions<PublicClient, WalletClient>\n): IdentityRegistryClient {\n  const {\n    address,\n    chainId,\n    publicClient,\n    walletClient,\n    namespace = \"eip155\",\n  } = options;\n\n  function ensureWalletClient(): WalletClientLike {\n    if (!walletClient) {\n      throw new Error(\n        \"identity registry client requires walletClient for writes\"\n      );\n    }\n    return walletClient;\n  }\n\n  async function readRecord(\n    fn: IdentityRegistryReadFunctionName,\n    args: readonly unknown[]\n  ): Promise<IdentityRecord | null> {\n    const result = (await publicClient.readContract({\n      address,\n      abi: IDENTITY_REGISTRY_ABI,\n      functionName: fn,\n      args,\n    })) as readonly [bigint, string, string];\n\n    if (!result) return null;\n\n    const [agentId, agentDomain, agentAddress] = result;\n    if (!agentDomain && (!agentAddress || agentAddress === ZERO_ADDRESS)) {\n      return null;\n    }\n\n    return {\n      agentId,\n      agentDomain,\n      agentAddress: normalizeAddress(agentAddress),\n    };\n  }\n\n  return {\n    address,\n    chainId,\n    async get(agentId) {\n      const id = BigInt(agentId);\n      return readRecord(\"Get\", [id]);\n    },\n    resolveByDomain(domain) {\n      const normalized = normalizeDomain(domain);\n      return readRecord(\"ResolveByDomain\", [normalized]);\n    },\n    resolveByAddress(rawAddress) {\n      const normalized = normalizeAddress(rawAddress);\n      return readRecord(\"ResolveByAddress\", [normalized]);\n    },\n    async register(input) {\n      const wallet = ensureWalletClient();\n      const normalizedDomain = normalizeDomain(input.domain);\n      const normalizedAddress = normalizeAddress(\n        input.agentAddress ?? wallet.account?.address ?? ZERO_ADDRESS\n      );\n\n      if (!normalizedDomain) {\n        throw new Error(\"agent domain is required\");\n      }\n      if (!normalizedAddress || normalizedAddress === ZERO_ADDRESS) {\n        throw new Error(\"agent address is required\");\n      }\n\n      const txHash = await wallet.writeContract({\n        address,\n        abi: IDENTITY_REGISTRY_ABI,\n        functionName: \"New\",\n        args: [normalizedDomain, normalizedAddress],\n      });\n\n      let agentId: bigint | undefined;\n      try {\n        const record = await readRecord(\"ResolveByDomain\", [normalizedDomain]);\n        agentId = record?.agentId;\n      } catch {\n        agentId = undefined;\n      }\n\n      return {\n        transactionHash: txHash,\n        agentAddress: normalizedAddress,\n        agentId,\n      };\n    },\n    async update(input) {\n      const wallet = ensureWalletClient();\n      const agentId = BigInt(input.agentId);\n      const normalizedDomain =\n        typeof input.domain === \"string\" ? normalizeDomain(input.domain) : \"\";\n      const normalizedAddress =\n        typeof input.agentAddress === \"string\"\n          ? normalizeAddress(input.agentAddress)\n          : ZERO_ADDRESS;\n\n      if (\n        !normalizedDomain &&\n        (!normalizedAddress || normalizedAddress === ZERO_ADDRESS)\n      ) {\n        throw new Error(\"update requires domain and/or agentAddress\");\n      }\n\n      const txHash = await wallet.writeContract({\n        address,\n        abi: IDENTITY_REGISTRY_ABI,\n        functionName: \"Update\",\n        args: [\n          agentId,\n          normalizedDomain,\n          normalizedAddress && normalizedAddress !== ZERO_ADDRESS\n            ? normalizedAddress\n            : ZERO_ADDRESS,\n        ],\n      });\n\n      let resultingRecord: IdentityRecord | null = null;\n      try {\n        if (normalizedDomain) {\n          resultingRecord = await readRecord(\"ResolveByDomain\", [\n            normalizedDomain,\n          ]);\n        }\n        if (!resultingRecord) {\n          resultingRecord = await readRecord(\"Get\", [agentId]);\n        }\n      } catch {\n        resultingRecord = null;\n      }\n\n      return {\n        transactionHash: txHash,\n        agentId: resultingRecord?.agentId ?? agentId,\n      };\n    },\n    toRegistrationEntry(record, signature) {\n      if (chainId == null) {\n        throw new Error(\n          \"identity registry client needs chainId to build CAIP-10 registration entries\"\n        );\n      }\n      return createRegistrationEntry({\n        agentId: record.agentId,\n        address: record.agentAddress,\n        chainId,\n        namespace,\n        signature,\n      });\n    },\n  };\n}\n\nexport type SignAgentDomainProofOptions = {\n  domain: string;\n  address: Hex;\n  chainId: number;\n  signer: MessageSignerLike;\n  nonce?: string;\n};\n\nexport type MessageSignerLike =\n  | {\n      signMessage(message: string): Promise<string>;\n    }\n  | {\n      signMessage(args: { message: string }): Promise<string>;\n    }\n  | {\n      signMessage(message: unknown): Promise<string>;\n    };\n\nexport async function signAgentDomainProof(\n  options: SignAgentDomainProofOptions\n): Promise<string> {\n  const { domain, address, chainId, nonce, signer } = options;\n  const normalizedDomain = normalizeDomain(domain);\n  if (!normalizedDomain) throw new Error(\"domain is required\");\n  const normalizedAddress = normalizeAddress(address);\n  if (!normalizedAddress || normalizedAddress === ZERO_ADDRESS) {\n    throw new Error(\"address must be a valid hex address\");\n  }\n\n  const message = buildOwnershipMessage({\n    domain: normalizedDomain,\n    address: normalizedAddress,\n    chainId,\n    nonce,\n  });\n\n  const signature = await invokeSignMessage(signer, message);\n  return signature as string;\n}\n\nexport function buildTrustConfigFromIdentity(\n  record: IdentityRecord,\n  options?: {\n    signature?: string;\n    chainId: number | string;\n    namespace?: string;\n    trustOverrides?: TrustOverridesInput;\n  }\n): TrustConfig {\n  const chainRef = options?.chainId;\n  if (chainRef == null) {\n    throw new Error(\n      \"chainId is required to generate trust config registration entry\"\n    );\n  }\n\n  return createTrustConfig(\n    {\n      agentId: record.agentId,\n      address: record.agentAddress,\n      chainId: chainRef,\n      namespace: options?.namespace,\n      signature: options?.signature,\n    },\n    options?.trustOverrides\n  );\n}\n\nfunction buildOwnershipMessage(params: {\n  domain: string;\n  address: Hex;\n  chainId: number;\n  nonce?: string;\n}): string {\n  const lines = [\n    \"ERC-8004 Agent Ownership Proof\",\n    `Domain: ${params.domain}`,\n    `Address: ${params.address.toLowerCase()}`,\n    `ChainId: ${params.chainId}`,\n  ];\n  if (params.nonce) {\n    lines.push(`Nonce: ${params.nonce}`);\n  }\n  return lines.join(\"\\n\");\n}\n\nasync function invokeSignMessage(\n  signer: MessageSignerLike,\n  message: string\n): Promise<string> {\n  const candidate = signer as any;\n  if (typeof candidate.signMessage !== \"function\") {\n    throw new Error(\"signer does not expose signMessage\");\n  }\n\n  try {\n    const result = await candidate.signMessage(message);\n    if (typeof result === \"string\") return result;\n  } catch (_) {\n    // fall through to try structured signature\n  }\n\n  const result = await candidate.signMessage({ message });\n  if (typeof result === \"string\") return result;\n  throw new Error(\"signMessage did not return a signature string\");\n}\n\nexport type BootstrapTrustMissingContext = {\n  client: IdentityRegistryClient;\n  normalizedDomain: string;\n};\n\nexport type BootstrapTrustOptions = {\n  domain: string;\n  chainId: number;\n  registryAddress: Hex;\n  publicClient: PublicClientLike;\n  walletClient?: WalletClientLike;\n  namespace?: string;\n  signer?: MessageSignerLike;\n  signatureNonce?: string;\n  registerIfMissing?: boolean;\n  skipRegister?: boolean;\n  trustOverrides?: TrustOverridesInput;\n  onMissing?: (\n    context: BootstrapTrustMissingContext\n  ) =>\n    | Promise<IdentityRecord | null | undefined>\n    | IdentityRecord\n    | null\n    | undefined;\n};\n\nexport type BootstrapTrustResult = {\n  trust?: TrustConfig;\n  record?: IdentityRecord | null;\n  transactionHash?: Hex;\n  signature?: string;\n  didRegister?: boolean;\n};\n\nexport async function bootstrapTrust(\n  options: BootstrapTrustOptions\n): Promise<BootstrapTrustResult> {\n  const normalizedDomain = normalizeDomain(options.domain);\n  if (!normalizedDomain) {\n    throw new Error(\"domain is required to bootstrap trust state\");\n  }\n\n  const shouldRegister = Boolean(\n    options.registerIfMissing && !options.skipRegister\n  );\n\n  const client = createIdentityRegistryClient({\n    address: options.registryAddress,\n    chainId: options.chainId,\n    publicClient: options.publicClient,\n    walletClient: options.walletClient,\n    namespace: options.namespace,\n  });\n\n  let record = await client.resolveByDomain(normalizedDomain).catch(() => null);\n  let transactionHash: Hex | undefined;\n  let didRegister = false;\n\n  if (!record && options.onMissing) {\n    const handled = await options.onMissing({\n      client,\n      normalizedDomain,\n    });\n    if (handled) {\n      record = handled;\n    }\n  }\n\n  if (!record && shouldRegister) {\n    const registration = await client.register({ domain: normalizedDomain });\n    transactionHash = registration.transactionHash;\n    didRegister = true;\n\n    record = await client.resolveByDomain(normalizedDomain).catch(() => null);\n    if (!record && registration.agentId != null) {\n      record = {\n        agentId: registration.agentId,\n        agentDomain: normalizedDomain,\n        agentAddress: registration.agentAddress,\n      } satisfies IdentityRecord;\n    }\n  }\n\n  if (!record) {\n    return {\n      trust: undefined,\n      record: null,\n      transactionHash,\n      didRegister,\n    };\n  }\n\n  let signature: string | undefined;\n  if (options.signer) {\n    signature = await signAgentDomainProof({\n      domain: record.agentDomain,\n      address: record.agentAddress,\n      chainId: options.chainId,\n      signer: options.signer,\n      nonce: options.signatureNonce,\n    });\n  }\n\n  const trust = buildTrustConfigFromIdentity(record, {\n    chainId: options.chainId,\n    namespace: options.namespace,\n    signature,\n    trustOverrides: options.trustOverrides,\n  });\n\n  return {\n    trust,\n    record,\n    transactionHash,\n    signature,\n    didRegister,\n  } satisfies BootstrapTrustResult;\n}\n\nconst DEFAULT_CHAIN_ID = 84532;\nconst DEFAULT_NAMESPACE = \"eip155\";\nconst DEFAULT_TRUST_MODELS: NonNullable<TrustConfig[\"trustModels\"]> = [\n  \"feedback\",\n  \"inference-validation\",\n];\n\nconst defaultLogger = {\n  info:\n    typeof console !== \"undefined\" && typeof console.info === \"function\"\n      ? console.info.bind(console)\n      : () => {},\n  warn:\n    typeof console !== \"undefined\" && typeof console.warn === \"function\"\n      ? console.warn.bind(console)\n      : () => {},\n};\n\nfunction parsePositiveInteger(value: string | undefined): number | undefined {\n  if (!value) return undefined;\n  const parsed = Number(value);\n  if (!Number.isFinite(parsed) || parsed <= 0) return undefined;\n  return Math.trunc(parsed);\n}\n\nfunction resolveTrustOverrides(\n  domain: string | undefined,\n  overrides?: TrustOverridesInput,\n  fallback?: TrustOverridesInput\n): TrustOverridesInput | undefined {\n  const result: TrustOverridesInput = {};\n\n  if (domain) {\n    result.trustModels = DEFAULT_TRUST_MODELS;\n    const origin = domain.startsWith(\"http\") ? domain : `https://${domain}`;\n    result.validationRequestsUri = `${origin}/validation/requests.json`;\n    result.validationResponsesUri = `${origin}/validation/responses.json`;\n    result.feedbackDataUri = `${origin}/feedback.json`;\n  }\n\n  if (fallback) {\n    if (fallback.trustModels !== undefined) {\n      result.trustModels = fallback.trustModels;\n    }\n    if (fallback.validationRequestsUri !== undefined) {\n      result.validationRequestsUri = fallback.validationRequestsUri;\n    }\n    if (fallback.validationResponsesUri !== undefined) {\n      result.validationResponsesUri = fallback.validationResponsesUri;\n    }\n    if (fallback.feedbackDataUri !== undefined) {\n      result.feedbackDataUri = fallback.feedbackDataUri;\n    }\n  }\n\n  if (overrides) {\n    if (overrides.trustModels !== undefined) {\n      result.trustModels = overrides.trustModels;\n    }\n    if (overrides.validationRequestsUri !== undefined) {\n      result.validationRequestsUri = overrides.validationRequestsUri;\n    }\n    if (overrides.validationResponsesUri !== undefined) {\n      result.validationResponsesUri = overrides.validationResponsesUri;\n    }\n    if (overrides.feedbackDataUri !== undefined) {\n      result.feedbackDataUri = overrides.feedbackDataUri;\n    }\n  }\n\n  return Object.keys(result).length > 0 ? result : undefined;\n}\n\nfunction synthesizeTrustConfig(params: {\n  address: string;\n  chainId: number;\n  namespace: string;\n  fallbackAgentId?: number | string;\n  signature?: string;\n  overrides?: TrustOverridesInput;\n  warn(message: string, error?: unknown): void;\n}): (BootstrapTrustResult & { synthetic: true }) | null {\n  try {\n    const trust = createTrustConfig(\n      {\n        agentId: params.fallbackAgentId ?? 0,\n        address: params.address,\n        chainId: params.chainId,\n        namespace: params.namespace,\n        signature: params.signature,\n      },\n      params.overrides\n    );\n\n    return {\n      trust,\n      record: undefined,\n      transactionHash: undefined,\n      signature: params.signature,\n      didRegister: undefined,\n      synthetic: true,\n    };\n  } catch (error) {\n    params.warn(\n      \"[agent-kit] unable to synthesise CAIP-10 identity entry\",\n      error\n    );\n    return null;\n  }\n}\n\ntype InferLogger = {\n  info?(message: string): void;\n  warn?(message: string, error?: unknown): void;\n};\n\nexport type BootstrapIdentityClients = {\n  publicClient: PublicClientLike;\n  walletClient?: WalletClientLike;\n  signer?: MessageSignerLike;\n};\n\nexport type BootstrapIdentityClientFactory = (params: {\n  chainId: number;\n  rpcUrl: string;\n  env: Record<string, string | undefined>;\n}) =>\n  | BootstrapIdentityClients\n  | null\n  | undefined\n  | Promise<BootstrapIdentityClients | null | undefined>;\n\nexport type BootstrapIdentityOptions = {\n  domain?: string;\n  chainId?: number;\n  registryAddress?: Hex;\n  namespace?: string;\n  publicClient?: PublicClientLike;\n  walletClient?: WalletClientLike;\n  signer?: MessageSignerLike;\n  rpcUrl?: string;\n  makeClients?: BootstrapIdentityClientFactory;\n  registerIfMissing?: boolean;\n  skipRegister?: boolean;\n  signatureNonce?: string;\n  trustOverrides?: TrustOverridesInput;\n  fallback?: {\n    address?: string;\n    agentId?: number | string;\n    namespace?: string;\n    signature?: string;\n    trustModels?: TrustConfig[\"trustModels\"];\n    validationRequestsUri?: string;\n    validationResponsesUri?: string;\n    feedbackDataUri?: string;\n  };\n  env?: Record<string, string | undefined>;\n  logger?: InferLogger;\n};\n\nexport type BootstrapIdentityResult = BootstrapTrustResult & {\n  synthetic?: boolean;\n};\n\nexport async function bootstrapIdentity(\n  options: BootstrapIdentityOptions = {}\n): Promise<BootstrapIdentityResult> {\n  const env =\n    options.env ??\n    (typeof process !== \"undefined\" && typeof process.env === \"object\"\n      ? (process.env as Record<string, string | undefined>)\n      : {});\n\n  const logger = {\n    info: options.logger?.info ?? defaultLogger.info,\n    warn: options.logger?.warn ?? defaultLogger.warn,\n  } satisfies InferLogger;\n\n  const resolvedChainId =\n    options.chainId ?? parsePositiveInteger(env.CHAIN_ID) ?? DEFAULT_CHAIN_ID;\n\n  const domain = options.domain ?? env.AGENT_DOMAIN;\n  const namespace =\n    options.namespace ?? options.fallback?.namespace ?? DEFAULT_NAMESPACE;\n  const registryAddress =\n    options.registryAddress ??\n    (env.IDENTITY_REGISTRY_ADDRESS as Hex | undefined);\n  const rpcUrl = options.rpcUrl ?? env.RPC_URL;\n\n  let publicClient = options.publicClient;\n  let walletClient = options.walletClient;\n  let signer = options.signer;\n\n  if (!publicClient && options.makeClients && rpcUrl) {\n    const produced = await options.makeClients({\n      chainId: resolvedChainId,\n      rpcUrl,\n      env,\n    });\n    if (produced?.publicClient) {\n      publicClient = produced.publicClient;\n      walletClient = walletClient ?? produced.walletClient;\n      signer = signer ?? produced.signer ?? (produced.walletClient as any);\n    }\n  }\n\n  if (!signer && walletClient) {\n    signer = walletClient as any;\n  }\n\n  const fallbackOverrides = resolveTrustOverrides(domain, undefined, {\n    trustModels:\n      options.fallback?.trustModels ??\n      (domain ? undefined : DEFAULT_TRUST_MODELS),\n    validationRequestsUri: options.fallback?.validationRequestsUri,\n    validationResponsesUri: options.fallback?.validationResponsesUri,\n    feedbackDataUri: options.fallback?.feedbackDataUri,\n  });\n\n  const resolvedOverrides = resolveTrustOverrides(\n    domain,\n    options.trustOverrides,\n    fallbackOverrides\n  );\n\n  if (domain && registryAddress && publicClient) {\n    try {\n      const result = await bootstrapTrust({\n        domain,\n        chainId: resolvedChainId,\n        registryAddress,\n        namespace,\n        publicClient,\n        walletClient,\n        signer,\n        signatureNonce: options.signatureNonce ?? env.IDENTITY_SIGNATURE_NONCE,\n        registerIfMissing:\n          options.registerIfMissing ?? env.REGISTER_IDENTITY === \"true\",\n        skipRegister: options.skipRegister,\n        trustOverrides: resolvedOverrides,\n      });\n\n      if (result.trust) {\n        return result;\n      }\n\n      logger.warn(\n        \"[agent-kit] identity not found in registry; falling back to synthetic trust\"\n      );\n    } catch (error) {\n      logger.warn(\n        \"[agent-kit] failed to bootstrap ERC-8004 trust; falling back to synthetic trust\",\n        error\n      );\n    }\n  }\n\n  const fallbackAddress = options.fallback?.address ?? env.ADDRESS;\n  if (!fallbackAddress) {\n    logger.warn(\n      \"[agent-kit] unable to resolve fallback identity address; skipping trust metadata\"\n    );\n    return {};\n  }\n\n  const fallbackSignature =\n    options.fallback?.signature ??\n    env.IDENTITY_FALLBACK_SIGNATURE ??\n    \"0xdeadbeef\";\n\n  const synthetic = synthesizeTrustConfig({\n    address: fallbackAddress,\n    chainId: resolvedChainId,\n    namespace,\n    fallbackAgentId: options.fallback?.agentId,\n    signature: fallbackSignature,\n    overrides: resolvedOverrides,\n    warn: logger.warn,\n  });\n\n  if (synthetic) {\n    return synthetic;\n  }\n\n  return {};\n}\n\nexport type MakeViemClientsFromEnvOptions = {\n  env?: Record<string, string | undefined>;\n  rpcUrl?: string;\n  privateKey?: `0x${string}` | string;\n};\n\nasync function importViemModules(): Promise<{\n  createPublicClient: (...args: any[]) => any;\n  createWalletClient: (...args: any[]) => any;\n  http: (url: string) => any;\n  privateKeyToAccount: (key: `0x${string}`) => any;\n  baseSepolia: { id: number } & Record<string, unknown>;\n} | null> {\n  try {\n    const viem = await import(\"viem\");\n    const accounts = await import(\"viem/accounts\");\n    const chains = await import(\"viem/chains\").catch(() => ({}));\n    const baseSepoliaChain =\n      (chains as any).baseSepolia ?? ({ id: DEFAULT_CHAIN_ID } as const);\n    return {\n      createPublicClient: (viem as any).createPublicClient,\n      createWalletClient: (viem as any).createWalletClient,\n      http: (viem as any).http,\n      privateKeyToAccount: (accounts as any).privateKeyToAccount,\n      baseSepolia: baseSepoliaChain,\n    };\n  } catch (error) {\n    defaultLogger.warn(\n      \"[agent-kit] viem helpers unavailable; install viem to use makeViemClientsFromEnv\",\n      error\n    );\n    return null;\n  }\n}\n\nfunction resolveEnvObject(\n  env?: Record<string, string | undefined>\n): Record<string, string | undefined> {\n  if (env) return env;\n  if (typeof process !== \"undefined\" && typeof process.env === \"object\") {\n    return process.env as Record<string, string | undefined>;\n  }\n  return {};\n}\n\nexport async function makeViemClientsFromEnv(\n  options: MakeViemClientsFromEnvOptions = {}\n): Promise<BootstrapIdentityClientFactory | undefined> {\n  const env = resolveEnvObject(options.env);\n  const modules = await importViemModules();\n  if (!modules) return undefined;\n\n  return ({ chainId, rpcUrl, env: runtimeEnv }) => {\n    const effectiveRpcUrl = options.rpcUrl ?? rpcUrl ?? env.RPC_URL;\n    if (!effectiveRpcUrl) {\n      defaultLogger.warn(\n        \"[agent-kit] RPC_URL missing for viem client factory; skipping\"\n      );\n      return null;\n    }\n\n    const transport = modules.http(effectiveRpcUrl);\n    const chain = { ...modules.baseSepolia, id: chainId };\n    const publicClient = modules.createPublicClient({ chain, transport });\n\n    const mergedEnv = {\n      ...env,\n      ...runtimeEnv,\n    };\n    const privateKey = (options.privateKey ?? mergedEnv.PRIVATE_KEY) as\n      | `0x${string}`\n      | undefined;\n\n    let walletClient: any = undefined;\n    if (privateKey) {\n      try {\n        const account = modules.privateKeyToAccount(\n          privateKey as `0x${string}`\n        );\n        walletClient = modules.createWalletClient({\n          chain,\n          account,\n          transport,\n        });\n      } catch (error) {\n        defaultLogger.warn(\n          \"[agent-kit] failed to configure viem wallet client from PRIVATE_KEY\",\n          error\n        );\n      }\n    }\n\n    return {\n      publicClient,\n      walletClient,\n      signer: walletClient,\n    } satisfies BootstrapIdentityClients;\n  };\n}\n"]}