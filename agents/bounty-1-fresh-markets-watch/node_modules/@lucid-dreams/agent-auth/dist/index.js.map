{"version":3,"sources":["../../sdk/src/core/bodySerializer.gen.ts","../../sdk/src/core/serverSentEvents.gen.ts","../../sdk/src/core/pathSerializer.gen.ts","../../sdk/src/core/utils.gen.ts","../../sdk/src/core/auth.gen.ts","../../sdk/src/client/utils.gen.ts","../../sdk/src/client/client.gen.ts","../../sdk/src/client.gen.ts","../../sdk/src/sdk.gen.ts","../src/runtime/errors.ts","../src/runtime/agent-api-client.ts","../src/runtime/agent-auth-client.ts","../src/runtime/config-loader.ts","../src/runtime/storage/memory-adapter.ts","../src/runtime/token-manager.ts","../src/runtime/transport/http-transport.ts","../src/runtime/transport/fetch-transport.ts","../src/runtime/agent-runtime.ts","../src/runtime/transport/undici-transport.ts","../src/runtime/wallet/base-connector.ts","../src/runtime/wallet/server-orchestrator-connector.ts","../src/runtime/create-wallet.ts","../src/runtime/wallet/local-eoa-connector.ts"],"names":["resolve","joinedValues","config","request","url","DEFAULT_ERROR_MESSAGES","client","mergeHeaders","defaultHeaders","DEFAULT_REFRESH_LEAD_TIME_MS","signature"],"mappings":";;;;;AAyEO,IAAM,kBAAA,GAAqB;AAAA,EAChC,cAAA,EAAgB,CAAI,IAAA,KAClB,IAAA,CAAK,SAAA;AAAA,IAAU,IAAA;AAAA,IAAM,CAAC,MAAM,KAAA,KAC1B,OAAO,UAAU,QAAA,GAAW,KAAA,CAAM,UAAS,GAAI;AAAA;AAErD,CAAA;;;ACUO,IAAM,kBAAkB,CAAkB;AAAA,EAC/C,SAAA;AAAA,EACA,UAAA;AAAA,EACA,UAAA;AAAA,EACA,mBAAA;AAAA,EACA,iBAAA;AAAA,EACA,oBAAA;AAAA,EACA,mBAAA;AAAA,EACA,gBAAA;AAAA,EACA,UAAA;AAAA,EACA,GAAA;AAAA,EACA,GAAG;AACL,CAAA,KAA8D;AAC5D,EAAA,IAAI,WAAA;AAEJ,EAAA,MAAM,KAAA,GACJ,UAAA,KACC,CAAC,EAAA,KAAe,IAAI,OAAA,CAAQ,CAACA,QAAAA,KAAY,UAAA,CAAWA,QAAAA,EAAS,EAAE,CAAC,CAAA,CAAA;AAEnE,EAAA,MAAM,eAAe,mBAAmB;AACtC,IAAA,IAAI,aAAqB,oBAAA,IAAwB,GAAA;AACjD,IAAA,IAAI,OAAA,GAAU,CAAA;AACd,IAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,MAAA,IAAU,IAAI,iBAAgB,CAAE,MAAA;AAEvD,IAAA,OAAO,IAAA,EAAM;AACX,MAAA,IAAI,OAAO,OAAA,EAAS;AAEpB,MAAA,OAAA,EAAA;AAEA,MAAA,MAAM,OAAA,GACJ,QAAQ,OAAA,YAAmB,OAAA,GACvB,QAAQ,OAAA,GACR,IAAI,OAAA,CAAQ,OAAA,CAAQ,OAA6C,CAAA;AAEvE,MAAA,IAAI,gBAAgB,MAAA,EAAW;AAC7B,QAAA,OAAA,CAAQ,GAAA,CAAI,iBAAiB,WAAW,CAAA;AAAA,MAC1C;AAEA,MAAA,IAAI;AACF,QAAA,MAAM,WAAA,GAA2B;AAAA,UAC/B,QAAA,EAAU,QAAA;AAAA,UACV,GAAG,OAAA;AAAA,UACH,MAAM,OAAA,CAAQ,cAAA;AAAA,UACd,OAAA;AAAA,UACA;AAAA,SACF;AACA,QAAA,IAAI,OAAA,GAAU,IAAI,OAAA,CAAQ,GAAA,EAAK,WAAW,CAAA;AAC1C,QAAA,IAAI,SAAA,EAAW;AACb,UAAA,OAAA,GAAU,MAAM,SAAA,CAAU,GAAA,EAAK,WAAW,CAAA;AAAA,QAC5C;AAGA,QAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,KAAA,IAAS,UAAA,CAAW,KAAA;AAC3C,QAAA,MAAM,QAAA,GAAW,MAAM,MAAA,CAAO,OAAO,CAAA;AAErC,QAAA,IAAI,CAAC,QAAA,CAAS,EAAA;AACZ,UAAA,MAAM,IAAI,KAAA;AAAA,YACR,CAAA,YAAA,EAAe,QAAA,CAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU,CAAA;AAAA,WACvD;AAEF,QAAA,IAAI,CAAC,QAAA,CAAS,IAAA,EAAM,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAE7D,QAAA,MAAM,MAAA,GAAS,SAAS,IAAA,CACrB,WAAA,CAAY,IAAI,iBAAA,EAAmB,EACnC,SAAA,EAAU;AAEb,QAAA,IAAI,MAAA,GAAS,EAAA;AAEb,QAAA,MAAM,eAAe,MAAM;AACzB,UAAA,IAAI;AACF,YAAA,MAAA,CAAO,MAAA,EAAO;AAAA,UAChB,CAAA,CAAA,MAAQ;AAAA,UAER;AAAA,QACF,CAAA;AAEA,QAAA,MAAA,CAAO,gBAAA,CAAiB,SAAS,YAAY,CAAA;AAE7C,QAAA,IAAI;AACF,UAAA,OAAO,IAAA,EAAM;AACX,YAAA,MAAM,EAAE,IAAA,EAAM,KAAA,EAAM,GAAI,MAAM,OAAO,IAAA,EAAK;AAC1C,YAAA,IAAI,IAAA,EAAM;AACV,YAAA,MAAA,IAAU,KAAA;AAEV,YAAA,MAAM,MAAA,GAAS,MAAA,CAAO,KAAA,CAAM,MAAM,CAAA;AAClC,YAAA,MAAA,GAAS,MAAA,CAAO,KAAI,IAAK,EAAA;AAEzB,YAAA,KAAA,MAAW,SAAS,MAAA,EAAQ;AAC1B,cAAA,MAAM,KAAA,GAAQ,KAAA,CAAM,KAAA,CAAM,IAAI,CAAA;AAC9B,cAAA,MAAM,YAA2B,EAAC;AAClC,cAAA,IAAI,SAAA;AAEJ,cAAA,KAAA,MAAW,QAAQ,KAAA,EAAO;AACxB,gBAAA,IAAI,IAAA,CAAK,UAAA,CAAW,OAAO,CAAA,EAAG;AAC5B,kBAAA,SAAA,CAAU,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,WAAA,EAAa,EAAE,CAAC,CAAA;AAAA,gBAC9C,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,EAAG;AACpC,kBAAA,SAAA,GAAY,IAAA,CAAK,OAAA,CAAQ,YAAA,EAAc,EAAE,CAAA;AAAA,gBAC3C,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,KAAK,CAAA,EAAG;AACjC,kBAAA,WAAA,GAAc,IAAA,CAAK,OAAA,CAAQ,SAAA,EAAW,EAAE,CAAA;AAAA,gBAC1C,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,EAAG;AACpC,kBAAA,MAAM,SAAS,MAAA,CAAO,QAAA;AAAA,oBACpB,IAAA,CAAK,OAAA,CAAQ,YAAA,EAAc,EAAE,CAAA;AAAA,oBAC7B;AAAA,mBACF;AACA,kBAAA,IAAI,CAAC,MAAA,CAAO,KAAA,CAAM,MAAM,CAAA,EAAG;AACzB,oBAAA,UAAA,GAAa,MAAA;AAAA,kBACf;AAAA,gBACF;AAAA,cACF;AAEA,cAAA,IAAI,IAAA;AACJ,cAAA,IAAI,UAAA,GAAa,KAAA;AAEjB,cAAA,IAAI,UAAU,MAAA,EAAQ;AACpB,gBAAA,MAAM,OAAA,GAAU,SAAA,CAAU,IAAA,CAAK,IAAI,CAAA;AACnC,gBAAA,IAAI;AACF,kBAAA,IAAA,GAAO,IAAA,CAAK,MAAM,OAAO,CAAA;AACzB,kBAAA,UAAA,GAAa,IAAA;AAAA,gBACf,CAAA,CAAA,MAAQ;AACN,kBAAA,IAAA,GAAO,OAAA;AAAA,gBACT;AAAA,cACF;AAEA,cAAA,IAAI,UAAA,EAAY;AACd,gBAAA,IAAI,iBAAA,EAAmB;AACrB,kBAAA,MAAM,kBAAkB,IAAI,CAAA;AAAA,gBAC9B;AAEA,gBAAA,IAAI,mBAAA,EAAqB;AACvB,kBAAA,IAAA,GAAO,MAAM,oBAAoB,IAAI,CAAA;AAAA,gBACvC;AAAA,cACF;AAEA,cAAA,UAAA,GAAa;AAAA,gBACX,IAAA;AAAA,gBACA,KAAA,EAAO,SAAA;AAAA,gBACP,EAAA,EAAI,WAAA;AAAA,gBACJ,KAAA,EAAO;AAAA,eACR,CAAA;AAED,cAAA,IAAI,UAAU,MAAA,EAAQ;AACpB,gBAAA,MAAM,IAAA;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAA,SAAE;AACA,UAAA,MAAA,CAAO,mBAAA,CAAoB,SAAS,YAAY,CAAA;AAChD,UAAA,MAAA,CAAO,WAAA,EAAY;AAAA,QACrB;AAEA,QAAA;AAAA,MACF,SAAS,KAAA,EAAO;AAEd,QAAA,UAAA,GAAa,KAAK,CAAA;AAElB,QAAA,IACE,mBAAA,KAAwB,MAAA,IACxB,OAAA,IAAW,mBAAA,EACX;AACA,UAAA;AAAA,QACF;AAGA,QAAA,MAAM,UAAU,IAAA,CAAK,GAAA;AAAA,UACnB,UAAA,GAAa,MAAM,OAAA,GAAU,CAAA,CAAA;AAAA,UAC7B,gBAAA,IAAoB;AAAA,SACtB;AACA,QAAA,MAAM,MAAM,OAAO,CAAA;AAAA,MACrB;AAAA,IACF;AAAA,EACF,CAAA;AAEA,EAAA,MAAM,SAAS,YAAA,EAAa;AAE5B,EAAA,OAAO,EAAE,MAAA,EAAO;AAClB,CAAA;;;AC1OO,IAAM,qBAAA,GAAwB,CAAC,KAAA,KAA+B;AACnE,EAAA,QAAQ,KAAA;AAAO,IACb,KAAK,OAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,QAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,QAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT;AACE,MAAA,OAAO,GAAA;AAAA;AAEb,CAAA;AAEO,IAAM,uBAAA,GAA0B,CAAC,KAAA,KAA+B;AACrE,EAAA,QAAQ,KAAA;AAAO,IACb,KAAK,MAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,eAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,gBAAA;AACH,MAAA,OAAO,KAAA;AAAA,IACT;AACE,MAAA,OAAO,GAAA;AAAA;AAEb,CAAA;AAEO,IAAM,sBAAA,GAAyB,CAAC,KAAA,KAAgC;AACrE,EAAA,QAAQ,KAAA;AAAO,IACb,KAAK,OAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,QAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT,KAAK,QAAA;AACH,MAAA,OAAO,GAAA;AAAA,IACT;AACE,MAAA,OAAO,GAAA;AAAA;AAEb,CAAA;AAEO,IAAM,sBAAsB,CAAC;AAAA,EAClC,aAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF,CAAA,KAEM;AACJ,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,MAAMC,aAAAA,GAAAA,CACJ,aAAA,GAAgB,KAAA,GAAQ,KAAA,CAAM,IAAI,CAAC,CAAA,KAAM,kBAAA,CAAmB,CAAW,CAAC,CAAA,EACxE,IAAA,CAAK,uBAAA,CAAwB,KAAK,CAAC,CAAA;AACrC,IAAA,QAAQ,KAAA;AAAO,MACb,KAAK,OAAA;AACH,QAAA,OAAO,IAAIA,aAAY,CAAA,CAAA;AAAA,MACzB,KAAK,QAAA;AACH,QAAA,OAAO,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,EAAIA,aAAY,CAAA,CAAA;AAAA,MACjC,KAAK,QAAA;AACH,QAAA,OAAOA,aAAAA;AAAA,MACT;AACE,QAAA,OAAO,CAAA,EAAG,IAAI,CAAA,CAAA,EAAIA,aAAY,CAAA,CAAA;AAAA;AAClC,EACF;AAEA,EAAA,MAAM,SAAA,GAAY,sBAAsB,KAAK,CAAA;AAC7C,EAAA,MAAM,YAAA,GAAe,KAAA,CAClB,GAAA,CAAI,CAAC,CAAA,KAAM;AACV,IAAA,IAAI,KAAA,KAAU,OAAA,IAAW,KAAA,KAAU,QAAA,EAAU;AAC3C,MAAA,OAAO,aAAA,GAAgB,CAAA,GAAI,kBAAA,CAAmB,CAAW,CAAA;AAAA,IAC3D;AAEA,IAAA,OAAO,uBAAA,CAAwB;AAAA,MAC7B,aAAA;AAAA,MACA,IAAA;AAAA,MACA,KAAA,EAAO;AAAA,KACR,CAAA;AAAA,EACH,CAAC,CAAA,CACA,IAAA,CAAK,SAAS,CAAA;AACjB,EAAA,OAAO,KAAA,KAAU,OAAA,IAAW,KAAA,KAAU,QAAA,GAClC,YAAY,YAAA,GACZ,YAAA;AACN,CAAA;AAEO,IAAM,0BAA0B,CAAC;AAAA,EACtC,aAAA;AAAA,EACA,IAAA;AAAA,EACA;AACF,CAAA,KAA+B;AAC7B,EAAA,IAAI,KAAA,KAAU,MAAA,IAAa,KAAA,KAAU,IAAA,EAAM;AACzC,IAAA,OAAO,EAAA;AAAA,EACT;AAEA,EAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC7B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,OAAO,GAAG,IAAI,CAAA,CAAA,EAAI,gBAAgB,KAAA,GAAQ,kBAAA,CAAmB,KAAK,CAAC,CAAA,CAAA;AACrE,CAAA;AAEO,IAAM,uBAAuB,CAAC;AAAA,EACnC,aAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF,CAAA,KAGM;AACJ,EAAA,IAAI,iBAAiB,IAAA,EAAM;AACzB,IAAA,OAAO,SAAA,GAAY,MAAM,WAAA,EAAY,GAAI,GAAG,IAAI,CAAA,CAAA,EAAI,KAAA,CAAM,WAAA,EAAa,CAAA,CAAA;AAAA,EACzE;AAEA,EAAA,IAAI,KAAA,KAAU,YAAA,IAAgB,CAAC,OAAA,EAAS;AACtC,IAAA,IAAI,SAAmB,EAAC;AACxB,IAAA,MAAA,CAAO,OAAA,CAAQ,KAAK,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,CAAC,CAAA,KAAM;AAC1C,MAAA,MAAA,GAAS;AAAA,QACP,GAAG,MAAA;AAAA,QACH,GAAA;AAAA,QACA,aAAA,GAAiB,CAAA,GAAe,kBAAA,CAAmB,CAAW;AAAA,OAChE;AAAA,IACF,CAAC,CAAA;AACD,IAAA,MAAMA,aAAAA,GAAe,MAAA,CAAO,IAAA,CAAK,GAAG,CAAA;AACpC,IAAA,QAAQ,KAAA;AAAO,MACb,KAAK,MAAA;AACH,QAAA,OAAO,CAAA,EAAG,IAAI,CAAA,CAAA,EAAIA,aAAY,CAAA,CAAA;AAAA,MAChC,KAAK,OAAA;AACH,QAAA,OAAO,IAAIA,aAAY,CAAA,CAAA;AAAA,MACzB,KAAK,QAAA;AACH,QAAA,OAAO,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,EAAIA,aAAY,CAAA,CAAA;AAAA,MACjC;AACE,QAAA,OAAOA,aAAAA;AAAA;AACX,EACF;AAEA,EAAA,MAAM,SAAA,GAAY,uBAAuB,KAAK,CAAA;AAC9C,EAAA,MAAM,YAAA,GAAe,MAAA,CAAO,OAAA,CAAQ,KAAK,CAAA,CACtC,GAAA;AAAA,IAAI,CAAC,CAAC,GAAA,EAAK,CAAC,MACX,uBAAA,CAAwB;AAAA,MACtB,aAAA;AAAA,MACA,MAAM,KAAA,KAAU,YAAA,GAAe,GAAG,IAAI,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,CAAA,GAAM,GAAA;AAAA,MACnD,KAAA,EAAO;AAAA,KACR;AAAA,GACH,CACC,KAAK,SAAS,CAAA;AACjB,EAAA,OAAO,KAAA,KAAU,OAAA,IAAW,KAAA,KAAU,QAAA,GAClC,YAAY,YAAA,GACZ,YAAA;AACN,CAAA;;;ACrKO,IAAM,aAAA,GAAgB,aAAA;AAEtB,IAAM,wBAAwB,CAAC,EAAE,IAAA,EAAM,GAAA,EAAK,MAAK,KAAsB;AAC5E,EAAA,IAAI,GAAA,GAAM,IAAA;AACV,EAAA,MAAM,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,aAAa,CAAA;AACxC,EAAA,IAAI,OAAA,EAAS;AACX,IAAA,KAAA,MAAW,SAAS,OAAA,EAAS;AAC3B,MAAA,IAAI,OAAA,GAAU,KAAA;AACd,MAAA,IAAI,OAAO,KAAA,CAAM,SAAA,CAAU,CAAA,EAAG,KAAA,CAAM,SAAS,CAAC,CAAA;AAC9C,MAAA,IAAI,KAAA,GAA6B,QAAA;AAEjC,MAAA,IAAI,IAAA,CAAK,QAAA,CAAS,GAAG,CAAA,EAAG;AACtB,QAAA,OAAA,GAAU,IAAA;AACV,QAAA,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,CAAA,EAAG,IAAA,CAAK,SAAS,CAAC,CAAA;AAAA,MAC1C;AAEA,MAAA,IAAI,IAAA,CAAK,UAAA,CAAW,GAAG,CAAA,EAAG;AACxB,QAAA,IAAA,GAAO,IAAA,CAAK,UAAU,CAAC,CAAA;AACvB,QAAA,KAAA,GAAQ,OAAA;AAAA,MACV,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,GAAG,CAAA,EAAG;AAC/B,QAAA,IAAA,GAAO,IAAA,CAAK,UAAU,CAAC,CAAA;AACvB,QAAA,KAAA,GAAQ,QAAA;AAAA,MACV;AAEA,MAAA,MAAM,KAAA,GAAQ,KAAK,IAAI,CAAA;AAEvB,MAAA,IAAI,KAAA,KAAU,MAAA,IAAa,KAAA,KAAU,IAAA,EAAM;AACzC,QAAA;AAAA,MACF;AAEA,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;AACxB,QAAA,GAAA,GAAM,GAAA,CAAI,OAAA;AAAA,UACR,KAAA;AAAA,UACA,oBAAoB,EAAE,OAAA,EAAS,IAAA,EAAM,KAAA,EAAO,OAAO;AAAA,SACrD;AACA,QAAA;AAAA,MACF;AAEA,MAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC7B,QAAA,GAAA,GAAM,GAAA,CAAI,OAAA;AAAA,UACR,KAAA;AAAA,UACA,oBAAA,CAAqB;AAAA,YACnB,OAAA;AAAA,YACA,IAAA;AAAA,YACA,KAAA;AAAA,YACA,KAAA;AAAA,YACA,SAAA,EAAW;AAAA,WACZ;AAAA,SACH;AACA,QAAA;AAAA,MACF;AAEA,MAAA,IAAI,UAAU,QAAA,EAAU;AACtB,QAAA,GAAA,GAAM,GAAA,CAAI,OAAA;AAAA,UACR,KAAA;AAAA,UACA,IAAI,uBAAA,CAAwB;AAAA,YAC1B,IAAA;AAAA,YACA;AAAA,WACD,CAAC,CAAA;AAAA,SACJ;AACA,QAAA;AAAA,MACF;AAEA,MAAA,MAAM,YAAA,GAAe,kBAAA;AAAA,QACnB,KAAA,KAAU,OAAA,GAAU,CAAA,CAAA,EAAI,KAAe,CAAA,CAAA,GAAM;AAAA,OAC/C;AACA,MAAA,GAAA,GAAM,GAAA,CAAI,OAAA,CAAQ,KAAA,EAAO,YAAY,CAAA;AAAA,IACvC;AAAA,EACF;AACA,EAAA,OAAO,GAAA;AACT,CAAA;AAEO,IAAM,SAAS,CAAC;AAAA,EACrB,OAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA,eAAA;AAAA,EACA,GAAA,EAAK;AACP,CAAA,KAMM;AACJ,EAAA,MAAM,UAAU,IAAA,CAAK,UAAA,CAAW,GAAG,CAAA,GAAI,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA;AACtD,EAAA,IAAI,GAAA,GAAA,CAAO,WAAW,EAAA,IAAM,OAAA;AAC5B,EAAA,IAAI,IAAA,EAAM;AACR,IAAA,GAAA,GAAM,qBAAA,CAAsB,EAAE,IAAA,EAAM,GAAA,EAAK,CAAA;AAAA,EAC3C;AACA,EAAA,IAAI,MAAA,GAAS,KAAA,GAAQ,eAAA,CAAgB,KAAK,CAAA,GAAI,EAAA;AAC9C,EAAA,IAAI,MAAA,CAAO,UAAA,CAAW,GAAG,CAAA,EAAG;AAC1B,IAAA,MAAA,GAAS,MAAA,CAAO,UAAU,CAAC,CAAA;AAAA,EAC7B;AACA,EAAA,IAAI,MAAA,EAAQ;AACV,IAAA,GAAA,IAAO,IAAI,MAAM,CAAA,CAAA;AAAA,EACnB;AACA,EAAA,OAAO,GAAA;AACT,CAAA;AAEO,SAAS,oBAAoB,OAAA,EAIjC;AACD,EAAA,MAAM,OAAA,GAAU,QAAQ,IAAA,KAAS,MAAA;AACjC,EAAA,MAAM,gBAAA,GAAmB,WAAW,OAAA,CAAQ,cAAA;AAE5C,EAAA,IAAI,gBAAA,EAAkB;AACpB,IAAA,IAAI,oBAAoB,OAAA,EAAS;AAC/B,MAAA,MAAM,iBAAA,GACJ,OAAA,CAAQ,cAAA,KAAmB,MAAA,IAAa,QAAQ,cAAA,KAAmB,EAAA;AAErE,MAAA,OAAO,iBAAA,GAAoB,QAAQ,cAAA,GAAiB,IAAA;AAAA,IACtD;AAGA,IAAA,OAAO,OAAA,CAAQ,IAAA,KAAS,EAAA,GAAK,OAAA,CAAQ,IAAA,GAAO,IAAA;AAAA,EAC9C;AAGA,EAAA,IAAI,OAAA,EAAS;AACX,IAAA,OAAO,OAAA,CAAQ,IAAA;AAAA,EACjB;AAGA,EAAA,OAAO,MAAA;AACT;;;ACzHO,IAAM,YAAA,GAAe,OAC1B,IAAA,EACA,QAAA,KACgC;AAChC,EAAA,MAAM,QACJ,OAAO,QAAA,KAAa,aAAa,MAAM,QAAA,CAAS,IAAI,CAAA,GAAI,QAAA;AAE1D,EAAA,IAAI,CAAC,KAAA,EAAO;AACV,IAAA;AAAA,EACF;AAEA,EAAA,IAAI,IAAA,CAAK,WAAW,QAAA,EAAU;AAC5B,IAAA,OAAO,UAAU,KAAK,CAAA,CAAA;AAAA,EACxB;AAEA,EAAA,IAAI,IAAA,CAAK,WAAW,OAAA,EAAS;AAC3B,IAAA,OAAO,CAAA,MAAA,EAAS,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAAA,EAC7B;AAEA,EAAA,OAAO,KAAA;AACT,CAAA;;;AC5BO,IAAM,wBAAwB,CAAc;AAAA,EACjD,aAAa,EAAC;AAAA,EACd,GAAG;AACL,CAAA,GAA4B,EAAC,KAAM;AACjC,EAAA,MAAM,eAAA,GAAkB,CAAC,WAAA,KAAmB;AAC1C,IAAA,MAAM,SAAmB,EAAC;AAC1B,IAAA,IAAI,WAAA,IAAe,OAAO,WAAA,KAAgB,QAAA,EAAU;AAClD,MAAA,KAAA,MAAW,QAAQ,WAAA,EAAa;AAC9B,QAAA,MAAM,KAAA,GAAQ,YAAY,IAAI,CAAA;AAE9B,QAAA,IAAI,KAAA,KAAU,MAAA,IAAa,KAAA,KAAU,IAAA,EAAM;AACzC,UAAA;AAAA,QACF;AAEA,QAAA,MAAM,OAAA,GAAU,UAAA,CAAW,IAAI,CAAA,IAAK,IAAA;AAEpC,QAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;AACxB,UAAA,MAAM,kBAAkB,mBAAA,CAAoB;AAAA,YAC1C,eAAe,OAAA,CAAQ,aAAA;AAAA,YACvB,OAAA,EAAS,IAAA;AAAA,YACT,IAAA;AAAA,YACA,KAAA,EAAO,MAAA;AAAA,YACP,KAAA;AAAA,YACA,GAAG,OAAA,CAAQ;AAAA,WACZ,CAAA;AACD,UAAA,IAAI,eAAA,EAAiB,MAAA,CAAO,IAAA,CAAK,eAAe,CAAA;AAAA,QAClD,CAAA,MAAA,IAAW,OAAO,KAAA,KAAU,QAAA,EAAU;AACpC,UAAA,MAAM,mBAAmB,oBAAA,CAAqB;AAAA,YAC5C,eAAe,OAAA,CAAQ,aAAA;AAAA,YACvB,OAAA,EAAS,IAAA;AAAA,YACT,IAAA;AAAA,YACA,KAAA,EAAO,YAAA;AAAA,YACP,KAAA;AAAA,YACA,GAAG,OAAA,CAAQ;AAAA,WACZ,CAAA;AACD,UAAA,IAAI,gBAAA,EAAkB,MAAA,CAAO,IAAA,CAAK,gBAAgB,CAAA;AAAA,QACpD,CAAA,MAAO;AACL,UAAA,MAAM,sBAAsB,uBAAA,CAAwB;AAAA,YAClD,eAAe,OAAA,CAAQ,aAAA;AAAA,YACvB,IAAA;AAAA,YACA;AAAA,WACD,CAAA;AACD,UAAA,IAAI,mBAAA,EAAqB,MAAA,CAAO,IAAA,CAAK,mBAAmB,CAAA;AAAA,QAC1D;AAAA,MACF;AAAA,IACF;AACA,IAAA,OAAO,MAAA,CAAO,KAAK,GAAG,CAAA;AAAA,EACxB,CAAA;AACA,EAAA,OAAO,eAAA;AACT,CAAA;AAKO,IAAM,UAAA,GAAa,CACxB,WAAA,KACuC;AACvC,EAAA,IAAI,CAAC,WAAA,EAAa;AAGhB,IAAA,OAAO,QAAA;AAAA,EACT;AAEA,EAAA,MAAM,eAAe,WAAA,CAAY,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,GAAG,IAAA,EAAK;AAErD,EAAA,IAAI,CAAC,YAAA,EAAc;AACjB,IAAA;AAAA,EACF;AAEA,EAAA,IACE,aAAa,UAAA,CAAW,kBAAkB,KAC1C,YAAA,CAAa,QAAA,CAAS,OAAO,CAAA,EAC7B;AACA,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,IAAI,iBAAiB,qBAAA,EAAuB;AAC1C,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,IACE,CAAC,cAAA,EAAgB,QAAA,EAAU,QAAA,EAAU,QAAQ,CAAA,CAAE,IAAA;AAAA,IAAK,CAAC,IAAA,KACnD,YAAA,CAAa,UAAA,CAAW,IAAI;AAAA,GAC9B,EACA;AACA,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,IAAI,YAAA,CAAa,UAAA,CAAW,OAAO,CAAA,EAAG;AACpC,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA;AACF,CAAA;AAEA,IAAM,iBAAA,GAAoB,CACxB,OAAA,EAGA,IAAA,KACY;AACZ,EAAA,IAAI,CAAC,IAAA,EAAM;AACT,IAAA,OAAO,KAAA;AAAA,EACT;AACA,EAAA,IACE,QAAQ,OAAA,CAAQ,GAAA,CAAI,IAAI,CAAA,IACxB,OAAA,CAAQ,QAAQ,IAAI,CAAA,IACpB,OAAA,CAAQ,OAAA,CAAQ,IAAI,QAAQ,CAAA,EAAG,SAAS,CAAA,EAAG,IAAI,GAAG,CAAA,EAClD;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AACA,EAAA,OAAO,KAAA;AACT,CAAA;AAEO,IAAM,gBAAgB,OAAO;AAAA,EAClC,QAAA;AAAA,EACA,GAAG;AACL,CAAA,KAGQ;AACN,EAAA,KAAA,MAAW,QAAQ,QAAA,EAAU;AAC3B,IAAA,IAAI,iBAAA,CAAkB,OAAA,EAAS,IAAA,CAAK,IAAI,CAAA,EAAG;AACzC,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,KAAA,GAAQ,MAAM,YAAA,CAAa,IAAA,EAAM,QAAQ,IAAI,CAAA;AAEnD,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,IAAA,GAAO,KAAK,IAAA,IAAQ,eAAA;AAE1B,IAAA,QAAQ,KAAK,EAAA;AAAI,MACf,KAAK,OAAA;AACH,QAAA,IAAI,CAAC,QAAQ,KAAA,EAAO;AAClB,UAAA,OAAA,CAAQ,QAAQ,EAAC;AAAA,QACnB;AACA,QAAA,OAAA,CAAQ,KAAA,CAAM,IAAI,CAAA,GAAI,KAAA;AACtB,QAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAA,OAAA,CAAQ,QAAQ,MAAA,CAAO,QAAA,EAAU,GAAG,IAAI,CAAA,CAAA,EAAI,KAAK,CAAA,CAAE,CAAA;AACnD,QAAA;AAAA,MACF,KAAK,QAAA;AAAA,MACL;AACE,QAAA,OAAA,CAAQ,OAAA,CAAQ,GAAA,CAAI,IAAA,EAAM,KAAK,CAAA;AAC/B,QAAA;AAAA;AACJ,EACF;AACF,CAAA;AAEO,IAAM,QAAA,GAA+B,CAAC,OAAA,KAC3C,MAAA,CAAO;AAAA,EACL,SAAS,OAAA,CAAQ,OAAA;AAAA,EACjB,MAAM,OAAA,CAAQ,IAAA;AAAA,EACd,OAAO,OAAA,CAAQ,KAAA;AAAA,EACf,eAAA,EACE,OAAO,OAAA,CAAQ,eAAA,KAAoB,aAC/B,OAAA,CAAQ,eAAA,GACR,qBAAA,CAAsB,OAAA,CAAQ,eAAe,CAAA;AAAA,EACnD,KAAK,OAAA,CAAQ;AACf,CAAC,CAAA;AAEI,IAAM,YAAA,GAAe,CAAC,CAAA,EAAW,CAAA,KAAsB;AAC5D,EAAA,MAAM,MAAA,GAAS,EAAE,GAAG,CAAA,EAAG,GAAG,CAAA,EAAE;AAC5B,EAAA,IAAI,MAAA,CAAO,OAAA,EAAS,QAAA,CAAS,GAAG,CAAA,EAAG;AACjC,IAAA,MAAA,CAAO,OAAA,GAAU,OAAO,OAAA,CAAQ,SAAA,CAAU,GAAG,MAAA,CAAO,OAAA,CAAQ,SAAS,CAAC,CAAA;AAAA,EACxE;AACA,EAAA,MAAA,CAAO,OAAA,GAAU,YAAA,CAAa,CAAA,CAAE,OAAA,EAAS,EAAE,OAAO,CAAA;AAClD,EAAA,OAAO,MAAA;AACT,CAAA;AAEA,IAAM,cAAA,GAAiB,CAAC,OAAA,KAA8C;AACpE,EAAA,MAAM,UAAmC,EAAC;AAC1C,EAAA,OAAA,CAAQ,OAAA,CAAQ,CAAC,KAAA,EAAO,GAAA,KAAQ;AAC9B,IAAA,OAAA,CAAQ,IAAA,CAAK,CAAC,GAAA,EAAK,KAAK,CAAC,CAAA;AAAA,EAC3B,CAAC,CAAA;AACD,EAAA,OAAO,OAAA;AACT,CAAA;AAEO,IAAM,YAAA,GAAe,IACvB,OAAA,KACS;AACZ,EAAA,MAAM,aAAA,GAAgB,IAAI,OAAA,EAAQ;AAClC,EAAA,KAAA,MAAW,UAAU,OAAA,EAAS;AAC5B,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GACJ,kBAAkB,OAAA,GACd,cAAA,CAAe,MAAM,CAAA,GACrB,MAAA,CAAO,QAAQ,MAAM,CAAA;AAE3B,IAAA,KAAA,MAAW,CAAC,GAAA,EAAK,KAAK,CAAA,IAAK,QAAA,EAAU;AACnC,MAAA,IAAI,UAAU,IAAA,EAAM;AAClB,QAAA,aAAA,CAAc,OAAO,GAAG,CAAA;AAAA,MAC1B,CAAA,MAAA,IAAW,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;AAC/B,QAAA,KAAA,MAAW,KAAK,KAAA,EAAO;AACrB,UAAA,aAAA,CAAc,MAAA,CAAO,KAAK,CAAW,CAAA;AAAA,QACvC;AAAA,MACF,CAAA,MAAA,IAAW,UAAU,MAAA,EAAW;AAG9B,QAAA,aAAA,CAAc,GAAA;AAAA,UACZ,GAAA;AAAA,UACA,OAAO,KAAA,KAAU,QAAA,GAAW,IAAA,CAAK,SAAA,CAAU,KAAK,CAAA,GAAK;AAAA,SACvD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,EAAA,OAAO,aAAA;AACT,CAAA;AAoBA,IAAM,eAAN,MAAgC;AAAA,EAAhC,WAAA,GAAA;AACE,IAAA,IAAA,CAAA,GAAA,GAAiC,EAAC;AAAA,EAAA;AAAA,EAElC,KAAA,GAAc;AACZ,IAAA,IAAA,CAAK,MAAM,EAAC;AAAA,EACd;AAAA,EAEA,MAAM,EAAA,EAAgC;AACpC,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,mBAAA,CAAoB,EAAE,CAAA;AACzC,IAAA,IAAI,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA,EAAG;AACnB,MAAA,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA,GAAI,IAAA;AAAA,IACpB;AAAA,EACF;AAAA,EAEA,OAAO,EAAA,EAAmC;AACxC,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,mBAAA,CAAoB,EAAE,CAAA;AACzC,IAAA,OAAO,OAAA,CAAQ,IAAA,CAAK,GAAA,CAAI,KAAK,CAAC,CAAA;AAAA,EAChC;AAAA,EAEA,oBAAoB,EAAA,EAAkC;AACpD,IAAA,IAAI,OAAO,OAAO,QAAA,EAAU;AAC1B,MAAA,OAAO,IAAA,CAAK,GAAA,CAAI,EAAE,CAAA,GAAI,EAAA,GAAK,EAAA;AAAA,IAC7B;AACA,IAAA,OAAO,IAAA,CAAK,GAAA,CAAI,OAAA,CAAQ,EAAE,CAAA;AAAA,EAC5B;AAAA,EAEA,MAAA,CACE,IACA,EAAA,EAC8B;AAC9B,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,mBAAA,CAAoB,EAAE,CAAA;AACzC,IAAA,IAAI,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA,EAAG;AACnB,MAAA,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA,GAAI,EAAA;AAClB,MAAA,OAAO,EAAA;AAAA,IACT;AACA,IAAA,OAAO,KAAA;AAAA,EACT;AAAA,EAEA,IAAI,EAAA,EAAyB;AAC3B,IAAA,IAAA,CAAK,GAAA,CAAI,KAAK,EAAE,CAAA;AAChB,IAAA,OAAO,IAAA,CAAK,IAAI,MAAA,GAAS,CAAA;AAAA,EAC3B;AACF,CAAA;AAQO,IAAM,qBAAqB,OAK5B;AAAA,EACJ,KAAA,EAAO,IAAI,YAAA,EAAqD;AAAA,EAChE,OAAA,EAAS,IAAI,YAAA,EAA2C;AAAA,EACxD,QAAA,EAAU,IAAI,YAAA;AAChB,CAAA,CAAA;AAEA,IAAM,yBAAyB,qBAAA,CAAsB;AAAA,EACnD,aAAA,EAAe,KAAA;AAAA,EACf,KAAA,EAAO;AAAA,IACL,OAAA,EAAS,IAAA;AAAA,IACT,KAAA,EAAO;AAAA,GACT;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,OAAA,EAAS,IAAA;AAAA,IACT,KAAA,EAAO;AAAA;AAEX,CAAC,CAAA;AAED,IAAM,cAAA,GAAiB;AAAA,EACrB,cAAA,EAAgB;AAClB,CAAA;AAEO,IAAM,YAAA,GAAe,CAC1B,QAAA,GAAqD,EAAC,MACR;AAAA,EAC9C,GAAG,kBAAA;AAAA,EACH,OAAA,EAAS,cAAA;AAAA,EACT,OAAA,EAAS,MAAA;AAAA,EACT,eAAA,EAAiB,sBAAA;AAAA,EACjB,GAAG;AACL,CAAA,CAAA;;;ACjTO,IAAM,YAAA,GAAe,CAAC,MAAA,GAAiB,EAAC,KAAc;AAC3D,EAAA,IAAI,OAAA,GAAU,YAAA,CAAa,YAAA,EAAa,EAAG,MAAM,CAAA;AAEjD,EAAA,MAAM,SAAA,GAAY,OAAe,EAAE,GAAG,OAAA,EAAQ,CAAA;AAE9C,EAAA,MAAM,SAAA,GAAY,CAACC,OAAAA,KAA2B;AAC5C,IAAA,OAAA,GAAU,YAAA,CAAa,SAASA,OAAM,CAAA;AACtC,IAAA,OAAO,SAAA,EAAU;AAAA,EACnB,CAAA;AAEA,EAAA,MAAM,eAAe,kBAAA,EAKnB;AAEF,EAAA,MAAM,aAAA,GAAgB,OAAO,OAAA,KAA4B;AACvD,IAAA,MAAM,IAAA,GAAO;AAAA,MACX,GAAG,OAAA;AAAA,MACH,GAAG,OAAA;AAAA,MACH,KAAA,EAAO,OAAA,CAAQ,KAAA,IAAS,OAAA,CAAQ,SAAS,UAAA,CAAW,KAAA;AAAA,MACpD,OAAA,EAAS,YAAA,CAAa,OAAA,CAAQ,OAAA,EAAS,QAAQ,OAAO,CAAA;AAAA,MACtD,cAAA,EAAgB;AAAA,KAClB;AAEA,IAAA,IAAI,KAAK,QAAA,EAAU;AACjB,MAAA,MAAM,aAAA,CAAc;AAAA,QAClB,GAAG,IAAA;AAAA,QACH,UAAU,IAAA,CAAK;AAAA,OAChB,CAAA;AAAA,IACH;AAEA,IAAA,IAAI,KAAK,gBAAA,EAAkB;AACzB,MAAA,MAAM,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAAA,IAClC;AAEA,IAAA,IAAI,IAAA,CAAK,IAAA,KAAS,MAAA,IAAa,IAAA,CAAK,cAAA,EAAgB;AAClD,MAAA,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,IAAI,CAAA;AAAA,IACrD;AAGA,IAAA,IAAI,IAAA,CAAK,IAAA,KAAS,MAAA,IAAa,IAAA,CAAK,mBAAmB,EAAA,EAAI;AACzD,MAAA,IAAA,CAAK,OAAA,CAAQ,OAAO,cAAc,CAAA;AAAA,IACpC;AAEA,IAAA,MAAM,GAAA,GAAM,SAAS,IAAI,CAAA;AAEzB,IAAA,OAAO,EAAE,MAAM,GAAA,EAAI;AAAA,EACrB,CAAA;AAEA,EAAA,MAAM,OAAA,GAA6B,OAAO,OAAA,KAAY;AACpD,IAAA,MAAM,EAAE,IAAA,EAAM,GAAA,EAAI,GAAI,MAAM,cAAc,OAAO,CAAA;AACjD,IAAA,MAAM,WAAA,GAAuB;AAAA,MAC3B,QAAA,EAAU,QAAA;AAAA,MACV,GAAG,IAAA;AAAA,MACH,IAAA,EAAM,oBAAoB,IAAI;AAAA,KAChC;AAEA,IAAA,IAAIC,QAAAA,GAAU,IAAI,OAAA,CAAQ,GAAA,EAAK,WAAW,CAAA;AAE1C,IAAA,KAAA,MAAW,EAAA,IAAM,YAAA,CAAa,OAAA,CAAQ,GAAA,EAAK;AACzC,MAAA,IAAI,EAAA,EAAI;AACN,QAAAA,QAAAA,GAAU,MAAM,EAAA,CAAGA,QAAAA,EAAS,IAAI,CAAA;AAAA,MAClC;AAAA,IACF;AAIA,IAAA,MAAM,SAAS,IAAA,CAAK,KAAA;AACpB,IAAA,IAAI,QAAA,GAAW,MAAM,MAAA,CAAOA,QAAO,CAAA;AAEnC,IAAA,KAAA,MAAW,EAAA,IAAM,YAAA,CAAa,QAAA,CAAS,GAAA,EAAK;AAC1C,MAAA,IAAI,EAAA,EAAI;AACN,QAAA,QAAA,GAAW,MAAM,EAAA,CAAG,QAAA,EAAUA,QAAAA,EAAS,IAAI,CAAA;AAAA,MAC7C;AAAA,IACF;AAEA,IAAA,MAAM,MAAA,GAAS;AAAA,MACb,OAAA,EAAAA,QAAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,IAAI,SAAS,EAAA,EAAI;AACf,MAAA,MAAM,OAAA,GAAA,CACH,IAAA,CAAK,OAAA,KAAY,MAAA,GACd,UAAA,CAAW,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,cAAc,CAAC,CAAA,GAC/C,IAAA,CAAK,OAAA,KAAY,MAAA;AAEvB,MAAA,IACE,QAAA,CAAS,WAAW,GAAA,IACpB,QAAA,CAAS,QAAQ,GAAA,CAAI,gBAAgB,MAAM,GAAA,EAC3C;AACA,QAAA,IAAI,SAAA;AACJ,QAAA,QAAQ,OAAA;AAAS,UACf,KAAK,aAAA;AAAA,UACL,KAAK,MAAA;AAAA,UACL,KAAK,MAAA;AACH,YAAA,SAAA,GAAY,MAAM,QAAA,CAAS,OAAO,CAAA,EAAE;AACpC,YAAA;AAAA,UACF,KAAK,UAAA;AACH,YAAA,SAAA,GAAY,IAAI,QAAA,EAAS;AACzB,YAAA;AAAA,UACF,KAAK,QAAA;AACH,YAAA,SAAA,GAAY,QAAA,CAAS,IAAA;AACrB,YAAA;AAAA,UACF,KAAK,MAAA;AAAA,UACL;AACE,YAAA,SAAA,GAAY,EAAC;AACb,YAAA;AAAA;AAEJ,QAAA,OAAO,IAAA,CAAK,aAAA,KAAkB,MAAA,GAC1B,SAAA,GACA;AAAA,UACE,IAAA,EAAM,SAAA;AAAA,UACN,GAAG;AAAA,SACL;AAAA,MACN;AAEA,MAAA,IAAI,IAAA;AACJ,MAAA,QAAQ,OAAA;AAAS,QACf,KAAK,aAAA;AAAA,QACL,KAAK,MAAA;AAAA,QACL,KAAK,UAAA;AAAA,QACL,KAAK,MAAA;AAAA,QACL,KAAK,MAAA;AACH,UAAA,IAAA,GAAO,MAAM,QAAA,CAAS,OAAO,CAAA,EAAE;AAC/B,UAAA;AAAA,QACF,KAAK,QAAA;AACH,UAAA,OAAO,IAAA,CAAK,aAAA,KAAkB,MAAA,GAC1B,QAAA,CAAS,IAAA,GACT;AAAA,YACE,MAAM,QAAA,CAAS,IAAA;AAAA,YACf,GAAG;AAAA,WACL;AAAA;AAGR,MAAA,IAAI,YAAY,MAAA,EAAQ;AACtB,QAAA,IAAI,KAAK,iBAAA,EAAmB;AAC1B,UAAA,MAAM,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAAA,QACnC;AAEA,QAAA,IAAI,KAAK,mBAAA,EAAqB;AAC5B,UAAA,IAAA,GAAO,MAAM,IAAA,CAAK,mBAAA,CAAoB,IAAI,CAAA;AAAA,QAC5C;AAAA,MACF;AAEA,MAAA,OAAO,IAAA,CAAK,aAAA,KAAkB,MAAA,GAC1B,IAAA,GACA;AAAA,QACE,IAAA;AAAA,QACA,GAAG;AAAA,OACL;AAAA,IACN;AAEA,IAAA,MAAM,SAAA,GAAY,MAAM,QAAA,CAAS,IAAA,EAAK;AACtC,IAAA,IAAI,SAAA;AAEJ,IAAA,IAAI;AACF,MAAA,SAAA,GAAY,IAAA,CAAK,MAAM,SAAS,CAAA;AAAA,IAClC,CAAA,CAAA,MAAQ;AAAA,IAER;AAEA,IAAA,MAAM,QAAQ,SAAA,IAAa,SAAA;AAC3B,IAAA,IAAI,UAAA,GAAa,KAAA;AAEjB,IAAA,KAAA,MAAW,EAAA,IAAM,YAAA,CAAa,KAAA,CAAM,GAAA,EAAK;AACvC,MAAA,IAAI,EAAA,EAAI;AACN,QAAA,UAAA,GAAc,MAAM,EAAA,CAAG,KAAA,EAAO,QAAA,EAAUA,UAAS,IAAI,CAAA;AAAA,MACvD;AAAA,IACF;AAEA,IAAA,UAAA,GAAa,cAAe,EAAC;AAE7B,IAAA,IAAI,KAAK,YAAA,EAAc;AACrB,MAAA,MAAM,UAAA;AAAA,IACR;AAGA,IAAA,OAAO,IAAA,CAAK,aAAA,KAAkB,MAAA,GAC1B,MAAA,GACA;AAAA,MACE,KAAA,EAAO,UAAA;AAAA,MACP,GAAG;AAAA,KACL;AAAA,EACN,CAAA;AAEA,EAAA,MAAM,YAAA,GACJ,CAAC,MAAA,KAAkC,CAAC,OAAA,KAClC,QAAQ,EAAE,GAAG,OAAA,EAAS,MAAA,EAAQ,CAAA;AAElC,EAAA,MAAM,SAAA,GACJ,CAAC,MAAA,KAAkC,OAAO,OAAA,KAA4B;AACpE,IAAA,MAAM,EAAE,IAAA,EAAM,GAAA,EAAI,GAAI,MAAM,cAAc,OAAO,CAAA;AACjD,IAAA,OAAO,eAAA,CAAgB;AAAA,MACrB,GAAG,IAAA;AAAA,MACH,MAAM,IAAA,CAAK,IAAA;AAAA,MACX,SAAS,IAAA,CAAK,OAAA;AAAA,MACd,MAAA;AAAA,MACA,SAAA,EAAW,OAAOC,IAAAA,EAAK,IAAA,KAAS;AAC9B,QAAA,IAAID,QAAAA,GAAU,IAAI,OAAA,CAAQC,IAAAA,EAAK,IAAI,CAAA;AACnC,QAAA,KAAA,MAAW,EAAA,IAAM,YAAA,CAAa,OAAA,CAAQ,GAAA,EAAK;AACzC,UAAA,IAAI,EAAA,EAAI;AACN,YAAAD,QAAAA,GAAU,MAAM,EAAA,CAAGA,QAAAA,EAAS,IAAI,CAAA;AAAA,UAClC;AAAA,QACF;AACA,QAAA,OAAOA,QAAAA;AAAA,MACT,CAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA,EACH,CAAA;AAEF,EAAA,OAAO;AAAA,IACL,QAAA;AAAA,IACA,OAAA,EAAS,aAAa,SAAS,CAAA;AAAA,IAC/B,MAAA,EAAQ,aAAa,QAAQ,CAAA;AAAA,IAC7B,GAAA,EAAK,aAAa,KAAK,CAAA;AAAA,IACvB,SAAA;AAAA,IACA,IAAA,EAAM,aAAa,MAAM,CAAA;AAAA,IACzB,YAAA;AAAA,IACA,OAAA,EAAS,aAAa,SAAS,CAAA;AAAA,IAC/B,KAAA,EAAO,aAAa,OAAO,CAAA;AAAA,IAC3B,IAAA,EAAM,aAAa,MAAM,CAAA;AAAA,IACzB,GAAA,EAAK,aAAa,KAAK,CAAA;AAAA,IACvB,OAAA;AAAA,IACA,SAAA;AAAA,IACA,GAAA,EAAK;AAAA,MACH,OAAA,EAAS,UAAU,SAAS,CAAA;AAAA,MAC5B,MAAA,EAAQ,UAAU,QAAQ,CAAA;AAAA,MAC1B,GAAA,EAAK,UAAU,KAAK,CAAA;AAAA,MACpB,IAAA,EAAM,UAAU,MAAM,CAAA;AAAA,MACtB,OAAA,EAAS,UAAU,SAAS,CAAA;AAAA,MAC5B,KAAA,EAAO,UAAU,OAAO,CAAA;AAAA,MACxB,IAAA,EAAM,UAAU,MAAM,CAAA;AAAA,MACtB,GAAA,EAAK,UAAU,KAAK,CAAA;AAAA,MACpB,KAAA,EAAO,UAAU,OAAO;AAAA,KAC1B;AAAA,IACA,KAAA,EAAO,aAAa,OAAO;AAAA,GAC7B;AACF,CAAA;;;AC3PO,IAAM,MAAA,GAAS,YAAA,CAAa,YAAA,EAA8B,CAAA;;;AC0C1D,IAAM,mCAAA,GAAsC,CAAuC,OAAA,KAA4E;AAClK,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAA4G;AAAA,IAC1I,GAAA,EAAK,sCAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAOO,IAAM,kCAAA,GAAqC,CAAuC,OAAA,KAA2E;AAChK,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAA0G;AAAA,IACxI,GAAA,EAAK,qCAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAOO,IAAM,iCAAA,GAAoC,CAAuC,OAAA,KAA0E;AAC9J,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAAwG;AAAA,IACtI,GAAA,EAAK,oCAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAmBO,IAAM,WAAA,GAAc,CAAuC,OAAA,KAAqD;AACnH,EAAA,OAAA,CAAQ,OAAA,EAAS,MAAA,IAAU,MAAA,EAAQ,GAAA,CAAiD;AAAA,IAChF,GAAA,EAAK,YAAA;AAAA,IACL,GAAG;AAAA,GACN,CAAA;AACL,CAAA;AA+CO,IAAM,qBAAA,GAAwB,CAAuC,OAAA,KAA8D;AACtI,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,GAAA,CAA+E;AAAA,IAC7G,GAAA,EAAK,uBAAA;AAAA,IACL,GAAG;AAAA,GACN,CAAA;AACL,CAAA;AA2LO,IAAM,2CAAA,GAA8C,CAAuC,OAAA,KAAoF;AAClL,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAA4H;AAAA,IAC1J,GAAA,EAAK,+CAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAOO,IAAM,2CAAA,GAA8C,CAAuC,OAAA,KAAoF;AAClL,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAA4H;AAAA,IAC1J,GAAA,EAAK,+CAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAOO,IAAM,uCAAA,GAA0C,CAAuC,OAAA,KAAgF;AAC1K,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAAoH;AAAA,IAClJ,GAAA,EAAK,2CAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;AAOO,IAAM,yCAAA,GAA4C,CAAuC,OAAA,KAAkF;AAC9K,EAAA,OAAA,CAAQ,OAAA,CAAQ,MAAA,IAAU,MAAA,EAAQ,IAAA,CAAwH;AAAA,IACtJ,GAAA,EAAK,8CAAA;AAAA,IACL,GAAG,OAAA;AAAA,IACH,OAAA,EAAS;AAAA,MACL,cAAA,EAAgB,kBAAA;AAAA,MAChB,GAAG,OAAA,CAAQ;AAAA;AACf,GACH,CAAA;AACL,CAAA;;;ACvZO,IAAM,oBAAA,GAAN,cAAmC,KAAA,CAAM;AAAA,EAK9C,WAAA,CACE,IAAA,EACA,OAAA,EACA,OAAA,EACA;AACA,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,sBAAA;AACZ,IAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AACZ,IAAA,IAAA,CAAK,WAAW,OAAA,EAAS,QAAA;AACzB,IAAA,IAAA,CAAK,QAAQ,OAAA,EAAS,KAAA;AAAA,EACxB;AACF;AAUO,IAAM,iBAAA,GAAN,cAAgC,KAAA,CAAM;AAAA,EAI3C,WAAA,CACE,IAAA,EACA,OAAA,EACA,OAAA,EACA;AACA,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,mBAAA;AACZ,IAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AACZ,IAAA,IAAA,CAAK,QAAQ,OAAA,EAAS,KAAA;AAAA,EACxB;AACF;AAeO,IAAM,mBAAA,GAAN,cAAkC,KAAA,CAAM;AAAA,EAO7C,WAAA,CACE,IAAA,EACA,OAAA,EACA,OAAA,EACA;AACA,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,qBAAA;AACZ,IAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AACZ,IAAA,IAAA,CAAK,WAAW,OAAA,EAAS,QAAA;AACzB,IAAA,IAAA,CAAK,SAAS,OAAA,EAAS,MAAA;AACvB,IAAA,IAAA,CAAK,UAAU,OAAA,EAAS,OAAA;AACxB,IAAA,IAAA,CAAK,QAAQ,OAAA,EAAS,KAAA;AAAA,EACxB;AACF;AAYO,IAAM,iBAAA,GAAN,cAAgC,KAAA,CAAM;AAAA,EAI3C,WAAA,CACE,IAAA,EACA,OAAA,EACA,OAAA,EACA;AACA,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,mBAAA;AACZ,IAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AACZ,IAAA,IAAA,CAAK,QAAQ,OAAA,EAAS,KAAA;AAAA,EACxB;AACF;;;AC5CA,IAAM,sBAAA,GAA4D;AAAA,EAChE,UAAA,EAAY,uBAAA;AAAA,EACZ,QAAA,EAAU,+BAAA;AAAA,EACV,WAAA,EAAa,0CAAA;AAAA,EACb,aAAA,EAAe,6CAAA;AAAA,EACf,eAAA,EAAiB,8CAAA;AAAA,EACjB,eAAA,EAAiB;AACnB,CAAA;AAkBO,IAAM,iBAAN,MAAqB;AAAA,EAQ1B,YAAY,OAAA,EAAgC;AAC1C,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,UAAU,OAAA,CAAQ,OAAA;AACvB,IAAA,IAAA,CAAK,iBAAiB,OAAA,CAAQ,OAAA;AAC9B,IAAA,IAAA,CAAK,kBAAkB,OAAA,CAAQ,QAAA;AAC/B,IAAA,IAAA,CAAK,SAAA,GAAY,OAAA,CAAQ,SAAA,CAAU,OAAA,EAAQ;AAC3C,IAAA,IAAA,CAAK,iBAAiB,OAAA,CAAQ,cAAA;AAAA,EAChC;AAAA,EAEA,MAAM,WAAW,OAAA,EAA2D;AAC1E,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,WAAA,CAAY;AAAA,MAC/B,GAAG;AAAA,KACJ,CAAA;AACD,IAAA,OAAO,KAAK,YAAA,CAAa,MAAA,EAAQ,EAAE,SAAA,EAAW,cAAc,CAAA;AAAA,EAC9D;AAAA,EAEA,MAAM,SAAS,OAAA,EAA2D;AACxE,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AACvD,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,qBAAA,CAAsB;AAAA,MACzC,GAAG,UAAA;AAAA,MACH,IAAA,EAAM,EAAE,QAAA;AAAS,KAClB,CAAA;AACD,IAAA,OAAO,KAAK,YAAA,CAAa,MAAA,EAAQ,EAAE,SAAA,EAAW,UAAA,EAAY,UAAU,CAAA;AAAA,EACtE;AAAA,EAEA,MAAM,WAAA,CACJ,OAAA,EACA,OAAA,EACoC;AACpC,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AACvD,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,uCAAA,CAAwC;AAAA,MAC3D,GAAG,UAAA;AAAA,MACH,IAAA,EAAM,EAAE,QAAA,EAAS;AAAA,MACjB,IAAA,EAAM;AAAA,KACP,CAAA;AACD,IAAA,OAAO,KAAK,YAAA,CAAa,MAAA,EAAQ,EAAE,SAAA,EAAW,aAAA,EAAe,UAAU,CAAA;AAAA,EACzE;AAAA,EAEA,MAAM,aAAA,CACJ,OAAA,EACA,OAAA,EACoC;AACpC,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AACvD,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,yCAAA,CAA0C;AAAA,MAC7D,GAAG,UAAA;AAAA,MACH,IAAA,EAAM,EAAE,QAAA,EAAS;AAAA,MACjB,IAAA,EAAM;AAAA,KACP,CAAA;AACD,IAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,MAC/B,SAAA,EAAW,eAAA;AAAA,MACX;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,eAAA,CACJ,OAAA,EACA,OAAA,EACoC;AACpC,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AACvD,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,2CAAA,CAA4C;AAAA,MAC/D,GAAG,UAAA;AAAA,MACH,IAAA,EAAM,EAAE,QAAA,EAAS;AAAA,MACjB,IAAA,EAAM;AAAA,KACP,CAAA;AACD,IAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,MAC/B,SAAA,EAAW,iBAAA;AAAA,MACX;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,eAAA,CACJ,OAAA,EACA,OAAA,EACyC;AACzC,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AACvD,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAA;AACrD,IAAA,MAAM,MAAA,GAAS,MAAM,2CAAA,CAA4C;AAAA,MAC/D,GAAG,UAAA;AAAA,MACH,IAAA,EAAM,EAAE,QAAA,EAAS;AAAA,MACjB,IAAA,EAAM;AAAA,KACP,CAAA;AACD,IAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,MAC/B,SAAA,EAAW,iBAAA;AAAA,MACX;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAc,gBAAgB,OAAA,EAS3B;AACD,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,YAAA,CAAa,SAAS,OAAO,CAAA;AACxD,IAAA,OAAO;AAAA,MACL,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,SAAS,IAAA,CAAK,OAAA;AAAA,MACd,OAAO,IAAA,CAAK,SAAA;AAAA,MACZ,OAAA;AAAA,MACA,QAAQ,OAAA,EAAS,MAAA;AAAA,MACjB,MAAM,OAAA,EAAS,IAAA;AAAA,MACf,aAAA,EAAe,QAAA;AAAA,MACf,YAAA,EAAc;AAAA,KAChB;AAAA,EACF;AAAA,EAEA,MAAc,aACZ,SAAA,EACiC;AACjC,IAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,cAAA,EAAe;AACxC,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,mBAAA;AAAA,QACR,qBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,OAAA,GAAU,IAAI,OAAA,CAAQ,IAAA,CAAK,cAAc,CAAA;AAC/C,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,EAAK;AAC9B,IAAA,MAAM,eAAe,YAAA,CAAa,IAAA,CAAK,UAAU,CAAA,GAC7C,UAAA,GACA,UAAU,UAAU,CAAA,CAAA;AACxB,IAAA,OAAA,CAAQ,GAAA,CAAI,iBAAiB,YAAY,CAAA;AAEzC,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,IAAI,QAAQ,SAAS,CAAA,CAAE,OAAA,CAAQ,CAAC,OAAO,GAAA,KAAQ;AAC7C,QAAA,OAAA,CAAQ,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,MACxB,CAAC,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,MAAA,CAAO,WAAA,CAAY,OAAA,CAAQ,OAAA,EAAS,CAAA;AAAA,EAC7C;AAAA,EAEQ,gBAAgB,QAAA,EAA2B;AACjD,IAAA,MAAM,KAAA,GAAQ,YAAY,IAAA,CAAK,eAAA;AAC/B,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,mBAAA;AAAA,QACR,kBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AACA,IAAA,OAAO,KAAA;AAAA,EACT;AAAA,EAEQ,YAAA,CACN,QACA,OAAA,EACO;AACP,IAAA,IAAI,OAAA,IAAW,MAAA,IAAU,MAAA,CAAO,KAAA,KAAU,MAAA,EAAW;AACnD,MAAA,MAAM,IAAI,mBAAA;AAAA,QACR,eAAA;AAAA,QACA,sBAAA,CAAuB,QAAQ,SAAS,CAAA;AAAA,QACxC;AAAA,UACE,UAAU,OAAA,CAAQ,QAAA;AAAA,UAClB,MAAA,EAAQ,OAAO,QAAA,CAAS,MAAA;AAAA,UACxB,SAAS,MAAA,CAAO;AAAA;AAClB,OACF;AAAA,IACF;AAEA,IAAA,IAAI,MAAA,CAAO,SAAS,MAAA,EAAW;AAC7B,MAAA,MAAM,IAAI,mBAAA;AAAA,QACR,eAAA;AAAA,QACA,CAAA,4BAAA,EAA+B,QAAQ,SAAS,CAAA,CAAA;AAAA,QAChD;AAAA,UACE,UAAU,OAAA,CAAQ,QAAA;AAAA,UAClB,MAAA,EAAQ,OAAO,QAAA,CAAS;AAAA;AAC1B,OACF;AAAA,IACF;AAEA,IAAA,OAAO,MAAA,CAAO,IAAA;AAAA,EAChB;AACF;;;AC/PA,IAAME,uBAAAA,GAAyD;AAAA,EAC7D,SAAA,EAAW,iCAAA;AAAA,EACX,QAAA,EAAU,oCAAA;AAAA,EACV,OAAA,EAAS;AACX,CAAA;AAkBO,IAAM,kBAAN,MAAsB;AAAA,EAO3B,YAAY,OAAA,EAAiC;AAC3C,IAAA,MAAM,EAAE,QAAA,EAAU,MAAA,EAAAC,SAAQ,OAAA,EAAS,KAAA,EAAO,SAAQ,GAAI,OAAA;AAEtD,IAAA,IAAI,CAACA,OAAAA,IAAU,CAAC,OAAA,EAAS;AACvB,MAAA,MAAM,IAAI,oBAAA;AAAA,QACR,iBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,MAAA,GAASA,OAAAA;AACd,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAA,CAAK,SAAA,GAAY,KAAA;AACjB,IAAA,IAAA,CAAK,eAAA,GAAkB,QAAA;AACvB,IAAA,IAAA,CAAK,cAAA,GAAiB,OAAA;AAAA,EACxB;AAAA,EAEA,MAAM,gBAAA,CACJ,OAAA,EACA,OAAA,EACiC;AACjC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;AAE9C,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,MAAM,mCAAA,CAAoC;AAAA,QACvD,GAAG,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA;AAAA,QACjC,IAAA,EAAM,OAAA;AAAA,QACN,IAAA,EAAM,EAAE,QAAA,EAAU,MAAA,CAAO,QAAA;AAAS,OACnC,CAAA;AAED,MAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,QAC/B,KAAA,EAAO,WAAA;AAAA,QACP,UAAU,MAAA,CAAO;AAAA,OAClB,CAAA;AAAA,IACH,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAA,CAAK,SAAA,CAAU,WAAA,EAAa,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,IAC1D;AAAA,EACF;AAAA,EAEA,MAAM,QAAA,CACJ,OAAA,EACA,OAAA,EACgC;AAChC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;AAE9C,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,MAAM,kCAAA,CAAmC;AAAA,QACtD,GAAG,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA;AAAA,QACjC,IAAA,EAAM,OAAA;AAAA,QACN,IAAA,EAAM,EAAE,QAAA,EAAU,MAAA,CAAO,QAAA;AAAS,OACnC,CAAA;AAED,MAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,QAC/B,KAAA,EAAO,UAAA;AAAA,QACP,UAAU,MAAA,CAAO;AAAA,OAClB,CAAA;AAAA,IACH,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAA,CAAK,SAAA,CAAU,UAAA,EAAY,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,IACzD;AAAA,EACF;AAAA,EAEA,MAAM,OAAA,CACJ,OAAA,EACA,OAAA,EACgC;AAChC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;AAE9C,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,MAAM,iCAAA,CAAkC;AAAA,QACrD,GAAG,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA;AAAA,QACjC,IAAA,EAAM,OAAA;AAAA,QACN,IAAA,EAAM,EAAE,QAAA,EAAU,MAAA,CAAO,QAAA;AAAS,OACnC,CAAA;AAED,MAAA,OAAO,IAAA,CAAK,aAAa,MAAA,EAAQ;AAAA,QAC/B,KAAA,EAAO,SAAA;AAAA,QACP,UAAU,MAAA,CAAO;AAAA,OAClB,CAAA;AAAA,IACH,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAA,CAAK,SAAA,CAAU,SAAA,EAAW,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,IACxD;AAAA,EACF;AAAA,EAEQ,mBAAmB,OAAA,EAAkD;AAC3E,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,QAAQ,CAAA;AAEvD,IAAA,OAAO;AAAA,MACL,QAAA;AAAA,MACA,OAAA,EAAS,IAAA,CAAK,YAAA,CAAa,OAAA,EAAS,OAAO,CAAA;AAAA,MAC3C,QAAQ,OAAA,EAAS,MAAA;AAAA,MACjB,MAAM,OAAA,EAAS;AAAA,KACjB;AAAA,EACF;AAAA,EAEQ,gBAAgB,QAAA,EAA2B;AACjD,IAAA,MAAM,KAAA,GAAQ,YAAY,IAAA,CAAK,eAAA;AAC/B,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,oBAAA;AAAA,QACR,kBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,OAAO,KAAA;AAAA,EACT;AAAA,EAEQ,aAAa,SAAA,EAAkD;AACrE,IAAA,IAAI,CAAC,IAAA,CAAK,cAAA,IAAkB,CAAC,SAAA,EAAW;AACtC,MAAA,OAAO,MAAA;AAAA,IACT;AAEA,IAAA,MAAM,MAAA,GAAS,IAAI,OAAA,EAAQ;AAE3B,IAAA,IAAI,KAAK,cAAA,EAAgB;AACvB,MAAA,IAAI,QAAQ,IAAA,CAAK,cAAc,EAAE,OAAA,CAAQ,CAAC,OAAO,GAAA,KAAQ;AACvD,QAAA,MAAA,CAAO,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,MACvB,CAAC,CAAA;AAAA,IACH;AAEA,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,IAAI,QAAQ,SAAS,CAAA,CAAE,OAAA,CAAQ,CAAC,OAAO,GAAA,KAAQ;AAC7C,QAAA,MAAA,CAAO,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,MACvB,CAAC,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,MAAA,CAAO,WAAA,CAAY,MAAA,CAAO,OAAA,EAAS,CAAA;AAAA,EAC5C;AAAA,EAEQ,SAAA,CACN,KAAA,EACA,KAAA,EACA,QAAA,EACsB;AACtB,IAAA,IAAI,iBAAiB,oBAAA,EAAsB;AACzC,MAAA,OAAO,KAAA;AAAA,IACT;AAEA,IAAA,OAAO,IAAI,oBAAA;AAAA,MACT,eAAA;AAAA,MACAD,wBAAuB,KAAK,CAAA;AAAA,MAC5B;AAAA,QACE,QAAA;AAAA,QACA,KAAA,EAAO;AAAA;AACT,KACF;AAAA,EACF;AAAA,EAEQ,mBAAmB,MAAA,EASzB;AACA,IAAA,OAAO;AAAA,MACL,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,SAAS,IAAA,CAAK,OAAA;AAAA,MACd,OAAO,IAAA,CAAK,SAAA;AAAA,MACZ,SAAS,MAAA,CAAO,OAAA;AAAA,MAChB,QAAQ,MAAA,CAAO,MAAA;AAAA,MACf,MAAM,MAAA,CAAO,IAAA;AAAA,MACb,aAAA,EAAe,QAAA;AAAA,MACf,YAAA,EAAc;AAAA,KAChB;AAAA,EACF;AAAA,EAEQ,YAAA,CACN,QACA,OAAA,EACO;AACP,IAAA,IAAI,OAAA,IAAW,MAAA,IAAU,MAAA,CAAO,KAAA,KAAU,MAAA,EAAW;AACnD,MAAA,MAAM,IAAI,oBAAA;AAAA,QACR,eAAA;AAAA,QACAA,uBAAAA,CAAuB,QAAQ,KAAK,CAAA;AAAA,QACpC;AAAA,UACE,UAAU,OAAA,CAAQ,QAAA;AAAA,UAClB,KAAA,EAAO;AAAA,YACL,OAAO,MAAA,CAAO,KAAA;AAAA,YACd,UAAU,MAAA,CAAO,QAAA;AAAA,YACjB,SAAS,MAAA,CAAO;AAAA;AAClB;AACF,OACF;AAAA,IACF;AAEA,IAAA,IAAI,MAAA,CAAO,SAAS,MAAA,EAAW;AAC7B,MAAA,MAAM,IAAI,oBAAA;AAAA,QACR,eAAA;AAAA,QACA,CAAA,MAAA,EAAS,QAAQ,KAAK,CAAA,SAAA,CAAA;AAAA,QACtB;AAAA,UACE,UAAU,OAAA,CAAQ,QAAA;AAAA,UAClB,KAAA,EAAO;AAAA,YACL,UAAU,MAAA,CAAO,QAAA;AAAA,YACjB,SAAS,MAAA,CAAO;AAAA;AAClB;AACF,OACF;AAAA,IACF;AAEA,IAAA,OAAO,MAAA,CAAO,IAAA;AAAA,EAChB;AACF;AC/PA,IAAM,uBAAA,GAA0B;AAChC,IAAM,oBAAA,GAAuB;AAE7B,IAAM,UAAA,GAAa,cAAA;AAEnB,IAAM,YAAA,GAAe,GAAG,UAAU,CAAA,QAAA;AAClC,IAAM,aAAA,GAAgB,GAAG,UAAU,CAAA,SAAA;AACnC,IAAM,YAAA,GAAe,GAAG,UAAU,CAAA,QAAA;AAClC,IAAM,iBAAA,GAAoB,GAAG,UAAU,CAAA,aAAA;AACvC,IAAM,iBAAA,GAAoB,GAAG,UAAU,CAAA,aAAA;AACvC,IAAM,UAAA,GAAa,GAAG,UAAU,CAAA,MAAA;AAChC,IAAM,eAAA,GAAkB,GAAG,UAAU,CAAA,WAAA;AAuDrC,eAAsB,sBAAA,CACpB,OAAA,GAA+B,EAAC,EACG;AACnC,EAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,GAAA,IAAO,OAAA,CAAQ,GAAA;AACnC,EAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,GAAA,IAAO,OAAA,CAAQ,GAAA,EAAI;AAEvC,EAAA,MAAM,YAAA,GAAe,OAAA,CAAQ,IAAA,IAAQ,GAAA,CAAI,eAAe,CAAA;AACxD,EAAA,MAAM,aAAa,YAAA,IAAgB,uBAAA;AACnC,EAAA,MAAM,eAAe,UAAA,CAAW,UAAU,IACtC,UAAA,GACA,OAAA,CAAQ,KAAK,UAAU,CAAA;AAE3B,EAAA,MAAM,aAAa,MAAM,cAAA;AAAA,IACvB,YAAA;AAAA,IACA,QAAQ,QAAA,IAAY;AAAA,GACtB;AAEA,EAAA,MAAM,OAAA,GACJ,QAAQ,SAAA,EAAW,OAAA,IACnB,IAAI,YAAY,CAAA,IAChB,YAAY,UAAA,IACZ,oBAAA;AAEF,EAAA,MAAM,QAAA,GACJ,OAAA,CAAQ,SAAA,EAAW,QAAA,IACnB,GAAA,CAAI,aAAa,CAAA,IACjB,GAAA,CAAI,YAAY,CAAA,IAChB,UAAA,EAAY,QAAA,IACZ,UAAA,EAAY,OAAA;AAEd,EAAA,MAAM,eACJ,OAAA,CAAQ,SAAA,EAAW,gBACnB,GAAA,CAAI,iBAAiB,KACrB,UAAA,EAAY,YAAA;AAEd,EAAA,MAAM,eACJ,OAAA,CAAQ,SAAA,EAAW,gBACnB,GAAA,CAAI,iBAAiB,KACrB,UAAA,EAAY,YAAA;AAEd,EAAA,MAAM,MAAA,GACJ,eAAA,CAAgB,OAAA,CAAQ,SAAA,EAAW,MAAM,CAAA,IACzC,eAAA,CAAgB,GAAA,CAAI,UAAU,CAAC,CAAA,IAC/B,eAAA,CAAgB,YAAY,MAAM,CAAA;AAEpC,EAAA,gBAAA,CAAiB,UAAA,EAAY,UAAU,YAAY,CAAA;AACnD,EAAA,gBAAA,CAAiB,cAAA,EAAgB,cAAc,YAAY,CAAA;AAE3D,EAAA,MAAM,MAAA,GAA6B;AAAA,IACjC,OAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,cAAc,YAAA,IAAgB,MAAA;AAAA,IAC9B,QAAQ,MAAA,IAAU;AAAA,GACpB;AAEA,EAAA,OAAO;AAAA,IACL,MAAA;AAAA,IACA,UAAA,EAAY,aAAa,YAAA,GAAe,MAAA;AAAA,IACxC;AAAA,GACF;AACF;AAEA,IAAM,eAAA,GAAkB,CAAC,IAAA,KAAiB,QAAA,CAAS,MAAM,MAAM,CAAA;AAE/D,eAAe,cAAA,CACb,MACA,MAAA,EACiC;AACjC,EAAA,IAAI;AACF,IAAA,MAAM,QAAA,GAAW,MAAM,MAAA,CAAO,IAAI,CAAA;AAClC,IAAA,IAAI,CAAC,QAAA,CAAS,IAAA,EAAK,EAAG;AACpB,MAAA,OAAO,EAAC;AAAA,IACV;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA;AAClC,MAAA,OAAO,MAAA;AAAA,IACT,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA,kCAAkC,IAAI,CAAA,CAAA;AAAA,QACtC,EAAE,OAAO,KAAA;AAAM,OACjB;AAAA,IACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IACE,WAAA,CAAY,KAAK,CAAA,KAChB,KAAA,CAAM,SAAS,QAAA,IAAY,KAAA,CAAM,SAAS,SAAA,CAAA,EAC3C;AACA,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,MAAM,IAAI,iBAAA;AAAA,MACR,oBAAA;AAAA,MACA,iCAAiC,IAAI,CAAA,CAAA;AAAA,MACrC,EAAE,OAAO,KAAA;AAAM,KACjB;AAAA,EACF;AACF;AAEA,SAAS,gBACP,KAAA,EACsB;AACtB,EAAA,IAAI,CAAC,KAAA,EAAO;AACV,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;AACxB,IAAA,MAAM,SAAS,KAAA,CACZ,MAAA,CAAO,CAAC,KAAA,KAA2B,OAAO,KAAA,KAAU,QAAQ,CAAA,CAC5D,GAAA,CAAI,CAAC,KAAA,KAAU,KAAA,CAAM,MAAM,CAAA,CAC3B,OAAO,OAAO,CAAA;AACjB,IAAA,OAAO,MAAA,CAAO,SAAS,MAAA,GAAS,MAAA;AAAA,EAClC;AAEA,EAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC7B,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,EAAK;AAC3B,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,OAAO,MAAA;AAAA,IACT;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,OAAO,CAAA;AACjC,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAM,CAAA,EAAG;AACzB,QAAA,OAAO,gBAAgB,MAAM,CAAA;AAAA,MAC/B;AAAA,IACF,CAAA,CAAA,MAAQ;AAAA,IAER;AAEA,IAAA,MAAM,MAAA,GAAS,OAAA,CACZ,KAAA,CAAM,GAAG,CAAA,CACT,GAAA,CAAI,CAAC,KAAA,KAAU,KAAA,CAAM,IAAA,EAAM,CAAA,CAC3B,OAAO,OAAO,CAAA;AACjB,IAAA,OAAO,MAAA,CAAO,SAAS,MAAA,GAAS,MAAA;AAAA,EAClC;AAEA,EAAA,OAAO,MAAA;AACT;AAEA,SAAS,gBAAA,CACP,KAAA,EACA,KAAA,EACA,IAAA,EACyB;AACzB,EAAA,IAAI,CAAC,KAAA,EAAO;AACV,IAAA,MAAM,IAAI,iBAAA;AAAA,MACR,oBAAA;AAAA,MACA,CAAA,sCAAA,EAAyC,KAAK,CAAA,WAAA,EAAc,IAAI,CAAA,2BAAA;AAAA,KAClE;AAAA,EACF;AACF;AAEA,SAAS,YAAY,KAAA,EAAgD;AACnE,EAAA,OAAO,OAAO,KAAA,KAAU,QAAA,IAAY,KAAA,KAAU,QAAQ,MAAA,IAAU,KAAA;AAClE;;;AClOO,IAAM,uBAAN,MAAqE;AAAA,EAArE,WAAA,GAAA;AACL,IAAA,IAAA,CAAiB,KAAA,uBAAY,GAAA,EAAe;AAAA,EAAA;AAAA,EAE5C,MAAM,IAAI,GAAA,EAAgC;AACxC,IAAA,OAAO,IAAA,CAAK,MAAM,GAAA,CAAI,GAAG,IAAK,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAG,CAAA,GAAU,IAAA;AAAA,EAC5D;AAAA,EAEA,MAAM,GAAA,CAAI,GAAA,EAAa,KAAA,EAAyB;AAC9C,IAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,GAAA,EAAK,KAAK,CAAA;AAAA,EAC3B;AAAA,EAEA,MAAM,OAAO,GAAA,EAA4B;AACvC,IAAA,IAAA,CAAK,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,EACvB;AACF;AAEO,IAAM,0BAAA,GAA6B,MACxC,IAAI,oBAAA;;;ACqCN,IAAM,mBAAA,GAAsB,yBAAA;AAC5B,IAAM,4BAAA,GAA+B,GAAA;AAErC,IAAM,aAAA,GAAgB,CAAC,KAAA,KACrB,KAAA,YAAiB,OAAO,KAAA,GAAQ,IAAI,KAAK,KAAK,CAAA;AAEhD,IAAM,aAAA,GAAgB,CAAC,QAAA,MAAoD;AAAA,EACzE,aAAa,QAAA,CAAS,WAAA;AAAA,EACtB,sBAAsB,IAAI,IAAA,CAAK,QAAA,CAAS,oBAAA,CAAqB,SAAS,CAAA;AAAA,EACtE,cAAc,QAAA,CAAS,YAAA;AAAA,EACvB,uBAAuB,IAAI,IAAA,CAAK,QAAA,CAAS,qBAAA,CAAsB,SAAS,CAAA;AAAA,EACxE,iBAAiB,QAAA,CAAS,eAAA;AAAA,EAC1B,QAAQ,QAAA,CAAS,MAAA,GAAS,CAAC,GAAG,QAAA,CAAS,MAAM,CAAA,GAAI;AACnD,CAAA,CAAA;AAEA,IAAM,iBAAA,GAAoB,CACxB,QAAA,MAC2B;AAAA,EAC3B,OAAA,EAAS,CAAA;AAAA,EACT,KAAA,EAAO;AAAA,IACL,aAAa,QAAA,CAAS,WAAA;AAAA,IACtB,oBAAA,EAAsB,QAAA,CAAS,oBAAA,CAAqB,WAAA,EAAY;AAAA,IAChE,cAAc,QAAA,CAAS,YAAA;AAAA,IACvB,qBAAA,EAAuB,QAAA,CAAS,qBAAA,CAAsB,WAAA,EAAY;AAAA,IAClE,iBAAiB,QAAA,CAAS,eAAA;AAAA,IAC1B,QAAQ,QAAA,CAAS,MAAA,GAAS,CAAC,GAAG,QAAA,CAAS,MAAM,CAAA,GAAI;AAAA;AAErD,CAAA,CAAA;AAEA,IAAM,mBAAA,GAAsB,CAC1B,UAAA,MAC2B;AAAA,EAC3B,WAAA,EAAa,WAAW,KAAA,CAAM,WAAA;AAAA,EAC9B,oBAAA,EAAsB,aAAA,CAAc,UAAA,CAAW,KAAA,CAAM,oBAAoB,CAAA;AAAA,EACzE,YAAA,EAAc,WAAW,KAAA,CAAM,YAAA;AAAA,EAC/B,qBAAA,EAAuB,aAAA;AAAA,IACrB,WAAW,KAAA,CAAM;AAAA,GACnB;AAAA,EACA,eAAA,EAAiB,UAAA,CAAW,KAAA,CAAM,eAAA,IAAmB,MAAA;AAAA,EACrD,MAAA,EAAQ,WAAW,KAAA,CAAM,MAAA,GAAS,CAAC,GAAG,UAAA,CAAW,KAAA,CAAM,MAAM,CAAA,GAAI;AACnE,CAAA,CAAA;AAEO,IAAM,eAAN,MAAmB;AAAA,EAUxB,WAAA,CAAY,OAAA,GAA+B,EAAC,EAAG;AAJ/C,IAAA,IAAA,CAAQ,MAAA,GAAuC,IAAA;AAC/C,IAAA,IAAA,CAAQ,YAAA,GAAqD,IAAA;AAC7D,IAAA,IAAA,CAAQ,cAAA,GAA0C,IAAA;AAGhD,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA,CAAQ,OAAA,IAAW,IAAI,oBAAA,EAA6B;AACnE,IAAA,IAAA,CAAK,UAAA,GAAa,QAAQ,UAAA,IAAc,mBAAA;AACxC,IAAA,IAAA,CAAK,iBAAA,GACH,QAAQ,iBAAA,IAAqB,4BAAA;AAC/B,IAAA,IAAA,CAAK,GAAA,GAAM,OAAA,CAAQ,GAAA,KAAQ,MAAM,KAAK,GAAA,EAAI,CAAA;AAAA,EAC5C;AAAA,EAEA,MAAM,OAAA,GAAyC;AAC7C,IAAA,MAAM,MAAM,MAAM,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,KAAK,UAAU,CAAA;AAClD,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,IAAI,MAAA;AACJ,IAAA,IAAI;AACF,MAAA,MAAA,GAAS,IAAA,CAAK,MAAM,GAAG,CAAA;AAAA,IACzB,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,gBAAA;AAAA,QACA,qCAAA;AAAA,QACA,EAAE,OAAO,KAAA;AAAM,OACjB;AAAA,IACF;AAEA,IAAA,IAAI,MAAA,CAAO,YAAY,CAAA,EAAG;AACxB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,gBAAA;AAAA,QACA,CAAA,kCAAA,EAAqC,OAAO,OAAO,CAAA;AAAA,OACrD;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,MAAA,GAAS,oBAAoB,MAAM,CAAA;AACxC,IAAA,OAAO,aAAA,CAAc,KAAK,MAAM,CAAA;AAAA,EAClC;AAAA,EAEA,WAAA,GAAoC;AAClC,IAAA,OAAO,IAAA,CAAK,MAAA,GAAS,aAAA,CAAc,IAAA,CAAK,MAAM,CAAA,GAAI,IAAA;AAAA,EACpD;AAAA,EAEA,oBAAA,GAAiD;AAC/C,IAAA,IAAI,CAAC,KAAK,MAAA,EAAQ;AAChB,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,OAAO;AAAA,MACL,KAAA,EAAO,KAAK,MAAA,CAAO,WAAA;AAAA,MACnB,WAAW,IAAI,IAAA,CAAK,KAAK,MAAA,CAAO,oBAAA,CAAqB,SAAS,CAAA;AAAA,MAC9D,MAAA,EAAQ,KAAK,MAAA,CAAO,MAAA,GAAS,CAAC,GAAG,IAAA,CAAK,MAAA,CAAO,MAAM,CAAA,GAAI,MAAA;AAAA,MACvD,YAAA,EAAc,KAAK,MAAA,CAAO,YAAA;AAAA,MAC1B,uBAAuB,IAAI,IAAA;AAAA,QACzB,IAAA,CAAK,MAAA,CAAO,qBAAA,CAAsB,OAAA;AAAQ,OAC5C;AAAA,MACA,eAAA,EAAiB,KAAK,MAAA,CAAO;AAAA,KAC/B;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,MAAA,EAAkD;AAChE,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,eAAA,CAAgB,MAAM,CAAA;AAC9C,IAAA,IAAA,CAAK,MAAA,GAAS,UAAA;AAEd,IAAA,MAAM,UAAA,GAAa,kBAAkB,UAAU,CAAA;AAC/C,IAAA,MAAM,IAAA,CAAK,QAAQ,GAAA,CAAI,IAAA,CAAK,YAAY,IAAA,CAAK,SAAA,CAAU,UAAU,CAAC,CAAA;AAElE,IAAA,OAAO,cAAc,UAAU,CAAA;AAAA,EACjC;AAAA,EAEA,MAAM,KAAA,GAAuB;AAC3B,IAAA,IAAA,CAAK,MAAA,GAAS,IAAA;AACd,IAAA,IAAA,CAAK,qBAAA,EAAsB;AAC3B,IAAA,MAAM,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAU,CAAA;AAAA,EAC3C;AAAA,EAEA,gBACE,OAAA,EACc;AACd,IAAA,IAAI,CAAC,KAAK,MAAA,EAAQ;AAChB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,mBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,qBAAA,EAAsB;AAE3B,IAAA,MAAM,aACJ,IAAA,CAAK,MAAA,CAAO,oBAAA,CAAqB,OAAA,KAAY,IAAA,CAAK,iBAAA;AACpD,IAAA,MAAM,QAAQ,IAAA,CAAK,GAAA,CAAI,GAAG,UAAA,GAAa,IAAA,CAAK,KAAK,CAAA;AAEjD,IAAA,IAAI,SAAA,GAAY,KAAA;AAEhB,IAAA,MAAM,MAAM,MAAM;AAChB,MAAA,KAAK,IAAA,CAAK,gBAAgB,YAAY;AACpC,QAAA,IAAI,SAAA,EAAW;AACb,UAAA;AAAA,QACF;AACA,QAAA,MAAM,IAAA,GAAO,MAAM,OAAA,EAAQ;AAC3B,QAAA,MAAM,IAAA,CAAK,UAAU,IAAI,CAAA;AAAA,MAC3B,CAAC,CAAA,CAAE,KAAA,CAAM,MAAM;AAAA,MAEf,CAAC,CAAA;AAAA,IACH,CAAA;AAEA,IAAA,IAAA,CAAK,YAAA,GAAe,UAAA,CAAW,GAAA,EAAK,KAAK,CAAA;AAEzC,IAAA,OAAO;AAAA,MACL,QAAQ,MAAM;AACZ,QAAA,SAAA,GAAY,IAAA;AACZ,QAAA,IAAA,CAAK,qBAAA,EAAsB;AAAA,MAC7B;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAM,gBAAmB,EAAA,EAAkC;AACzD,IAAA,IAAI,KAAK,cAAA,EAAgB;AACvB,MAAA,OAAO,IAAA,CAAK,cAAA;AAAA,IACd;AAEA,IAAA,MAAM,WAAW,YAAY;AAC3B,MAAA,IAAI;AACF,QAAA,OAAO,MAAM,EAAA,EAAG;AAAA,MAClB,CAAA,SAAE;AACA,QAAA,IAAA,CAAK,cAAA,GAAiB,IAAA;AAAA,MACxB;AAAA,IACF,CAAA,GAAG;AAEH,IAAA,IAAA,CAAK,cAAA,GAAiB,OAAA;AACtB,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEQ,gBAAgB,MAAA,EAAiD;AACvE,IAAA,MAAM,oBAAA,GAAuB,aAAA,CAAc,MAAA,CAAO,oBAAoB,CAAA;AACtE,IAAA,MAAM,qBAAA,GAAwB,aAAA,CAAc,MAAA,CAAO,qBAAqB,CAAA;AAExE,IAAA,OAAO;AAAA,MACL,aAAa,MAAA,CAAO,WAAA;AAAA,MACpB,oBAAA;AAAA,MACA,cAAc,MAAA,CAAO,YAAA;AAAA,MACrB,qBAAA;AAAA,MACA,eAAA,EAAiB,OAAO,eAAA,IAAmB,MAAA;AAAA,MAC3C,QAAQ,MAAA,CAAO,MAAA,GAAS,CAAC,GAAG,MAAA,CAAO,MAAM,CAAA,GAAI;AAAA,KAC/C;AAAA,EACF;AAAA,EAEQ,qBAAA,GAA8B;AACpC,IAAA,IAAI,KAAK,YAAA,EAAc;AACrB,MAAA,YAAA,CAAa,KAAK,YAAY,CAAA;AAC9B,MAAA,IAAA,CAAK,YAAA,GAAe,IAAA;AAAA,IACtB;AAAA,EACF;AACF;;;ACxJO,IAAM,kBAAA,GAAN,cAAiC,KAAA,CAAM;AAAA,EAQ5C,WAAA,CAAY,SAAiB,OAAA,EAAoC;AAC/D,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,oBAAA;AACZ,IAAA,IAAA,CAAK,OAAO,OAAA,CAAQ,IAAA;AACpB,IAAA,IAAA,CAAK,MAAM,OAAA,CAAQ,GAAA;AACnB,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,WAAW,OAAA,CAAQ,QAAA;AACxB,IAAA,IAAA,CAAK,OAAO,OAAA,CAAQ,IAAA;AACpB,IAAA,IAAA,CAAK,QAAQ,OAAA,CAAQ,KAAA;AAAA,EACvB;AACF;AAEO,IAAM,oBAAA,GAAuB,CAClC,KAAA,KACgC,KAAA,YAAiB;;;ACxGnD,IAAM,oBAAA,GAAuB,2BAAA;AAC7B,IAAM,cAAA,GAA6B,KAAA;AACnC,IAAM,qBAAA,GAA0C,MAAA;AAEhD,IAAM,UAAA,GAAa,CACjB,OAAA,EACA,KAAA,EACA,KAAA,KACW;AACX,EAAA,IAAI,MAAA,GAAqB,IAAA;AAEzB,EAAA,IAAI,iBAAiB,GAAA,EAAK;AACxB,IAAA,MAAA,GAAS,IAAI,GAAA,CAAI,KAAA,CAAM,QAAA,EAAU,CAAA;AAAA,EACnC,CAAA,MAAA,IAAW,oBAAA,CAAqB,IAAA,CAAK,KAAK,CAAA,EAAG;AAC3C,IAAA,MAAA,GAAS,IAAI,IAAI,KAAK,CAAA;AAAA,EACxB,WAAW,OAAA,EAAS;AAClB,IAAA,MAAA,GAAS,IAAI,GAAA,CAAI,KAAA,EAAO,OAAO,CAAA;AAAA,EACjC;AAEA,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAM,MACJ,OAAO,KAAA,KAAU,QAAA,GAAW,KAAA,GAAQ,MAAM,QAAA,EAAS;AACrD,IAAA,MAAM,IAAI,kBAAA;AAAA,MACR,gFAAA;AAAA,MACA;AAAA,QACE,IAAA,EAAM,oBAAA;AAAA,QACN,GAAA,EAAK;AAAA;AACP,KACF;AAAA,EACF;AAEA,EAAA,IAAI,KAAA,EAAO;AACT,IAAA,MAAM,MAAA,GAAS,IAAI,eAAA,CAAgB,MAAA,CAAO,MAAM,CAAA;AAChD,IAAA,KAAA,MAAW,CAAC,GAAA,EAAK,KAAK,KAAK,MAAA,CAAO,OAAA,CAAQ,KAAK,CAAA,EAAG;AAChD,MAAA,IAAI,KAAA,KAAU,MAAA,IAAa,KAAA,KAAU,IAAA,EAAM;AACzC,QAAA;AAAA,MACF;AACA,MAAA,MAAM,UAAA,GACJ,OAAO,KAAA,KAAU,SAAA,GAAa,QAAQ,MAAA,GAAS,OAAA,GAAW,OAAO,KAAK,CAAA;AACxE,MAAA,MAAA,CAAO,GAAA,CAAI,KAAK,UAAU,CAAA;AAAA,IAC5B;AACA,IAAA,MAAA,CAAO,MAAA,GAAS,OAAO,QAAA,EAAS;AAAA,EAClC;AAEA,EAAA,OAAO,OAAO,QAAA,EAAS;AACzB,CAAA;AAEA,IAAME,aAAAA,GAAe,IAAI,OAAA,KAAkD;AACzE,EAAA,MAAM,MAAA,GAAS,IAAI,OAAA,EAAQ;AAC3B,EAAA,KAAA,MAAW,UAAU,OAAA,EAAS;AAC5B,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA;AAAA,IACF;AACA,IAAA,MAAM,OAAA,GAAU,IAAI,OAAA,CAAQ,MAAM,CAAA;AAClC,IAAA,OAAA,CAAQ,OAAA,CAAQ,CAAC,KAAA,EAAO,GAAA,KAAQ;AAC9B,MAAA,MAAA,CAAO,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,IACvB,CAAC,CAAA;AAAA,EACH;AACA,EAAA,OAAO,MAAA;AACT,CAAA;AAEA,IAAM,iBAAA,GAAoB,CACxB,MAAA,EACA,SAAA,KACgB;AAChB,EAAA,IAAI,SAAA,KAAc,MAAA,IAAa,SAAA,KAAc,IAAA,EAAM;AACjD,IAAA,OAAO;AAAA,MACL,MAAA;AAAA,MACA,OAAA,EAAS,MAAA;AAAA,MACT,UAAU,MAAM;AAAA,KAClB;AAAA,EACF;AAEA,EAAA,MAAM,UAAA,GAAa,IAAI,eAAA,EAAgB;AACvC,EAAA,IAAI,QAAA,GAAW,KAAA;AACf,EAAA,IAAI,SAAA;AACJ,EAAA,IAAI,YAAA;AAEJ,EAAA,IAAI,MAAA,EAAQ;AACV,IAAA,IAAI,OAAO,OAAA,EAAS;AAClB,MAAA,UAAA,CAAW,KAAA,CAAM,eAAA,CAAgB,MAAM,CAAC,CAAA;AAAA,IAC1C,CAAA,MAAO;AACL,MAAA,YAAA,GAAe,MAAM;AACnB,QAAA,IAAI,CAAC,UAAA,CAAW,MAAA,CAAO,OAAA,EAAS;AAC9B,UAAA,UAAA,CAAW,KAAA,CAAM,eAAA,CAAgB,MAAM,CAAC,CAAA;AAAA,QAC1C;AAAA,MACF,CAAA;AACA,MAAA,MAAA,CAAO,iBAAiB,OAAA,EAAS,YAAA,EAAc,EAAE,IAAA,EAAM,MAAM,CAAA;AAAA,IAC/D;AAAA,EACF;AAEA,EAAA,SAAA,GAAY,WAAW,MAAM;AAC3B,IAAA,IAAI,CAAC,UAAA,CAAW,MAAA,CAAO,OAAA,EAAS;AAC9B,MAAA,QAAA,GAAW,IAAA;AACX,MAAA,UAAA,CAAW,KAAA,CAAM,IAAI,KAAA,CAAM,mBAAmB,CAAC,CAAA;AAAA,IACjD;AAAA,EACF,GAAG,SAAS,CAAA;AAEZ,EAAA,MAAM,UAAU,MAAM;AACpB,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,YAAA,CAAa,SAAS,CAAA;AAAA,IACxB;AACA,IAAA,IAAI,UAAU,YAAA,EAAc;AAC1B,MAAA,MAAA,CAAO,mBAAA,CAAoB,SAAS,YAAY,CAAA;AAAA,IAClD;AAAA,EACF,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,QAAQ,UAAA,CAAW,MAAA;AAAA,IACnB,OAAA;AAAA,IACA,UAAU,MAAM;AAAA,GAClB;AACF,CAAA;AAEA,IAAM,eAAA,GAAkB,CAAC,MAAA,KAAiC;AACxD,EAAA,IAAI,YAAY,MAAA,EAAQ;AACtB,IAAA,OAAQ,MAAA,CAAgC,MAAA;AAAA,EAC1C;AACA,EAAA,OAAO,MAAA;AACT,CAAA;AAEA,IAAM,YAAA,GAAe,CAAC,KAAA,KAA4B;AAChD,EAAA,IAAI,OAAO,YAAA,KAAiB,WAAA,IAAe,KAAA,YAAiB,YAAA,EAAc;AACxE,IAAA,OAAO,MAAM,IAAA,KAAS,YAAA;AAAA,EACxB;AACA,EAAA,OACE,KAAA,YAAiB,KAAA,IACjB,KAAA,CAAM,IAAA,KAAS,YAAA;AAEnB,CAAA;AAEA,IAAM,SAAA,GAAY,OAChB,QAAA,EACA,GAAA,KACe;AACf,EAAA,IAAI,QAAA,CAAS,MAAA,KAAW,GAAA,IAAO,QAAA,CAAS,WAAW,GAAA,EAAK;AACtD,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,aAAA,GAAgB,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,gBAAgB,CAAA;AAC3D,EAAA,IAAI,kBAAkB,GAAA,EAAK;AACzB,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,IAAA,GAAO,MAAM,QAAA,CAAS,IAAA,EAAK;AACjC,EAAA,IAAI,CAAC,IAAA,EAAM;AACT,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,IAAI;AACF,IAAA,OAAO,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,EACxB,SAAS,KAAA,EAAO;AACd,IAAA,MAAM,IAAI,mBAAmB,+BAAA,EAAiC;AAAA,MAC5D,IAAA,EAAM,YAAA;AAAA,MACN,GAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA,EAAO;AAAA,KACR,CAAA;AAAA,EACH;AACF,CAAA;AAEA,IAAM,aAAA,GAAgB,OACpB,QAAA,EACA,IAAA,EACA,GAAA,KACe;AACf,EAAA,QAAQ,IAAA;AAAM,IACZ,KAAK,MAAA;AACH,MAAA,OAAO,SAAA,CAAa,UAAU,GAAG,CAAA;AAAA,IACnC,KAAK,MAAA;AACH,MAAA,OAAQ,MAAM,SAAS,IAAA,EAAK;AAAA,IAC9B,KAAK,aAAA;AACH,MAAA,OAAQ,MAAM,SAAS,WAAA,EAAY;AAAA,IACrC,KAAK,MAAA;AACH,MAAA,OAAQ,MAAM,SAAS,IAAA,EAAK;AAAA,IAC9B,KAAK,QAAA;AACH,MAAA,OAAQ,SAAS,IAAA,IAAQ,IAAA;AAAA,IAC3B,KAAK,UAAA;AACH,MAAA,OAAO,QAAA;AAAA,IACT,SAAS;AACP,MAAA,MAAM,UAAA,GAAoB,IAAA;AAC1B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,2BAAA,EAA8B,UAAU,CAAA,CAAE,CAAA;AAAA,IAC5D;AAAA;AAEJ,CAAA;AAEO,IAAM,oBAAA,GAAuB,CAClC,OAAA,GAAiC,EAAC,KAChB;AAClB,EAAA,MAAM,SAAA,GACJ,OAAA,CAAQ,KAAA,IAAU,UAAA,CAAW,KAAA;AAE/B,EAAA,IAAI,OAAO,cAAc,UAAA,EAAY;AACnC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,UAAU,OAAA,CAAQ,OAAA;AACxB,EAAA,MAAMC,kBAAiB,OAAA,CAAQ,cAAA;AAC/B,EAAA,MAAM,mBAAmB,OAAA,CAAQ,gBAAA;AAEjC,EAAA,MAAM,OAAA,GAAU,OACd,cAAA,KAC6B;AAC7B,IAAA,MAAM,MAAA,GAAA,CAAU,cAAA,CAAe,MAAA,IAAU,cAAA,EAAgB,WAAA,EAAY;AAErE,IAAA,IACE,cAAA,CAAe,SAAS,MAAA,IACxB,cAAA,CAAe,SAAS,MAAA,IACxB,cAAA,CAAe,SAAS,IAAA,EACxB;AACA,MAAA,MAAM,GAAA,GACJ,OAAO,cAAA,CAAe,GAAA,KAAQ,WAC1B,cAAA,CAAe,GAAA,GACf,cAAA,CAAe,GAAA,CAAI,QAAA,EAAS;AAClC,MAAA,MAAM,IAAI,kBAAA;AAAA,QACR,yDAAA;AAAA,QACA;AAAA,UACE,IAAA,EAAM,oBAAA;AAAA,UACN,GAAA,EAAK;AAAA;AACP,OACF;AAAA,IACF;AAEA,IAAA,MAAM,WAAA,GAAc,UAAA;AAAA,MAClB,OAAA;AAAA,MACA,cAAA,CAAe,GAAA;AAAA,MACf,cAAA,CAAe;AAAA,KACjB;AACA,IAAA,MAAM,OAAA,GAAUD,aAAAA,CAAaC,eAAAA,EAAgB,cAAA,CAAe,OAAO,CAAA;AAEnE,IAAA,IAAI,WAAA;AACJ,IAAA,IAAI,cAAA,CAAe,IAAA,KAAS,MAAA,IAAa,cAAA,CAAe,SAAS,IAAA,EAAM;AACrE,MAAA,WAAA,GAAc,cAAA,CAAe,IAAA;AAAA,IAC/B;AAEA,IAAA,IAAI,cAAA,CAAe,SAAS,MAAA,EAAW;AACrC,MAAA,WAAA,GAAc,IAAA,CAAK,SAAA,CAAU,cAAA,CAAe,IAAI,CAAA;AAChD,MAAA,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,cAAc,CAAA,EAAG;AAChC,QAAA,OAAA,CAAQ,GAAA,CAAI,gBAAgB,kBAAkB,CAAA;AAAA,MAChD;AAAA,IACF;AAEA,IAAA,MAAM,SAAA,GACJ,eAAe,SAAA,IAAa,gBAAA;AAC9B,IAAA,MAAM,WAAA,GAAc,iBAAA;AAAA,MAClB,cAAA,CAAe,MAAA;AAAA,MACf;AAAA,KACF;AAEA,IAAA,MAAM,SAAA,GAAyB;AAAA,MAC7B,MAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA,EAAQ,WAAA,CAAY,MAAA,IAAU,cAAA,CAAe;AAAA,KAC/C;AAEA,IAAA,IAAI,gBAAgB,MAAA,EAAW;AAC7B,MAAA,SAAA,CAAU,IAAA,GAAO,WAAA;AAAA,IACnB;AAEA,IAAA,MAAM,OAAA,GAAU,eAAe,OAAA,IAAW,qBAAA;AAC1C,IAAA,MAAM,YAAA,GAAe,eAAe,YAAA,IAAgB,IAAA;AAEpD,IAAA,IAAI,QAAA;AAEJ,IAAA,IAAI;AACF,MAAA,QAAA,GAAW,MAAM,SAAA,CAAU,WAAA,EAAa,SAAS,CAAA;AACjD,MAAA,MAAM,WAAA,GAAc,SAAS,GAAA,IAAO,WAAA;AACpC,MAAA,MAAM,cACJ,OAAA,KAAY,UAAA,IAAc,YAAY,QAAA,GAClC,QAAA,GACA,SAAS,KAAA,EAAM;AACrB,MAAA,MAAM,IAAA,GAAO,MAAM,aAAA,CAAiB,WAAA,EAAa,SAAS,WAAW,CAAA;AAErE,MAAA,IAAI,CAAC,QAAA,CAAS,EAAA,IAAM,YAAA,EAAc;AAChC,QAAA,MAAM,IAAI,kBAAA;AAAA,UACR,CAAA,WAAA,EAAc,WAAW,CAAA,oBAAA,EAAuB,QAAA,CAAS,MAAM,CAAA,CAAA;AAAA,UAC/D;AAAA,YACE,IAAA,EAAM,WAAA;AAAA,YACN,GAAA,EAAK,WAAA;AAAA,YACL,QAAQ,QAAA,CAAS,MAAA;AAAA,YACjB,QAAA;AAAA,YACA;AAAA;AACF,SACF;AAAA,MACF;AAEA,MAAA,OAAO;AAAA,QACL,QAAQ,QAAA,CAAS,MAAA;AAAA,QACjB,SAAS,QAAA,CAAS,OAAA;AAAA,QAClB,IAAA;AAAA,QACA,GAAA,EAAK,QAAA;AAAA,QACL,GAAA,EAAK;AAAA,OACP;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,IAAI,iBAAiB,kBAAA,EAAoB;AACvC,QAAA,MAAM,KAAA;AAAA,MACR;AAEA,MAAA,IAAI,WAAA,CAAY,UAAS,EAAG;AAC1B,QAAA,MAAM,IAAI,mBAAmB,mBAAA,EAAqB;AAAA,UAChD,IAAA,EAAM,cAAA;AAAA,UACN,GAAA,EAAK,UAAU,GAAA,IAAO,WAAA;AAAA,UACtB,QAAA;AAAA,UACA,KAAA,EAAO;AAAA,SACR,CAAA;AAAA,MACH;AAEA,MAAA,IAAI,YAAA,CAAa,KAAK,CAAA,EAAG;AACvB,QAAA,MAAM,IAAI,mBAAmB,iBAAA,EAAmB;AAAA,UAC9C,IAAA,EAAM,YAAA;AAAA,UACN,GAAA,EAAK,UAAU,GAAA,IAAO,WAAA;AAAA,UACtB,QAAA;AAAA,UACA,KAAA,EAAO;AAAA,SACR,CAAA;AAAA,MACH;AAEA,MAAA,MAAM,IAAI,mBAAmB,wBAAA,EAA0B;AAAA,QACrD,IAAA,EAAM,cAAA;AAAA,QACN,GAAA,EAAK,UAAU,GAAA,IAAO,WAAA;AAAA,QACtB,QAAA;AAAA,QACA,KAAA,EAAO;AAAA,OACR,CAAA;AAAA,IACH,CAAA,SAAE;AACA,MAAA,WAAA,CAAY,OAAA,IAAU;AAAA,IACxB;AAAA,EACF,CAAA;AAEA,EAAA,MAAM,UAAU,MAAqB;AACnC,IAAA,MAAM,OAAA,IAAW,OACf,KAAA,EACA,IAAA,KACsB;AACtB,MAAA,MAAM,SAAA,GAAY,QAAQ,EAAC;AAE3B,MAAA,MAAM,OAAA,GAAU,IAAI,OAAA,EAAQ;AAC5B,MAAA,IAAI,GAAA;AACJ,MAAA,IAAI,MAAA;AACJ,MAAA,IAAI,IAAA;AACJ,MAAA,IAAI,MAAA;AAEJ,MAAA,IAAI,iBAAiB,OAAA,EAAS;AAC5B,QAAA,GAAA,GAAM,KAAA,CAAM,GAAA;AACZ,QAAA,MAAA,GAAS,KAAA,CAAM,MAAA;AACf,QAAA,IAAA,GAAO,MAAM,IAAA,IAAQ,MAAA;AACrB,QAAA,MAAA,GAAS,MAAM,MAAA,IAAU,MAAA;AACzB,QAAA,IAAI,QAAQ,KAAA,CAAM,OAAO,EAAE,OAAA,CAAQ,CAAC,OAAO,GAAA,KAAQ;AACjD,UAAA,OAAA,CAAQ,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,QACxB,CAAC,CAAA;AAAA,MACH,CAAA,MAAO;AACL,QAAA,GAAA,GAAM,KAAA;AAAA,MACR;AAEA,MAAA,IAAI,UAAU,OAAA,EAAS;AACrB,QAAA,IAAI,QAAQ,SAAA,CAAU,OAAO,EAAE,OAAA,CAAQ,CAAC,OAAO,GAAA,KAAQ;AACrD,UAAA,OAAA,CAAQ,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,QACxB,CAAC,CAAA;AAAA,MACH;AAEA,MAAA,MAAA,GACG,SAAA,CAAU,UACX,MAAA,IACA,cAAA;AACF,MAAA,IAAI,SAAA,CAAU,SAAS,MAAA,EAAW;AAChC,QAAA,IAAA,GAAO,SAAA,CAAU,IAAA;AAAA,MACnB;AACA,MAAA,MAAA,GAAS,UAAU,MAAA,IAAU,MAAA;AAE7B,MAAA,MAAM,QAAA,GAAW,MAAM,OAAA,CAAkB;AAAA,QACvC,GAAA;AAAA,QACA,MAAA;AAAA,QACA,OAAA;AAAA,QACA,MAAM,IAAA,IAAQ,MAAA;AAAA,QACd,MAAA;AAAA,QACA,OAAA,EAAS,UAAA;AAAA,QACT,YAAA,EAAc,KAAA;AAAA,QACd,SAAA,EAAW;AAAA,OACZ,CAAA;AAED,MAAA,OAAO,QAAA,CAAS,IAAA;AAAA,IAClB,CAAA,CAAA;AAEA,IAAA,MAAM,cAAc,UAAA,CAAW,KAAA;AAC/B,IAAA,IAAI,WAAA,IAAe,OAAO,WAAA,CAAY,UAAA,KAAe,UAAA,EAAY;AAC/D,MAAA,OAAA,CAAQ,UAAA,GAAa,WAAA,CAAY,UAAA,CAAW,IAAA,CAAK,WAAW,CAAA;AAAA,IAC9D,CAAA,MAAO;AACL,MAAA,MAAM,cAAA,GAA8C,UAAU,KAAA,KAAU;AAAA,MAAC,CAAA;AACzE,MAAA,OAAA,CAAQ,UAAA,GAAa,cAAA;AAAA,IACvB;AAEA,IAAA,OAAO,OAAA;AAAA,EACT,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,OAAA;AAAA,IACA;AAAA,GACF;AACF;;;AC5YA,IAAMC,6BAAAA,GAA+B,GAAA;AAwCrC,IAAM,SAAA,GAAY,CAAC,KAAA,KACjB,KAAA,YAAiB,OAAO,KAAA,GAAQ,IAAI,KAAK,KAAK,CAAA;AAEhD,IAAM,oBAAA,GAAuB,CAC3B,QAAA,KACW;AACX,EAAA,MAAM,SAAA;AAAA;AAAA,IAEH,QAAA,CACE,4BAA4B,QAAA,CAAS;AAAA,GAAA;AAC1C,EAAA,IAAI,CAAC,SAAA,EAAW;AACd,IAAA,MAAM,IAAI,iBAAA;AAAA,MACR,sBAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AACA,EAAA,OAAO,SAAA;AACT,CAAA;AAEO,IAAM,YAAA,GAAN,MAAM,aAAA,CAAa;AAAA,EAsHhB,YAAY,OAAA,EAA8B;AATlD,IAAA,IAAA,CAAiB,QAAA,GAA0B;AAAA,MACzC,aAAA,sBAAmB,GAAA,EAAI;AAAA,MACvB,cAAA,sBAAoB,GAAA,EAAI;AAAA,MACxB,aAAA,sBAAmB,GAAA,EAAI;AAAA,MACvB,aAAA,sBAAmB,GAAA;AAAI,KACzB;AAEA,IAAA,IAAA,CAAQ,YAAA,GAAqD,IAAA;AAG3D,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,YAAY,OAAA,CAAQ,SAAA;AACzB,IAAA,IAAA,CAAK,aAAa,OAAA,CAAQ,UAAA;AAC1B,IAAA,IAAA,CAAK,eAAe,OAAA,CAAQ,YAAA;AAC5B,IAAA,IAAA,CAAK,oBAAoB,OAAA,CAAQ,iBAAA;AACjC,IAAA,IAAA,CAAK,MAAM,OAAA,CAAQ,GAAA;AACnB,IAAA,IAAA,CAAK,GAAA,GACH,OAAA,CAAQ,SAAA,IACR,IAAI,cAAA,CAAe;AAAA,MACjB,WAAW,IAAA,CAAK,SAAA;AAAA,MAChB,OAAA,EAAS,KAAK,MAAA,CAAO,OAAA;AAAA,MACrB,QAAA,EAAU,KAAK,MAAA,CAAO,QAAA;AAAA,MACtB,gBAAgB,YACd,IAAA,CAAK,YAAA,CAAa,oBAAA,IAAwB,KAAA,IAAS;AAAA,KACtD,CAAA;AAAA,EACL;AAAA,EAtIA,aAAa,WACX,OAAA,EACuB;AACvB,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAO,GAAI,OAAA;AAC3B,IAAA,IAAI,CAAC,QAAQ,OAAA,EAAS;AACpB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,CAAC,OAAO,QAAA,EAAU;AACpB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,CAAC,OAAO,YAAA,EAAc;AACxB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,CAAC,QAAQ,MAAA,EAAQ;AACnB,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,SAAA,GACJ,OAAA,CAAQ,KAAA,IAAU,UAAA,CAAW,KAAA;AAC/B,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,iBAAA;AAAA,QACR,oBAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,iBAAA,GACJ,QAAQ,iBAAA,IAAqBA,6BAAAA;AAC/B,IAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,GAAA,KAAQ,MAAM,KAAK,GAAA,EAAI,CAAA;AAE3C,IAAA,MAAM,SAAA,GACJ,OAAA,CAAQ,SAAA,IACR,oBAAA,CAAqB;AAAA,MACnB,SAAS,MAAA,CAAO,OAAA;AAAA,MAChB,KAAA,EAAO,SAAA;AAAA,MACP,gBAAgB,OAAA,CAAQ;AAAA,KACzB,CAAA;AAEH,IAAA,MAAM,UAAA,GACJ,OAAA,CAAQ,UAAA,IACR,IAAI,eAAA,CAAgB;AAAA,MAClB,UAAU,MAAA,CAAO,QAAA;AAAA,MACjB,SAAS,MAAA,CAAO,OAAA;AAAA,MAChB,KAAA,EAAO,UAAU,OAAA,EAAQ;AAAA,MACzB,SAAS,OAAA,CAAQ;AAAA,KAClB,CAAA;AAEH,IAAA,MAAM,YAAA,GACJ,OAAA,CAAQ,YAAA,IACR,IAAI,YAAA,CAAa;AAAA,MACf,SAAS,OAAA,CAAQ,OAAA;AAAA,MACjB,iBAAA;AAAA,MACA;AAAA,KACD,CAAA;AAEH,IAAA,MAAM,OAAA,GAAU,IAAI,aAAA,CAAa;AAAA,MAC/B,MAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAW,OAAA,CAAQ,SAAA;AAAA,MACnB,YAAA;AAAA,MACA,iBAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,MAAM,QAAQ,UAAA,EAAW;AACzB,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEA,aAAa,KACX,OAAA,EACiC;AACjC,IAAA,MAAM,EAAE,MAAA,EAAQ,GAAG,cAAA,EAAe,GAAI,OAAA;AACtC,IAAA,MAAM,YAAA,GAAe,MAAM,sBAAA,CAAuB,MAAM,CAAA;AAExD,IAAA,MAAM,OAAA,GAAU,MAAM,aAAA,CAAa,UAAA,CAAW;AAAA,MAC5C,GAAG,cAAA;AAAA,MACH,QAAQ,YAAA,CAAa;AAAA,KACtB,CAAA;AAED,IAAA,OAAO;AAAA,MACL,GAAG,YAAA;AAAA,MACH;AAAA,KACF;AAAA,EACF;AAAA,EAuCA,MAAM,YAAA,GAA8C;AAClD,IAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAA,CAAiB;AAAA,MACvD,aAAA,EAAe,KAAK,MAAA,CAAO,YAAA;AAAA,MAC3B,MAAA,EAAQ,KAAK,MAAA,CAAO;AAAA,KACrB,CAAA;AAED,IAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,aAAA;AAAA,MACzC,SAAA,CAAU;AAAA,KACZ;AAEA,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,UAAA,CAAW,QAAA,CAAS;AAAA,MAC9C,YAAA,EAAc,UAAU,SAAA,CAAU,EAAA;AAAA,MAClC,SAAA;AAAA,MACA,aAAA,EAAe,KAAK,MAAA,CAAO;AAAA,KAC5B,CAAA;AAED,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,WAAA,CAAY,QAAQ,CAAA;AAChD,IAAA,IAAA,CAAK,IAAA,CAAK,iBAAiB,QAAQ,CAAA;AACnC,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EAEA,MAAM,iBAAA,GAAqC;AACzC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,YAAA,CAAa,oBAAA,EAAqB;AACtD,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,YAAA,EAAa;AACxC,MAAA,OAAO,OAAA,CAAQ,WAAA;AAAA,IACjB;AAEA,IAAA,MAAM,eACJ,MAAA,CAAO,SAAA,CAAU,OAAA,EAAQ,GAAI,KAAK,GAAA,EAAI;AAExC,IAAA,IAAI,YAAA,IAAgB,CAAA,IAAK,YAAA,IAAgB,IAAA,CAAK,iBAAA,EAAmB;AAC/D,MAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,aAAA,EAAc;AAC1C,MAAA,OAAO,QAAA,CAAS,WAAA;AAAA,IAClB;AAEA,IAAA,OAAO,MAAA,CAAO,KAAA;AAAA,EAChB;AAAA,EAEA,MAAM,QAAA,GAA0B;AAC9B,IAAA,IAAA,CAAK,iBAAA,EAAkB;AAAA,EACzB;AAAA,EAEA,EAAA,CACE,OACA,OAAA,EACY;AACZ,IAAA,MAAM,GAAA,GAAM,IAAA,CAAK,QAAA,CAAS,KAAK,CAAA;AAG/B,IAAA,GAAA,CAAI,IAAI,OAAO,CAAA;AACf,IAAA,OAAO,MAAM;AACX,MAAA,GAAA,CAAI,OAAO,OAAO,CAAA;AAAA,IACpB,CAAA;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,MAAA,EAAgC;AAChD,IAAA,IAAA,CAAK,iBAAA,EAAkB;AACvB,IAAA,MAAM,IAAA,CAAK,aAAa,KAAA,EAAM;AAC9B,IAAA,IAAA,CAAK,IAAA,CAAK,eAAA,EAAiB,EAAE,MAAA,EAAQ,CAAA;AAAA,EACvC;AAAA,EAEA,MAAc,UAAA,GAA4B;AACxC,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,YAAA,CAAa,OAAA,EAAQ;AACjD,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,iBAAA,CAAkB,QAAQ,CAAC,CAAA;AACrD,MAAA;AAAA,IACF;AAEA,IAAA,IAAI,IAAA,CAAK,OAAO,YAAA,EAAc;AAC5B,MAAA,IAAI;AACF,QAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,OAAA,CAAQ;AAAA,UAC9C,aAAA,EAAe,KAAK,MAAA,CAAO;AAAA,SAC5B,CAAA;AACD,QAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,WAAA,CAAY,SAAS,CAAA;AAChD,QAAA,IAAA,CAAK,IAAA,CAAK,iBAAiB,OAAO,CAAA;AAAA,MACpC,SAAS,KAAA,EAAO;AACd,QAAA,IAAA,CAAK,IAAA,CAAK,eAAA,EAAiB,EAAE,KAAA,EAAO,CAAA;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,aAAA,GAA+C;AAC3D,IAAA,OAAO,IAAA,CAAK,YAAA,CAAa,eAAA,CAAgB,YAAY;AACnD,MAAA,MAAM,QAAA,GAAW,IAAA,CAAK,YAAA,CAAa,WAAA,EAAY;AAC/C,MAAA,IAAI,CAAC,QAAA,EAAU;AACb,QAAA,MAAM,IAAI,iBAAA;AAAA,UACR,mBAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF;AAEA,MAAA,IAAI;AACF,QAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,OAAA,CAAQ;AAAA,UAC9C,eAAe,QAAA,CAAS;AAAA,SACzB,CAAA;AACD,QAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,WAAA,CAAY,SAAS,CAAA;AAChD,QAAA,IAAA,CAAK,IAAA,CAAK,kBAAkB,OAAO,CAAA;AACnC,QAAA,OAAO,OAAA;AAAA,MACT,SAAS,KAAA,EAAO;AACd,QAAA,IAAA,CAAK,IAAA,CAAK,eAAA,EAAiB,EAAE,KAAA,EAAO,CAAA;AACpC,QAAA,MAAM,IAAI,iBAAA;AAAA,UACR,eAAA;AAAA,UACA,gCAAA;AAAA,UACA,EAAE,OAAO,KAAA;AAAM,SACjB;AAAA,MACF;AAAA,IACF,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,MAAc,YACZ,QAAA,EAC+B;AAC/B,IAAA,MAAM,qBAAA,GAAwB,qBAAqB,QAAQ,CAAA;AAC3D,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,UAAA,EAAY,MAAA,IAAU,MAAA;AAE9C,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,YAAA,CAAa,SAAA,CAAU;AAAA,MACjD,aAAa,QAAA,CAAS,YAAA;AAAA,MACtB,oBAAA,EAAsB,SAAA,CAAU,QAAA,CAAS,UAAU,CAAA;AAAA,MACnD,cAAc,QAAA,CAAS,aAAA;AAAA,MACvB,qBAAA,EAAuB,UAAU,qBAAqB,CAAA;AAAA,MACtD,eAAA,EAAiB,QAAA,CAAS,UAAA,EAAY,gBAAA,IAAoB,MAAA;AAAA,MAC1D,MAAA,EAAQ;AAAA,KACT,CAAA;AAED,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,iBAAA,CAAkB,QAAQ,CAAA;AAC/C,IAAA,IAAA,CAAK,gBAAgB,OAAO,CAAA;AAC5B,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEQ,gBAAgB,QAAA,EAAsC;AAC5D,IAAA,IAAA,CAAK,iBAAA,EAAkB;AAEvB,IAAA,MAAM,MAAA,GACJ,QAAA,CAAS,SAAA,CAAU,OAAA,KAAY,IAAA,CAAK,iBAAA;AACtC,IAAA,MAAM,QAAQ,IAAA,CAAK,GAAA,CAAI,GAAG,MAAA,GAAS,IAAA,CAAK,KAAK,CAAA;AAE7C,IAAA,IAAA,CAAK,YAAA,GAAe,WAAW,MAAM;AACnC,MAAA,KAAK,IAAA,CAAK,aAAA,EAAc,CAAE,KAAA,CAAM,MAAM;AAAA,MAEtC,CAAC,CAAA;AAAA,IACH,GAAG,KAAK,CAAA;AAAA,EACV;AAAA,EAEQ,iBAAA,GAA0B;AAChC,IAAA,IAAI,KAAK,YAAA,EAAc;AACrB,MAAA,YAAA,CAAa,KAAK,YAAY,CAAA;AAC9B,MAAA,IAAA,CAAK,YAAA,GAAe,IAAA;AAAA,IACtB;AAAA,EACF;AAAA,EAEQ,IAAA,CACN,OACA,OAAA,EACM;AACN,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,QAAA,CAAS,KAAK,CAAA;AAGrC,IAAA,KAAA,MAAW,WAAW,SAAA,EAAW;AAC/B,MAAA,IAAI;AACF,QAAA,OAAA,CAAQ,OAAO,CAAA;AAAA,MACjB,CAAA,CAAA,MAAQ;AAAA,MAER;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,kBAAkB,QAAA,EAA+C;AACvE,IAAA,OAAO;AAAA,MACL,aAAa,QAAA,CAAS,WAAA;AAAA,MACtB,cAAc,QAAA,CAAS,YAAA;AAAA,MACvB,WAAW,QAAA,CAAS,oBAAA;AAAA,MACpB,uBAAuB,QAAA,CAAS,qBAAA;AAAA,MAChC,QAAQ,QAAA,CAAS;AAAA,KACnB;AAAA,EACF;AACF;;;AChYO,IAAM,qBAAA,GAAwB,CACnC,OAAA,GAAkC,EAAC,KACjB;AAClB,EAAA,MAAM,EAAE,UAAA,EAAY,KAAA,EAAO,WAAA,EAAa,GAAG,MAAK,GAAI,OAAA;AAEpD,EAAA,IAAI,CAAC,UAAA,EAAY;AACf,IAAA,OAAO,oBAAA,CAAqB;AAAA,MAC1B,GAAG,IAAA;AAAA,MACH,KAAA,EAAO;AAAA,KACR,CAAA;AAAA,EACH;AAEA,EAAA,MAAM,SAAA,GACH,eACA,UAAA,CAAW,KAAA;AAEd,EAAA,IAAI,OAAO,cAAc,UAAA,EAAY;AACnC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,mBAAA,IAAuB,CAC3B,KAAA,EACA,IAAA,KAEA,UAAU,KAAA,EAAO;AAAA,IACf,GAAI,QAAQ,EAAC;AAAA,IACb;AAAA,GACc,CAAA,CAAA;AAElB,EAAA,IAAI,gBAAgB,SAAA,EAAW;AAC7B,IAAA,MAAM,aACJ,SAAA,CAGA,UAAA;AACF,IAAA,IAAI,OAAO,eAAe,UAAA,EAAY;AACpC,MACE,mBAAA,CAGA,UAAA,GAAa,UAAA,CAAW,IAAA,CAAK,SAAS,CAAA;AAAA,IAC1C;AAAA,EACF;AAEA,EAAA,OAAO,oBAAA,CAAqB;AAAA,IAC1B,GAAG,IAAA;AAAA,IACH,KAAA,EAAO;AAAA,GACR,CAAA;AACH;;;ACXA,IAAM,6BAAA,GAAyE;AAAA,EAC7E,eAAA,EAAiB;AACnB,CAAA;AAEO,IAAM,kBAAA,GAAqB,CAChC,SAAA,EACA,OAAA,GAAyC,6BAAA,KACjB;AACxB,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,SAAA,CAAU,SAAS,CAAA;AAC3C,EAAA,MAAM,SAAA,GAAY,MAAA,CAAO,SAAA,CAAU,UAAU,CAAA;AAE7C,EAAA,MAAM,MAAA,GAAS,KAAA,CAAM,OAAA,CAAQ,SAAA,CAAU,MAAM,CAAA,GACzC,SAAA,CAAU,MAAA,CAAO,MAAA,CAAO,CAAC,KAAA,KAA2B,OAAO,KAAA,KAAU,QAAQ,IAC7E,EAAC;AAEL,EAAA,OAAO;AAAA,IACL,IAAI,SAAA,CAAU,EAAA;AAAA,IACd,YAAA,EAAc,UAAU,aAAA,IAAiB,IAAA;AAAA,IACzC,SAAS,SAAA,CAAU,OAAA;AAAA,IACnB,aAAa,SAAA,CAAU,YAAA;AAAA,IACvB,OAAO,SAAA,CAAU,KAAA;AAAA,IACjB,MAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,eAAA,EAAiB,UAAU,gBAAA,IAAoB,IAAA;AAAA,IAC/C,OAAA,EAAS,uBAAA,CAAwB,SAAA,CAAU,OAAA,EAAS,OAAO;AAAA,GAC7D;AACF;AAEA,IAAM,MAAA,GAAS,CAAC,KAAA,KACd,KAAA,YAAiB,OAAO,KAAA,GAAQ,IAAI,KAAK,KAAK,CAAA;AAEhD,IAAM,uBAAA,GAA0B,CAC9B,OAAA,EACA,OAAA,KACkB;AAClB,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,IAAI,OAAO,YAAY,QAAA,EAAU;AAC/B,IAAA,OAAO,OAAA;AAAA,EACT;AAEA,EAAA,IAAI,OAAO,YAAY,QAAA,EAAU;AAC/B,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,OAAA;AAEf,EAAA,IAAI,OAAO,MAAA,CAAO,OAAA,KAAY,QAAA,EAAU;AACtC,IAAA,OAAO,MAAA,CAAO,OAAA;AAAA,EAChB;AAEA,EAAA,IAAI,OAAO,MAAA,CAAO,OAAA,KAAY,QAAA,EAAU;AACtC,IAAA,OAAO,MAAA,CAAO,OAAA;AAAA,EAChB;AAEA,EAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAA,CAAO,KAAK,CAAA,EAAG;AAC/B,IAAA,MAAM,MAAA,GAAS,OAAO,KAAA,CACnB,GAAA;AAAA,MAAI,CAAC,IAAA,KACJ,OAAO,IAAA,KAAS,QAAA,GACZ,OACA,OAAO,IAAA,KAAS,QAAA,IAAY,IAAA,IAAQ,UAAU,IAAA,GAC5C,MAAA,CAAQ,IAAA,CAA2B,IAAA,IAAQ,EAAE,CAAA,GAC7C;AAAA,KACR,CACC,KAAK,EAAE,CAAA;AACV,IAAA,IAAI,MAAA,EAAQ;AACV,MAAA,OAAO,MAAA;AAAA,IACT;AAAA,EACF;AAEA,EAAA,IAAI;AACF,IAAA,OAAO,OAAA,CAAQ,oBAAoB,KAAA,GAC/B,mBAAA,CAAoB,MAAM,CAAA,GAC1B,IAAA,CAAK,UAAU,MAAM,CAAA;AAAA,EAC3B,CAAA,CAAA,MAAQ;AACN,IAAA,OAAO,IAAA;AAAA,EACT;AACF,CAAA;AAEO,IAAM,mBAAA,GAAsB,CAAC,KAAA,KAA2B;AAC7D,EAAA,IAAI,KAAA,KAAU,IAAA,IAAQ,OAAO,KAAA,KAAU,QAAA,EAAU;AAC/C,IAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC7B,MAAA,OAAO,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM,QAAA,EAAU,CAAA;AAAA,IACxC;AACA,IAAA,OAAO,IAAA,CAAK,UAAU,KAAK,CAAA;AAAA,EAC7B;AAEA,EAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;AACxB,IAAA,MAAM,SAAS,KAAA,CAAM,GAAA,CAAI,CAAC,IAAA,KAAS,mBAAA,CAAoB,IAAI,CAAC,CAAA;AAC5D,IAAA,OAAO,CAAA,CAAA,EAAI,MAAA,CAAO,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;AAAA,EAC7B;AAEA,EAAA,MAAM,OAAA,GAAU,MAAA,CAAO,OAAA,CAAQ,KAAgC,CAAA,CAC5D,MAAA,CAAO,CAAC,GAAG,UAAU,CAAA,KAAM,UAAA,KAAe,MAAS,CAAA,CACnD,IAAA,CAAK,CAAC,CAAC,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,KAAO,CAAA,GAAI,CAAA,GAAI,EAAA,GAAK,CAAA,GAAI,CAAA,GAAI,CAAA,GAAI,CAAE,CAAA;AAElD,EAAA,MAAM,aAAa,OAAA,CAChB,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,UAAU,CAAA,KAAM;AAC1B,IAAA,MAAM,kBACJ,OAAO,UAAA,KAAe,QAAA,GAAW,UAAA,CAAW,UAAS,GAAI,UAAA;AAC3D,IAAA,OAAO,CAAA,EAAG,KAAK,SAAA,CAAU,GAAG,CAAC,CAAA,CAAA,EAAI,mBAAA,CAAoB,eAAe,CAAC,CAAA,CAAA;AAAA,EACvE,CAAC,CAAA,CACA,IAAA,CAAK,GAAG,CAAA;AAEX,EAAA,OAAO,IAAI,UAAU,CAAA,CAAA,CAAA;AACvB;AAEO,IAAM,gBAAA,GAAmB,CAAC,OAAA,KAAoC;AACnE,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,IAAI,OAAO,YAAY,QAAA,EAAU;AAC/B,IAAA,OAAO,OAAA;AAAA,EACT;AAEA,EAAA,IAAI,OAAO,YAAY,QAAA,EAAU;AAC/B,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,OAAA;AACf,EAAA,MAAM,MAAA,GAAS,MAAA,CAAO,MAAA,IAAU,MAAA,CAAO,SAAA,IAAa,OAAA;AAEpD,EAAA,IAAI,OAAO,WAAW,QAAA,EAAU;AAC9B,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,IACE,MAAA,IACA,OAAO,MAAA,KAAW,QAAA,IAClB,eAAe,MAAA,IACf,OAAQ,MAAA,CAAkC,SAAA,KAAc,QAAA,EACxD;AACA,IAAA,OAAQ,MAAA,CAAiC,SAAA;AAAA,EAC3C;AAEA,EAAA,OAAO,IAAA;AACT;AAEO,IAAM,qBAAA,GAAwB,CAAC,OAAA,KAA4C;AAChF,EAAA,IAAI,CAAC,OAAA,IAAW,OAAO,OAAA,KAAY,QAAA,EAAU;AAC3C,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,OAAA;AACf,EAAA,IAAI,CAAC,MAAA,CAAO,MAAA,IAAU,OAAO,MAAA,CAAO,WAAW,QAAA,EAAU;AACvD,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,SAAS,MAAA,CAAO,MAAA;AACtB,EAAA,MAAM,OAAA,GACJ,OAAO,OAAA,IAAW,OAAO,OAAO,OAAA,KAAY,QAAA,GACvC,OAAO,OAAA,GACR,MAAA;AAEN,EAAA,OAAO;AAAA,IACL,IAAI,OAAO,MAAA,CAAO,EAAA,KAAO,QAAA,GAAW,OAAO,EAAA,GAAK,IAAA;AAAA,IAChD,SAAS,OAAO,MAAA,CAAO,OAAA,KAAY,QAAA,GAAW,OAAO,OAAA,GAAU,IAAA;AAAA,IAC/D,OAAO,OAAO,MAAA,CAAO,KAAA,KAAU,QAAA,GAAW,OAAO,KAAA,GAAQ,IAAA;AAAA,IACzD,WAAW,OAAO,MAAA,CAAO,SAAA,KAAc,QAAA,GAAW,OAAO,SAAA,GAAY,IAAA;AAAA,IACrE,UAAU,OAAO,MAAA,CAAO,QAAA,KAAa,QAAA,GAAW,OAAO,QAAA,GAAW,IAAA;AAAA,IAClE,OAAO,OAAO,MAAA,CAAO,KAAA,KAAU,QAAA,GAAW,OAAO,KAAA,GAAQ,IAAA;AAAA,IACzD,WAAW,OAAO,OAAA,EAAS,EAAA,KAAO,QAAA,GAAW,QAAQ,EAAA,GAAK,IAAA;AAAA,IAC1D,KAAA,EACE,OAAO,OAAA,EAAS,WAAA,KAAgB,QAAA,GAC5B,OAAA,CAAQ,WAAA,GACR,OAAO,MAAA,CAAO,KAAA,KAAU,QAAA,GACtB,MAAA,CAAO,KAAA,GACP;AAAA,GACV;AACF;AAIO,IAAM,qBAAA,GAAwB,CACnC,OAAA,KAC6B;AAC7B,EAAA,IAAI,kBAAA,CAAmB,IAAA,CAAK,OAAA,CAAQ,IAAA,EAAM,CAAA,EAAG;AAC3C,IAAA,OAAO,KAAA;AAAA,EACT;AACA,EAAA,OAAO,OAAA;AACT;;;ACxNA,IAAM,6BAAA,GAAyD;AAAA,EAC7D,MAAA,EAAQ;AACV,CAAA;AAEO,IAAM,yCAAA,GAAN,cAAwD,KAAA,CAAM;AAAA,EACnE,WAAA,GAAc;AACZ,IAAA,KAAA;AAAA,MACE;AAAA,KACF;AACA,IAAA,IAAA,CAAK,IAAA,GAAO,2CAAA;AAAA,EACd;AACF;AAEO,IAAM,oCAAN,MAAmE;AAAA,EAUxE,YAAY,OAAA,EAAmD;AAF/D,IAAA,IAAA,CAAQ,cAAA,GAAwC,IAAA;AAG9C,IAAA,IAAI,CAAC,SAAS,OAAA,EAAS;AACrB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,CAAC,QAAQ,QAAA,EAAU;AACrB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,cAAA,GACJ,OAAA,CAAQ,KAAA,IAAU,UAAA,CAAW,KAAA;AAC/B,IAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,OAAA,CAAQ,QAAQ,EAAE,CAAA;AACjD,IAAA,IAAA,CAAK,WAAW,OAAA,CAAQ,QAAA;AACxB,IAAA,IAAA,CAAK,SAAA,GAAY,cAAA;AACjB,IAAA,IAAA,CAAK,iBAAiB,OAAA,CAAQ,OAAA;AAC9B,IAAA,IAAA,CAAK,WAAA,GAAc,QAAQ,WAAA,IAAe,IAAA;AAC1C,IAAA,IAAA,CAAK,oBAAA,GAAuB;AAAA,MAC1B,GAAG,6BAAA;AAAA,MACH,GAAG,OAAA,CAAQ;AAAA,KACb;AAAA,EACF;AAAA,EAEA,eAAe,KAAA,EAA4B;AACzC,IAAA,IAAA,CAAK,cAAc,KAAA,IAAS,IAAA;AAAA,EAC9B;AAAA,EAEA,MAAM,cACJ,SAAA,EACiB;AACjB,IAAA,MAAM,QAAQ,IAAA,CAAK,WAAA;AACnB,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,yCAAA,EAA0C;AAAA,IACtD;AAEA,IAAA,MAAM,UAAA,GAAa,mBAAmB,SAAS,CAAA;AAC/C,IAAA,MAAM,UAAU,UAAA,CAAW,OAAA;AAC3B,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,SAAA;AAAA,MAC1B,kBAAA,CAAmB,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,QAAQ,CAAA;AAAA,MAC9C;AAAA,QACE,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA,EAAS,IAAA,CAAK,YAAA,CAAa,KAAK,CAAA;AAAA,QAChC,IAAA,EAAM,KAAK,SAAA,CAAU;AAAA,UACnB,OAAA;AAAA,UACA,QAAA,EAAU,sBAAsB,OAAO,CAAA;AAAA,UACvC,iBAAiB,UAAA,CAAW,EAAA;AAAA,UAC5B,qBAAA,EAAuB;AAAA,YACrB,GAAG,IAAA,CAAK,oBAAA;AAAA,YACR,cAAc,UAAA,CAAW;AAAA;AAC3B,SACD;AAAA;AACH,KACF;AAEA,IAAA,MAAM,OAAA,GAAU,MAAM,QAAA,CAAS,IAAA,EAAK;AACpC,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,iBAAA,CAAkB,UAAU,OAAO,CAAA;AAAA,IAC3C;AAEA,IAAA,MAAM,MAAA,GAAS,cAAc,OAAO,CAAA;AACpC,IAAA,MAAM,SAAA,GAAY,iBAAiB,MAAM,CAAA;AACzC,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAA,CAAK,cAAA,GAAiB,sBAAsB,MAAM,CAAA;AAElD,IAAA,OAAO,SAAA;AAAA,EACT;AAAA,EAEA,MAAM,iBAAA,GAAoD;AACxD,IAAA,OAAO,IAAA,CAAK,cAAA;AAAA,EACd;AAAA,EAEA,cAAc,CAAA,EAAoB;AAEhC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,MAAM,UAAA,GAAqC;AACzC,IAAA,OAAO,IAAA,CAAK,gBAAgB,OAAA,IAAW,IAAA;AAAA,EACzC;AAAA,EAEQ,aAAa,KAAA,EAA4B;AAC/C,IAAA,MAAM,OAAA,GAAU,IAAI,OAAA,CAAQ,IAAA,CAAK,cAAc,CAAA;AAC/C,IAAA,OAAA,CAAQ,GAAA,CAAI,gBAAgB,kBAAkB,CAAA;AAC9C,IAAA,OAAA,CAAQ,GAAA,CAAI,eAAA,EAAiB,4BAAA,CAA6B,KAAK,CAAC,CAAA;AAChE,IAAA,OAAO,MAAA,CAAO,WAAA,CAAY,OAAA,CAAQ,OAAA,EAAS,CAAA;AAAA,EAC7C;AACF;AAEA,IAAM,kBAAA,GAAqB,CAAC,OAAA,EAAiB,QAAA,KAC3C,GAAG,OAAO,CAAA,WAAA,EAAc,kBAAA,CAAmB,QAAQ,CAAC,CAAA,oBAAA,CAAA;AAEtD,IAAM,4BAAA,GAA+B,CAAC,KAAA,KACpC,YAAA,CAAa,KAAK,KAAK,CAAA,GAAI,KAAA,GAAQ,CAAA,OAAA,EAAU,KAAK,CAAA,CAAA;AAEpD,IAAM,iBAAA,GAAoB,CAAC,QAAA,EAAoB,IAAA,KAAwB;AACrE,EAAA,MAAM,OAAA,GAAU,cAAc,IAAI,CAAA;AAClC,EAAA,MAAM,UAAA,GACJ,WAAW,OAAO,OAAA,KAAY,WAC1B,IAAA,CAAK,SAAA,CAAU,OAAO,CAAA,GACtB,IAAA;AAEN,EAAA,OAAO,IAAI,KAAA;AAAA,IACT,CAAA,8BAAA,EAAiC,QAAA,CAAS,MAAM,CAAA,CAAA,EAAI,QAAA,CAAS,UAAU,CAAA,EAAG,UAAA,GAAa,CAAA,GAAA,EAAM,UAAU,CAAA,CAAA,GAAK,EAAE,CAAA;AAAA,GAChH;AACF,CAAA;AAEA,IAAM,aAAA,GAAgB,CAAC,IAAA,KAA0B;AAC/C,EAAA,IAAI,CAAC,MAAM,OAAO,IAAA;AAClB,EAAA,IAAI;AACF,IAAA,OAAO,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,EACxB,CAAA,CAAA,MAAQ;AACN,IAAA,OAAO,IAAA;AAAA,EACT;AACF,CAAA;;;ACzJA,IAAM,gBAAA,GAAmB,gCAAA;AAoHlB,IAAM,YAAA,GAAe,OAC1B,OAAA,KAC0B;AAC1B,EAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,KAAA,IAAU,UAAA,CAAW,KAAA;AAC/C,EAAA,IAAI,CAAC,SAAA,EAAW;AACd,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,aAAA,GAAgB,oBAAA,CAAqB,OAAA,CAAQ,MAAM,CAAA;AACzD,EAAA,MAAM,eAAA,GAAkB,OAAA,CAAQ,MAAA,EAAQ,MAAA,IAAU,2BAAA,EAA4B;AAE9E,EAAA,MAAM,SAAA,GACJ,OAAA,CAAQ,MAAA,EAAQ,SAAA,IAChB,4BAAA,CAA6B;AAAA,IAC3B,MAAA,EAAQ,aAAA;AAAA,IACR,KAAA,EAAO,SAAA;AAAA,IACP,MAAA,EAAQ;AAAA,GACT,CAAA;AAEH,EAAA,MAAM,OAAA,GAAU,MAAM,YAAA,CAAa,UAAA,CAAW;AAAA,IAC5C,MAAA,EAAQ,aAAA;AAAA,IACR,MAAA,EAAQ,EAAE,MAAA,EAAQ,SAAA,EAAU;AAAA,IAC5B,KAAA,EAAO,SAAA;AAAA,IACP,WAAW,OAAA,CAAQ,SAAA;AAAA,IACnB,SAAS,OAAA,CAAQ,OAAA;AAAA,IACjB,SAAS,OAAA,CAAQ;AAAA,GAClB,CAAA;AAGD,EAAA,MAAM,kBAAA,GAAqB,CAAC,KAAA,KAAyB;AACnD,IAAA,IAAI,kBAAA,CAAmB,SAAS,CAAA,EAAG;AACjC,MAAA,SAAA,CAAU,eAAe,KAAK,CAAA;AAAA,IAChC;AAAA,EACF,CAAA;AAEA,EAAA,OAAA,CAAQ,EAAA,CAAG,eAAA,EAAiB,CAAC,KAAA,KAAU;AACrC,IAAA,kBAAA,CAAmB,MAAM,WAAW,CAAA;AAAA,EACtC,CAAC,CAAA;AAED,EAAA,OAAA,CAAQ,EAAA,CAAG,gBAAA,EAAkB,CAAC,KAAA,KAAU;AACtC,IAAA,kBAAA,CAAmB,MAAM,WAAW,CAAA;AAAA,EACtC,CAAC,CAAA;AAED,EAAA,IAAI,QAAQ,MAAA,EAAQ;AAClB,IAAA,4BAAA,CAA6B,OAAA,EAAS,QAAQ,MAAM,CAAA;AAAA,EACtD;AAEA,EAAA,MAAM,YAAA,GAA6B;AAAA,IACjC,OAAA;AAAA,IACA,SAAA;AAAA,IACA,YAAA,EAAc,MAAM,OAAA,CAAQ,YAAA,EAAa;AAAA,IACzC,iBAAA,EAAmB,MAAM,OAAA,CAAQ,iBAAA,EAAkB;AAAA,IACnD,aAAa,CAAC,OAAA,KAAY,OAAA,CAAQ,GAAA,CAAI,YAAY,OAAO,CAAA;AAAA,IACzD,eAAe,CAAC,OAAA,KAAY,OAAA,CAAQ,GAAA,CAAI,cAAc,OAAO,CAAA;AAAA,IAC7D,iBAAiB,CAAC,OAAA,KAAY,OAAA,CAAQ,GAAA,CAAI,gBAAgB,OAAO,CAAA;AAAA,IACjE,iBAAiB,CAAC,OAAA,KAAY,OAAA,CAAQ,GAAA,CAAI,gBAAgB,OAAO,CAAA;AAAA,IACjE,iBAAA,EAAmB,MAAM,SAAA,CAAU,iBAAA,EAAkB;AAAA,IACrD,YAAY,YAAY;AACtB,MAAA,IAAI,OAAO,SAAA,CAAU,UAAA,KAAe,UAAA,EAAY;AAC9C,QAAA,OAAO,UAAU,UAAA,EAAW;AAAA,MAC9B;AACA,MAAA,MAAM,QAAA,GAAW,MAAM,SAAA,CAAU,iBAAA,EAAkB;AACnD,MAAA,OAAO,UAAU,OAAA,IAAW,IAAA;AAAA,IAC9B,CAAA;AAAA,IACA,IAAI,CAAC,KAAA,EAAO,YAAY,OAAA,CAAQ,EAAA,CAAG,OAAO,OAAO,CAAA;AAAA,IACjD,QAAA,EAAU,MAAM,OAAA,CAAQ,QAAA;AAAS,GACnC;AAEA,EAAA,OAAO,YAAA;AACT;AAQA,IAAM,4BAAA,GAA+B,CACnC,OAAA,KACoB;AACpB,EAAA,MAAM,EAAE,MAAA,EAAQ,KAAA,EAAO,MAAA,EAAO,GAAI,OAAA;AAClC,EAAA,MAAM,OAAA,GAAU,MAAA,EAAQ,OAAA,IAAW,MAAA,CAAO,OAAA,IAAW,gBAAA;AAErD,EAAA,OAAO,IAAI,iCAAA,CAAkC;AAAA,IAC3C,OAAA;AAAA,IACA,UAAU,MAAA,CAAO,QAAA;AAAA,IACjB,KAAA;AAAA,IACA,SAAS,MAAA,EAAQ,OAAA;AAAA,IACjB,WAAA,EAAa,QAAQ,WAAA,IAAe,IAAA;AAAA,IACpC,sBAAsB,MAAA,EAAQ;AAAA,GAC/B,CAAA;AACH,CAAA;AAgBA,IAAM,kBAAA,GAAqB,CACzB,SAAA,KAGG,OAAQ,UAA2C,cAAA,KAAmB,UAAA;AAE3E,IAAM,4BAAA,GAA+B,CACnC,OAAA,EACA,MAAA,KACS;AACT,EAAA,KAAA,MAAW,CAAC,KAAA,EAAO,QAAQ,KAAK,MAAA,CAAO,OAAA,CAAQ,MAAM,CAAA,EAGjD;AACF,IAAA,IAAI,CAAC,QAAA,EAAU;AACf,IAAA,MAAM,OAAO,KAAA,CAAM,OAAA,CAAQ,QAAQ,CAAA,GAAI,QAAA,GAAW,CAAC,QAAQ,CAAA;AAC3D,IAAA,KAAA,MAAW,WAAW,IAAA,EAAM;AAC1B,MAAA,OAAA,CAAQ,EAAA,CAAG,OAAO,OAAsD,CAAA;AAAA,IAC1E;AAAA,EACF;AACF,CAAA;AAEA,IAAM,oBAAA,GAAuB,CAC3B,SAAA,KACuB;AACvB,EAAA,MAAM,UAAA,GACJ,SAAA,EAAW,OAAA,IAAW,OAAA,CAAQ,IAAI,cAAA,IAAkB,gBAAA;AACtD,EAAA,MAAM,OAAA,GAAU,UAAA,CAAW,IAAA,EAAK,IAAK,gBAAA;AAErC,EAAA,MAAM,QAAA,GAAW,SAAA,EAAW,QAAA,IAAY,OAAA,CAAQ,GAAA,CAAI,eAAA;AACpD,EAAA,IAAI,CAAC,QAAA,EAAU;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,YAAA,GAAe,SAAA,EAAW,YAAA,IAAgB,OAAA,CAAQ,GAAA,CAAI,sBAAA;AAC5D,EAAA,IAAI,CAAC,YAAA,EAAc;AACjB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF;AAEA,EAAA,MAAM,YAAA,GACJ,SAAA,EAAW,YAAA,IAAgB,OAAA,CAAQ,IAAI,yBAAA,IAA6B,MAAA;AACtE,EAAA,MAAM,SAAS,SAAA,EAAW,MAAA,IAAU,WAAA,CAAY,OAAA,CAAQ,IAAI,kBAAkB,CAAA;AAE9E,EAAA,OAAO;AAAA,IACL,OAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,YAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;AAEA,IAAM,WAAA,GAAc,CAAC,GAAA,KAAyD;AAC5E,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,GAAA,CACZ,KAAA,CAAM,SAAS,CAAA,CACf,GAAA,CAAI,CAAC,KAAA,KAAU,KAAA,CAAM,IAAA,EAAM,CAAA,CAC3B,OAAO,OAAO,CAAA;AAEjB,EAAA,OAAO,MAAA,CAAO,SAAS,MAAA,GAAS,MAAA;AAClC,CAAA;AAEA,IAAM,8BAA8B,MAA6C;AAC/E,EAAA,MAAM,OAAA,GAAU,QAAQ,GAAA,CAAI,gBAAA;AAC5B,EAAA,MAAM,WAAA,GAAc,QAAQ,GAAA,CAAI,yBAAA;AAEhC,EAAA,IAAI,CAAC,OAAA,IAAW,CAAC,WAAA,EAAa;AAC5B,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,OAAO;AAAA,IACL,SAAS,OAAA,IAAW,MAAA;AAAA,IACpB,aAAa,WAAA,IAAe;AAAA,GAC9B;AACF,CAAA;;;ACvSO,IAAM,0BAAN,MAAyD;AAAA,EAI9D,YAAY,OAAA,EAAyC;AACnD,IAAA,IAAI,CAAC,SAAS,MAAA,EAAQ;AACpB,MAAA,MAAM,IAAI,MAAM,oDAAoD,CAAA;AAAA,IACtE;AAEA,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,QAAA,GAAW;AAAA,MACd,OAAA,EAAS,QAAQ,OAAA,IAAW,IAAA;AAAA,MAC5B,KAAA,EAAO,QAAQ,KAAA,IAAS,IAAA;AAAA,MACxB,KAAA,EAAO,QAAQ,KAAA,IAAS,IAAA;AAAA,MACxB,SAAA,EAAW,QAAQ,SAAA,IAAa,IAAA;AAAA,MAChC,QAAA,EAAU,QAAQ,QAAA,IAAY,OAAA;AAAA,MAC9B,KAAA,EAAO,QAAQ,KAAA,IAAS;AAAA,KAC1B;AAAA,EACF;AAAA,EAEA,MAAM,cACJ,SAAA,EACiB;AACjB,IAAA,MAAM,UAAA,GAAa,mBAAmB,SAAS,CAAA;AAC/C,IAAA,MAAM,SAAA,GAAY,uBAAA,CAAwB,UAAA,CAAW,OAAO,CAAA;AAE5D,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,aAAA,EAAe;AAC9B,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,SACF;AAAA,MACF;AACA,MAAA,MAAMC,UAAAA,GAAY,MAAM,IAAA,CAAK,MAAA,CAAO,cAAc,SAAS,CAAA;AAC3D,MAAA,MAAM,KAAK,yBAAA,EAA0B;AACrC,MAAA,OAAOA,UAAAA;AAAA,IACT;AAEA,IAAA,MAAM,OAAA,GAAU,UAAA,CAAW,OAAA,IAAW,UAAA,CAAW,WAAA;AACjD,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AAEA,IAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,MAAA,CAAO,WAAA;AAAA,MAClC,wBAAwB,OAAO;AAAA,KACjC;AACA,IAAA,MAAM,KAAK,yBAAA,EAA0B;AACrC,IAAA,OAAO,SAAA;AAAA,EACT;AAAA,EAEA,MAAM,iBAAA,GAAoD;AACxD,IAAA,IAAI,CAAC,IAAA,CAAK,QAAA,EAAU,OAAA,IAAW,IAAA,CAAK,OAAO,UAAA,EAAY;AACrD,MAAA,MAAM,KAAK,yBAAA,EAA0B;AAAA,IACvC;AACA,IAAA,OAAO,IAAA,CAAK,QAAA;AAAA,EACd;AAAA,EAEA,MAAM,UAAA,GAAqC;AACzC,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,EAAkB;AAC9C,IAAA,OAAO,UAAU,OAAA,IAAW,IAAA;AAAA,EAC9B;AAAA,EAEA,cAAc,KAAA,EAAwB;AACpC,IAAA,IAAI,CAAC,OAAO,OAAO,KAAA;AACnB,IAAA,IAAI,CAAC,IAAA,CAAK,QAAA,EAAU,KAAA,EAAO,OAAO,IAAA;AAClC,IAAA,OAAO,KAAK,QAAA,CAAS,KAAA,CAAM,WAAA,EAAY,KAAM,MAAM,WAAA,EAAY;AAAA,EACjE;AAAA,EAEA,MAAc,yBAAA,GAA2C;AACvD,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,UAAA,EAAY;AAC3B,MAAA;AAAA,IACF;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,MAAA,CAAO,UAAA,EAAW;AAC7C,MAAA,IAAI,CAAC,OAAA,EAAS;AACZ,QAAA;AAAA,MACF;AAEA,MAAA,IAAA,CAAK,QAAA,GAAW;AAAA,QACd,GAAG,IAAA,CAAK,QAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF,CAAA,CAAA,MAAQ;AAAA,IAER;AAAA,EACF;AACF;AAEA,IAAM,uBAAA,GAA0B,CAAC,OAAA,KAAyC;AACxE,EAAA,MAAM,QAAA,GAAW,sBAAsB,OAAO,CAAA;AAC9C,EAAA,IAAI,aAAa,OAAA,EAAS;AACxB,IAAA,OAAO,OAAA;AAAA,EACT;AAGA,EAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAA;AAC3B,EAAA,MAAM,KAAA,GAAQ,IAAI,UAAA,CAAW,GAAA,CAAI,SAAS,CAAC,CAAA;AAC3C,EAAA,KAAA,IAAS,QAAQ,CAAA,EAAG,KAAA,GAAQ,GAAA,CAAI,MAAA,EAAQ,SAAS,CAAA,EAAG;AAClD,IAAA,KAAA,CAAM,KAAA,GAAQ,CAAC,CAAA,GAAI,QAAA,CAAS,GAAA,CAAI,MAAM,KAAA,EAAO,KAAA,GAAQ,CAAC,CAAA,EAAG,EAAE,CAAA;AAAA,EAC7D;AACA,EAAA,OAAO,KAAA;AACT,CAAA;AAEA,IAAM,uBAAA,GAA0B,CAC9B,OAAA,KAC4B;AAC5B,EAAA,IAAI,CAAC,OAAA,IAAW,OAAO,OAAA,KAAY,QAAA,EAAU;AAC3C,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,OAAA;AACf,EAAA,MAAM,SAAA,GAAY,MAAA,CAAO,UAAA,IAAc,MAAA,CAAO,SAAA;AAC9C,EAAA,IAAI,CAAC,SAAA,IAAa,OAAO,SAAA,KAAc,QAAA,EAAU;AAC/C,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,KAAA,GAAQ,SAAA;AACd,EAAA,IACE,OAAO,KAAA,CAAM,YAAA,KAAiB,QAAA,IAC9B,CAAC,MAAM,KAAA,IACP,OAAO,KAAA,CAAM,KAAA,KAAU,QAAA,IACvB,CAAC,MAAM,MAAA,IACP,OAAO,KAAA,CAAM,MAAA,KAAW,QAAA,IACxB,CAAC,MAAM,OAAA,IACP,OAAO,KAAA,CAAM,OAAA,KAAY,QAAA,EACzB;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,OAAO;AAAA,IACL,cAAc,KAAA,CAAM,YAAA;AAAA,IACpB,OAAO,KAAA,CAAM,KAAA;AAAA,IACb,QAAQ,KAAA,CAAM,MAAA;AAAA,IACd,SAAS,KAAA,CAAM;AAAA,GACjB;AACF,CAAA","file":"index.js","sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nimport type {\n  ArrayStyle,\n  ObjectStyle,\n  SerializerOptions,\n} from './pathSerializer.gen';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\ntype QuerySerializerOptionsObject = {\n  allowReserved?: boolean;\n  array?: Partial<SerializerOptions<ArrayStyle>>;\n  object?: Partial<SerializerOptions<ObjectStyle>>;\n};\n\nexport type QuerySerializerOptions = QuerySerializerOptionsObject & {\n  /**\n   * Per-parameter serialization overrides. When provided, these settings\n   * override the global array/object settings for specific parameter names.\n   */\n  parameters?: Record<string, QuerySerializerOptionsObject>;\n};\n\nconst serializeFormDataPair = (\n  data: FormData,\n  key: string,\n  value: unknown,\n): void => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else if (value instanceof Date) {\n    data.append(key, value.toISOString());\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n): void => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ): FormData => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T): string =>\n    JSON.stringify(body, (_key, value) =>\n      typeof value === 'bigint' ? value.toString() : value,\n    ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ): string => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { Config } from './types.gen';\n\nexport type ServerSentEventsOptions<TData = unknown> = Omit<\n  RequestInit,\n  'method'\n> &\n  Pick<Config, 'method' | 'responseTransformer' | 'responseValidator'> & {\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: typeof fetch;\n    /**\n     * Implementing clients can call request interceptors inside this hook.\n     */\n    onRequest?: (url: string, init: RequestInit) => Promise<Request>;\n    /**\n     * Callback invoked when a network or parsing error occurs during streaming.\n     *\n     * This option applies only if the endpoint returns a stream of events.\n     *\n     * @param error The error that occurred.\n     */\n    onSseError?: (error: unknown) => void;\n    /**\n     * Callback invoked when an event is streamed from the server.\n     *\n     * This option applies only if the endpoint returns a stream of events.\n     *\n     * @param event Event streamed from the server.\n     * @returns Nothing (void).\n     */\n    onSseEvent?: (event: StreamEvent<TData>) => void;\n    serializedBody?: RequestInit['body'];\n    /**\n     * Default retry delay in milliseconds.\n     *\n     * This option applies only if the endpoint returns a stream of events.\n     *\n     * @default 3000\n     */\n    sseDefaultRetryDelay?: number;\n    /**\n     * Maximum number of retry attempts before giving up.\n     */\n    sseMaxRetryAttempts?: number;\n    /**\n     * Maximum retry delay in milliseconds.\n     *\n     * Applies only when exponential backoff is used.\n     *\n     * This option applies only if the endpoint returns a stream of events.\n     *\n     * @default 30000\n     */\n    sseMaxRetryDelay?: number;\n    /**\n     * Optional sleep function for retry backoff.\n     *\n     * Defaults to using `setTimeout`.\n     */\n    sseSleepFn?: (ms: number) => Promise<void>;\n    url: string;\n  };\n\nexport interface StreamEvent<TData = unknown> {\n  data: TData;\n  event?: string;\n  id?: string;\n  retry?: number;\n}\n\nexport type ServerSentEventsResult<\n  TData = unknown,\n  TReturn = void,\n  TNext = unknown,\n> = {\n  stream: AsyncGenerator<\n    TData extends Record<string, unknown> ? TData[keyof TData] : TData,\n    TReturn,\n    TNext\n  >;\n};\n\nexport const createSseClient = <TData = unknown>({\n  onRequest,\n  onSseError,\n  onSseEvent,\n  responseTransformer,\n  responseValidator,\n  sseDefaultRetryDelay,\n  sseMaxRetryAttempts,\n  sseMaxRetryDelay,\n  sseSleepFn,\n  url,\n  ...options\n}: ServerSentEventsOptions): ServerSentEventsResult<TData> => {\n  let lastEventId: string | undefined;\n\n  const sleep =\n    sseSleepFn ??\n    ((ms: number) => new Promise((resolve) => setTimeout(resolve, ms)));\n\n  const createStream = async function* () {\n    let retryDelay: number = sseDefaultRetryDelay ?? 3000;\n    let attempt = 0;\n    const signal = options.signal ?? new AbortController().signal;\n\n    while (true) {\n      if (signal.aborted) break;\n\n      attempt++;\n\n      const headers =\n        options.headers instanceof Headers\n          ? options.headers\n          : new Headers(options.headers as Record<string, string> | undefined);\n\n      if (lastEventId !== undefined) {\n        headers.set('Last-Event-ID', lastEventId);\n      }\n\n      try {\n        const requestInit: RequestInit = {\n          redirect: 'follow',\n          ...options,\n          body: options.serializedBody,\n          headers,\n          signal,\n        };\n        let request = new Request(url, requestInit);\n        if (onRequest) {\n          request = await onRequest(url, requestInit);\n        }\n        // fetch must be assigned here, otherwise it would throw the error:\n        // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n        const _fetch = options.fetch ?? globalThis.fetch;\n        const response = await _fetch(request);\n\n        if (!response.ok)\n          throw new Error(\n            `SSE failed: ${response.status} ${response.statusText}`,\n          );\n\n        if (!response.body) throw new Error('No body in SSE response');\n\n        const reader = response.body\n          .pipeThrough(new TextDecoderStream())\n          .getReader();\n\n        let buffer = '';\n\n        const abortHandler = () => {\n          try {\n            reader.cancel();\n          } catch {\n            // noop\n          }\n        };\n\n        signal.addEventListener('abort', abortHandler);\n\n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            buffer += value;\n\n            const chunks = buffer.split('\\n\\n');\n            buffer = chunks.pop() ?? '';\n\n            for (const chunk of chunks) {\n              const lines = chunk.split('\\n');\n              const dataLines: Array<string> = [];\n              let eventName: string | undefined;\n\n              for (const line of lines) {\n                if (line.startsWith('data:')) {\n                  dataLines.push(line.replace(/^data:\\s*/, ''));\n                } else if (line.startsWith('event:')) {\n                  eventName = line.replace(/^event:\\s*/, '');\n                } else if (line.startsWith('id:')) {\n                  lastEventId = line.replace(/^id:\\s*/, '');\n                } else if (line.startsWith('retry:')) {\n                  const parsed = Number.parseInt(\n                    line.replace(/^retry:\\s*/, ''),\n                    10,\n                  );\n                  if (!Number.isNaN(parsed)) {\n                    retryDelay = parsed;\n                  }\n                }\n              }\n\n              let data: unknown;\n              let parsedJson = false;\n\n              if (dataLines.length) {\n                const rawData = dataLines.join('\\n');\n                try {\n                  data = JSON.parse(rawData);\n                  parsedJson = true;\n                } catch {\n                  data = rawData;\n                }\n              }\n\n              if (parsedJson) {\n                if (responseValidator) {\n                  await responseValidator(data);\n                }\n\n                if (responseTransformer) {\n                  data = await responseTransformer(data);\n                }\n              }\n\n              onSseEvent?.({\n                data,\n                event: eventName,\n                id: lastEventId,\n                retry: retryDelay,\n              });\n\n              if (dataLines.length) {\n                yield data as any;\n              }\n            }\n          }\n        } finally {\n          signal.removeEventListener('abort', abortHandler);\n          reader.releaseLock();\n        }\n\n        break; // exit loop on normal completion\n      } catch (error) {\n        // connection failed or aborted; retry after delay\n        onSseError?.(error);\n\n        if (\n          sseMaxRetryAttempts !== undefined &&\n          attempt >= sseMaxRetryAttempts\n        ) {\n          break; // stop after firing error\n        }\n\n        // exponential backoff: double retry each attempt, cap at 30s\n        const backoff = Math.min(\n          retryDelay * 2 ** (attempt - 1),\n          sseMaxRetryDelay ?? 30000,\n        );\n        await sleep(backoff);\n      }\n    }\n  };\n\n  const stream = createStream();\n\n  return { stream };\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\ninterface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n  valueOnly,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n  valueOnly?: boolean;\n}) => {\n  if (value instanceof Date) {\n    return valueOnly ? value.toISOString() : `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { BodySerializer, QuerySerializer } from './bodySerializer.gen';\nimport {\n  type ArraySeparatorStyle,\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from './pathSerializer.gen';\n\nexport interface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nexport const PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\nexport const defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n            valueOnly: true,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl?: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = (baseUrl ?? '') + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport function getValidRequestBody(options: {\n  body?: unknown;\n  bodySerializer?: BodySerializer | null;\n  serializedBody?: unknown;\n}) {\n  const hasBody = options.body !== undefined;\n  const isSerializedBody = hasBody && options.bodySerializer;\n\n  if (isSerializedBody) {\n    if ('serializedBody' in options) {\n      const hasSerializedBody =\n        options.serializedBody !== undefined && options.serializedBody !== '';\n\n      return hasSerializedBody ? options.serializedBody : null;\n    }\n\n    // not all clients implement a serializedBody property (i.e. client-axios)\n    return options.body !== '' ? options.body : null;\n  }\n\n  // plain/text body\n  if (hasBody) {\n    return options.body;\n  }\n\n  // no body was provided\n  return undefined;\n}\n","// This file is auto-generated by @hey-api/openapi-ts\n\nexport type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport { getAuthToken } from '../core/auth.gen';\nimport type { QuerySerializerOptions } from '../core/bodySerializer.gen';\nimport { jsonBodySerializer } from '../core/bodySerializer.gen';\nimport {\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '../core/pathSerializer.gen';\nimport { getUrl } from '../core/utils.gen';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types.gen';\n\nexport const createQuerySerializer = <T = unknown>({\n  parameters = {},\n  ...args\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    const search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        const options = parameters[name] || args;\n\n        if (Array.isArray(value)) {\n          const serializedArray = serializeArrayParam({\n            allowReserved: options.allowReserved,\n            explode: true,\n            name,\n            style: 'form',\n            value,\n            ...options.array,\n          });\n          if (serializedArray) search.push(serializedArray);\n        } else if (typeof value === 'object') {\n          const serializedObject = serializeObjectParam({\n            allowReserved: options.allowReserved,\n            explode: true,\n            name,\n            style: 'deepObject',\n            value: value as Record<string, unknown>,\n            ...options.object,\n          });\n          if (serializedObject) search.push(serializedObject);\n        } else {\n          const serializedPrimitive = serializePrimitiveParam({\n            allowReserved: options.allowReserved,\n            name,\n            value: value as string,\n          });\n          if (serializedPrimitive) search.push(serializedPrimitive);\n        }\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n  contentType: string | null,\n): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n\n  return;\n};\n\nconst checkForExistence = (\n  options: Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  },\n  name?: string,\n): boolean => {\n  if (!name) {\n    return false;\n  }\n  if (\n    options.headers.has(name) ||\n    options.query?.[name] ||\n    options.headers.get('Cookie')?.includes(`${name}=`)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    if (checkForExistence(options, auth.name)) {\n      continue;\n    }\n\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'cookie':\n        options.headers.append('Cookie', `${name}=${token}`);\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) =>\n  getUrl({\n    baseUrl: options.baseUrl as string,\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nconst headersEntries = (headers: Headers): Array<[string, string]> => {\n  const entries: Array<[string, string]> = [];\n  headers.forEach((value, key) => {\n    entries.push([key, value]);\n  });\n  return entries;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header) {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers\n        ? headersEntries(header)\n        : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (\n  request: Req,\n  options: Options,\n) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  fns: Array<Interceptor | null> = [];\n\n  clear(): void {\n    this.fns = [];\n  }\n\n  eject(id: number | Interceptor): void {\n    const index = this.getInterceptorIndex(id);\n    if (this.fns[index]) {\n      this.fns[index] = null;\n    }\n  }\n\n  exists(id: number | Interceptor): boolean {\n    const index = this.getInterceptorIndex(id);\n    return Boolean(this.fns[index]);\n  }\n\n  getInterceptorIndex(id: number | Interceptor): number {\n    if (typeof id === 'number') {\n      return this.fns[id] ? id : -1;\n    }\n    return this.fns.indexOf(id);\n  }\n\n  update(\n    id: number | Interceptor,\n    fn: Interceptor,\n  ): number | Interceptor | false {\n    const index = this.getInterceptorIndex(id);\n    if (this.fns[index]) {\n      this.fns[index] = fn;\n      return id;\n    }\n    return false;\n  }\n\n  use(fn: Interceptor): number {\n    this.fns.push(fn);\n    return this.fns.length - 1;\n  }\n}\n\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Interceptors<ErrInterceptor<Err, Res, Req, Options>>;\n  request: Interceptors<ReqInterceptor<Req, Options>>;\n  response: Interceptors<ResInterceptor<Res, Req, Options>>;\n}\n\nexport const createInterceptors = <Req, Res, Err, Options>(): Middleware<\n  Req,\n  Res,\n  Err,\n  Options\n> => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...jsonBodySerializer,\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport { createSseClient } from \"../core/serverSentEvents.gen\";\nimport type { HttpMethod } from \"../core/types.gen\";\nimport { getValidRequestBody } from \"../core/utils.gen\";\nimport type {\n  Client,\n  Config,\n  RequestOptions,\n  ResolvedRequestOptions,\n} from \"./types.gen\";\nimport {\n  buildUrl,\n  createConfig,\n  createInterceptors,\n  getParseAs,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from \"./utils.gen\";\n\ntype ReqInit = Omit<RequestInit, \"body\" | \"headers\"> & {\n  body?: any;\n  headers: ReturnType<typeof mergeHeaders>;\n};\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    return getConfig();\n  };\n\n  const interceptors = createInterceptors<\n    Request,\n    Response,\n    unknown,\n    ResolvedRequestOptions\n  >();\n\n  const beforeRequest = async (options: RequestOptions) => {\n    const opts = {\n      ..._config,\n      ...options,\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n      headers: mergeHeaders(_config.headers, options.headers),\n      serializedBody: undefined,\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.requestValidator) {\n      await opts.requestValidator(opts);\n    }\n\n    if (opts.body !== undefined && opts.bodySerializer) {\n      opts.serializedBody = opts.bodySerializer(opts.body);\n    }\n\n    // remove Content-Type header if body is empty to avoid sending invalid requests\n    if (opts.body === undefined || opts.serializedBody === \"\") {\n      opts.headers.delete(\"Content-Type\");\n    }\n\n    const url = buildUrl(opts);\n\n    return { opts, url };\n  };\n\n  const request: Client[\"request\"] = async (options) => {\n    const { opts, url } = await beforeRequest(options);\n    const requestInit: ReqInit = {\n      redirect: \"follow\",\n      ...opts,\n      body: getValidRequestBody(opts),\n    };\n\n    let request = new Request(url, requestInit);\n\n    for (const fn of interceptors.request.fns) {\n      if (fn) {\n        request = await fn(request, opts);\n      }\n    }\n\n    // fetch must be assigned here, otherwise it would throw the error:\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n    const _fetch = opts.fetch!;\n    let response = await _fetch(request);\n\n    for (const fn of interceptors.response.fns) {\n      if (fn) {\n        response = await fn(response, request, opts);\n      }\n    }\n\n    const result = {\n      request,\n      response,\n    };\n\n    if (response.ok) {\n      const parseAs =\n        (opts.parseAs === \"auto\"\n          ? getParseAs(response.headers.get(\"Content-Type\"))\n          : opts.parseAs) ?? \"json\";\n\n      if (\n        response.status === 204 ||\n        response.headers.get(\"Content-Length\") === \"0\"\n      ) {\n        let emptyData: any;\n        switch (parseAs) {\n          case \"arrayBuffer\":\n          case \"blob\":\n          case \"text\":\n            emptyData = await response[parseAs]();\n            break;\n          case \"formData\":\n            emptyData = new FormData();\n            break;\n          case \"stream\":\n            emptyData = response.body;\n            break;\n          case \"json\":\n          default:\n            emptyData = {};\n            break;\n        }\n        return opts.responseStyle === \"data\"\n          ? emptyData\n          : {\n              data: emptyData,\n              ...result,\n            };\n      }\n\n      let data: any;\n      switch (parseAs) {\n        case \"arrayBuffer\":\n        case \"blob\":\n        case \"formData\":\n        case \"json\":\n        case \"text\":\n          data = await response[parseAs]();\n          break;\n        case \"stream\":\n          return opts.responseStyle === \"data\"\n            ? response.body\n            : {\n                data: response.body,\n                ...result,\n              };\n      }\n\n      if (parseAs === \"json\") {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return opts.responseStyle === \"data\"\n        ? data\n        : {\n            data,\n            ...result,\n          };\n    }\n\n    const textError = await response.text();\n    let jsonError: unknown;\n\n    try {\n      jsonError = JSON.parse(textError);\n    } catch {\n      // noop\n    }\n\n    const error = jsonError ?? textError;\n    let finalError = error;\n\n    for (const fn of interceptors.error.fns) {\n      if (fn) {\n        finalError = (await fn(error, response, request, opts)) as string;\n      }\n    }\n\n    finalError = finalError || ({} as string);\n\n    if (opts.throwOnError) {\n      throw finalError;\n    }\n\n    // TODO: we probably want to return error and improve types\n    return opts.responseStyle === \"data\"\n      ? undefined\n      : {\n          error: finalError,\n          ...result,\n        };\n  };\n\n  const makeMethodFn =\n    (method: Uppercase<HttpMethod>) => (options: RequestOptions) =>\n      request({ ...options, method });\n\n  const makeSseFn =\n    (method: Uppercase<HttpMethod>) => async (options: RequestOptions) => {\n      const { opts, url } = await beforeRequest(options);\n      return createSseClient({\n        ...opts,\n        body: opts.body as BodyInit | null | undefined,\n        headers: opts.headers as unknown as Record<string, string>,\n        method,\n        onRequest: async (url, init) => {\n          let request = new Request(url, init);\n          for (const fn of interceptors.request.fns) {\n            if (fn) {\n              request = await fn(request, opts);\n            }\n          }\n          return request;\n        },\n        url,\n      });\n    };\n\n  return {\n    buildUrl,\n    connect: makeMethodFn(\"CONNECT\"),\n    delete: makeMethodFn(\"DELETE\"),\n    get: makeMethodFn(\"GET\"),\n    getConfig,\n    head: makeMethodFn(\"HEAD\"),\n    interceptors,\n    options: makeMethodFn(\"OPTIONS\"),\n    patch: makeMethodFn(\"PATCH\"),\n    post: makeMethodFn(\"POST\"),\n    put: makeMethodFn(\"PUT\"),\n    request,\n    setConfig,\n    sse: {\n      connect: makeSseFn(\"CONNECT\"),\n      delete: makeSseFn(\"DELETE\"),\n      get: makeSseFn(\"GET\"),\n      head: makeSseFn(\"HEAD\"),\n      options: makeSseFn(\"OPTIONS\"),\n      patch: makeSseFn(\"PATCH\"),\n      post: makeSseFn(\"POST\"),\n      put: makeSseFn(\"PUT\"),\n      trace: makeSseFn(\"TRACE\"),\n    },\n    trace: makeMethodFn(\"TRACE\"),\n  } as Client;\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport { type ClientOptions, type Config, createClient, createConfig } from './client';\nimport type { ClientOptions as ClientOptions2 } from './types.gen';\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig<T extends ClientOptions = ClientOptions2> = (override?: Config<ClientOptions & T>) => Config<Required<ClientOptions> & T>;\n\nexport const client = createClient(createConfig<ClientOptions2>());\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { Client, Options as Options2, TDataShape } from './client';\nimport { client } from './client.gen';\nimport type { DeleteV1AgentsByAgentRefCredentialsByCredentialIdData, DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors, DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses, DeleteV1AgentsByAgentRefData, DeleteV1AgentsByAgentRefErrors, DeleteV1AgentsByAgentRefResponses, DeleteV1AgentsByAgentRefTokensByTokenIdData, DeleteV1AgentsByAgentRefTokensByTokenIdErrors, DeleteV1AgentsByAgentRefTokensByTokenIdResponses, GetV1A2aRegistryData, GetV1A2aRegistryResponses, GetV1AgentsByAgentRefA2aCardData, GetV1AgentsByAgentRefA2aCardErrors, GetV1AgentsByAgentRefA2aCardResponses, GetV1AgentsByAgentRefCredentialsData, GetV1AgentsByAgentRefCredentialsErrors, GetV1AgentsByAgentRefCredentialsResponses, GetV1AgentsByAgentRefData, GetV1AgentsByAgentRefEntrypointsData, GetV1AgentsByAgentRefEntrypointsErrors, GetV1AgentsByAgentRefEntrypointsResponses, GetV1AgentsByAgentRefErrors, GetV1AgentsByAgentRefHealthData, GetV1AgentsByAgentRefHealthResponses, GetV1AgentsByAgentRefResponses, GetV1AgentsByAgentRefTokensData, GetV1AgentsByAgentRefTokensErrors, GetV1AgentsByAgentRefTokensResponses, GetV1AgentsData, GetV1AgentsGraphData, GetV1AgentsGraphResponses, GetV1AgentsResponses, GetV1OnchainBalancesData, GetV1OnchainBalancesErrors, GetV1OnchainBalancesResponses, GetV1OnrampBuyOptionsData, GetV1OnrampBuyOptionsErrors, GetV1OnrampBuyOptionsResponses, GetV1RunsByRunIdData, GetV1RunsByRunIdErrors, GetV1RunsByRunIdLedgerData, GetV1RunsByRunIdLedgerErrors, GetV1RunsByRunIdLedgerResponses, GetV1RunsByRunIdResponses, GetV1RunsByRunIdStreamData, GetV1RunsByRunIdStreamErrors, GetV1RunsByRunIdStreamResponses, GetV1RunsData, GetV1RunsResponses, GetV1UsersMeData, GetV1UsersMeErrors, GetV1UsersMeResponses, PatchV1AgentsByAgentRefData, PatchV1AgentsByAgentRefErrors, PatchV1AgentsByAgentRefResponses, PostV1AgentsByAgentRefA2aRpcData, PostV1AgentsByAgentRefA2aRpcErrors, PostV1AgentsByAgentRefA2aRpcResponses, PostV1AgentsByAgentRefCredentialsData, PostV1AgentsByAgentRefCredentialsErrors, PostV1AgentsByAgentRefCredentialsResponses, PostV1AgentsByAgentRefEntrypointsByKeyInvokeData, PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors, PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses, PostV1AgentsByAgentRefEntrypointsByKeyRunsData, PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors, PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses, PostV1AgentsByAgentRefEntrypointsByKeyStreamData, PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors, PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses, PostV1AgentsByAgentRefRefreshEntrypointsData, PostV1AgentsByAgentRefRefreshEntrypointsErrors, PostV1AgentsByAgentRefRefreshEntrypointsResponses, PostV1AgentsByAgentRefRuntimeCredentialsData, PostV1AgentsByAgentRefRuntimeCredentialsErrors, PostV1AgentsByAgentRefRuntimeCredentialsResponses, PostV1AgentsByAgentRefTokensData, PostV1AgentsByAgentRefTokensErrors, PostV1AgentsByAgentRefTokensResponses, PostV1AgentsByAgentRefWalletSendTransactionData, PostV1AgentsByAgentRefWalletSendTransactionErrors, PostV1AgentsByAgentRefWalletSendTransactionResponses, PostV1AgentsByAgentRefWalletSignMessageData, PostV1AgentsByAgentRefWalletSignMessageErrors, PostV1AgentsByAgentRefWalletSignMessageResponses, PostV1AgentsByAgentRefWalletSignTransactionData, PostV1AgentsByAgentRefWalletSignTransactionErrors, PostV1AgentsByAgentRefWalletSignTransactionResponses, PostV1AgentsByAgentRefWalletSignTypedDataData, PostV1AgentsByAgentRefWalletSignTypedDataErrors, PostV1AgentsByAgentRefWalletSignTypedDataResponses, PostV1AgentsData, PostV1AgentsErrors, PostV1AgentsResponses, PostV1AuthAgentsByAgentRefChallengeData, PostV1AuthAgentsByAgentRefChallengeErrors, PostV1AuthAgentsByAgentRefChallengeResponses, PostV1AuthAgentsByAgentRefExchangeData, PostV1AuthAgentsByAgentRefExchangeErrors, PostV1AuthAgentsByAgentRefExchangeResponses, PostV1AuthAgentsByAgentRefRefreshData, PostV1AuthAgentsByAgentRefRefreshErrors, PostV1AuthAgentsByAgentRefRefreshResponses, PostV1AuthCoinbaseData, PostV1AuthCoinbaseErrors, PostV1AuthCoinbaseResponses, PostV1AuthLogoutData, PostV1AuthLogoutErrors, PostV1AuthLogoutResponses, PostV1AuthPrivyData, PostV1AuthPrivyErrors, PostV1AuthPrivyResponses, PostV1OnrampBuyQuoteData, PostV1OnrampBuyQuoteErrors, PostV1OnrampBuyQuoteResponses, PostV1OnrampWebhookData, PostV1OnrampWebhookErrors, PostV1OnrampWebhookResponses, PostV1UsersMeWalletsData, PostV1UsersMeWalletsErrors, PostV1UsersMeWalletsResponses } from './types.gen';\n\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {\n    /**\n     * You can provide a client instance returned by `createClient()` instead of\n     * individual options. This might be also useful if you want to implement a\n     * custom client.\n     */\n    client?: Client;\n    /**\n     * You can pass arbitrary values through the `meta` object. This can be\n     * used to access values that aren't defined as part of the SDK function.\n     */\n    meta?: Record<string, unknown>;\n};\n\n/**\n * Exchange Privy token\n *\n * Exchange a Privy token for an authenticated session.\n */\nexport const postV1AuthPrivy = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthPrivyData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AuthPrivyResponses, PostV1AuthPrivyErrors, ThrowOnError>({\n        url: '/v1/auth/privy',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Exchange Coinbase token\n *\n * Exchange a Coinbase access token for an authenticated session.\n */\nexport const postV1AuthCoinbase = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthCoinbaseData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AuthCoinbaseResponses, PostV1AuthCoinbaseErrors, ThrowOnError>({\n        url: '/v1/auth/coinbase',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Create agent auth challenge\n *\n * Create a challenge that an agent must sign to authenticate.\n */\nexport const postV1AuthAgentsByAgentRefChallenge = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefChallengeData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefChallengeResponses, PostV1AuthAgentsByAgentRefChallengeErrors, ThrowOnError>({\n        url: '/v1/auth/agents/{agentRef}/challenge',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Exchange agent challenge\n *\n * Exchange a signed challenge for agent access tokens.\n */\nexport const postV1AuthAgentsByAgentRefExchange = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefExchangeData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefExchangeResponses, PostV1AuthAgentsByAgentRefExchangeErrors, ThrowOnError>({\n        url: '/v1/auth/agents/{agentRef}/exchange',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Refresh agent access token\n *\n * Refresh an agent access token using a refresh token.\n */\nexport const postV1AuthAgentsByAgentRefRefresh = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefRefreshData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefRefreshResponses, PostV1AuthAgentsByAgentRefRefreshErrors, ThrowOnError>({\n        url: '/v1/auth/agents/{agentRef}/refresh',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Logout\n *\n * Invalidate the current session token and clear cookies.\n */\nexport const postV1AuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostV1AuthLogoutData, ThrowOnError>) => {\n    return (options?.client ?? client).post<PostV1AuthLogoutResponses, PostV1AuthLogoutErrors, ThrowOnError>({\n        url: '/v1/auth/logout',\n        ...options\n    });\n};\n\n/**\n * List agents\n *\n * Retrieve up to 100 agents accessible to the current user.\n */\nexport const getV1Agents = <ThrowOnError extends boolean = false>(options?: Options<GetV1AgentsData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1AgentsResponses, unknown, ThrowOnError>({\n        url: '/v1/agents',\n        ...options\n    });\n};\n\n/**\n * Create agent\n *\n * Create a new agent with the provided configuration.\n */\nexport const postV1Agents = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsResponses, PostV1AgentsErrors, ThrowOnError>({\n        url: '/v1/agents',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Agent run graph\n *\n * Fetch aggregate data about agent runs for visualization analytics.\n */\nexport const getV1AgentsGraph = <ThrowOnError extends boolean = false>(options?: Options<GetV1AgentsGraphData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1AgentsGraphResponses, unknown, ThrowOnError>({\n        url: '/v1/agents/graph',\n        ...options\n    });\n};\n\n/**\n * Delete agent\n *\n * Delete an agent and its cached entrypoints.\n */\nexport const deleteV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefData, ThrowOnError>) => {\n    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefResponses, DeleteV1AgentsByAgentRefErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}',\n        ...options\n    });\n};\n\n/**\n * Get agent details\n *\n * Fetch an agent along with its billing information.\n */\nexport const getV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefResponses, GetV1AgentsByAgentRefErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}',\n        ...options\n    });\n};\n\n/**\n * Update agent\n *\n * Update an existing agent.\n */\nexport const patchV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<PatchV1AgentsByAgentRefData, ThrowOnError>) => {\n    return (options.client ?? client).patch<PatchV1AgentsByAgentRefResponses, PatchV1AgentsByAgentRefErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Check agent health\n *\n * Proxy request to the agent's health endpoint.\n */\nexport const getV1AgentsByAgentRefHealth = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefHealthData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefHealthResponses, unknown, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/health',\n        ...options\n    });\n};\n\n/**\n * List agent entrypoints\n *\n * List entrypoints for an agent, optionally refreshing from upstream.\n */\nexport const getV1AgentsByAgentRefEntrypoints = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefEntrypointsData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefEntrypointsResponses, GetV1AgentsByAgentRefEntrypointsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/entrypoints',\n        ...options\n    });\n};\n\n/**\n * Refresh agent entrypoints\n *\n * Force refresh an agent's entrypoints from upstream.\n */\nexport const postV1AgentsByAgentRefRefreshEntrypoints = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefRefreshEntrypointsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefRefreshEntrypointsResponses, PostV1AgentsByAgentRefRefreshEntrypointsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/refresh-entrypoints',\n        ...options\n    });\n};\n\n/**\n * List agent credentials\n *\n * List credentials associated with an agent.\n */\nexport const getV1AgentsByAgentRefCredentials = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefCredentialsData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefCredentialsResponses, GetV1AgentsByAgentRefCredentialsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/credentials',\n        ...options\n    });\n};\n\n/**\n * Create agent credential\n *\n * Create a new credential for an agent.\n */\nexport const postV1AgentsByAgentRefCredentials = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefCredentialsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefCredentialsResponses, PostV1AgentsByAgentRefCredentialsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/credentials',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Revoke agent credential\n *\n * Revoke a credential from an agent.\n */\nexport const deleteV1AgentsByAgentRefCredentialsByCredentialId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefCredentialsByCredentialIdData, ThrowOnError>) => {\n    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses, DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/credentials/{credentialId}',\n        ...options\n    });\n};\n\n/**\n * List agent tokens\n *\n * List API tokens issued for an agent.\n */\nexport const getV1AgentsByAgentRefTokens = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefTokensData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefTokensResponses, GetV1AgentsByAgentRefTokensErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/tokens',\n        ...options\n    });\n};\n\n/**\n * Create agent token\n *\n * Issue a new API token for an agent.\n */\nexport const postV1AgentsByAgentRefTokens = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefTokensData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefTokensResponses, PostV1AgentsByAgentRefTokensErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/tokens',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Issue agent runtime credential\n *\n * Generate a refresh token backed by a managed wallet credential for use with the agent runtime.\n */\nexport const postV1AgentsByAgentRefRuntimeCredentials = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefRuntimeCredentialsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefRuntimeCredentialsResponses, PostV1AgentsByAgentRefRuntimeCredentialsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/runtime-credentials',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Revoke agent token\n *\n * Revoke an existing API token.\n */\nexport const deleteV1AgentsByAgentRefTokensByTokenId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefTokensByTokenIdData, ThrowOnError>) => {\n    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefTokensByTokenIdResponses, DeleteV1AgentsByAgentRefTokensByTokenIdErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/tokens/{tokenId}',\n        ...options\n    });\n};\n\n/**\n * Invoke agent entrypoint\n *\n * Trigger an agent entrypoint synchronously.\n */\nexport const postV1AgentsByAgentRefEntrypointsByKeyInvoke = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyInvokeData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses, PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/entrypoints/{key}/invoke',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Stream agent entrypoint\n *\n * Trigger an agent entrypoint and stream responses via SSE.\n */\nexport const postV1AgentsByAgentRefEntrypointsByKeyStream = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyStreamData, ThrowOnError>) => {\n    return (options.client ?? client).sse.post<PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses, PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/entrypoints/{key}/stream',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Send transaction with agent wallet\n *\n * Send a transaction using the agent's managed wallet.\n */\nexport const postV1AgentsByAgentRefWalletSendTransaction = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSendTransactionData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSendTransactionResponses, PostV1AgentsByAgentRefWalletSendTransactionErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/wallet/send-transaction',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Sign transaction with agent wallet\n *\n * Sign a transaction payload using the agent's managed wallet.\n */\nexport const postV1AgentsByAgentRefWalletSignTransaction = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignTransactionData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignTransactionResponses, PostV1AgentsByAgentRefWalletSignTransactionErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/wallet/sign-transaction',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Sign message with agent wallet\n *\n * Sign an arbitrary message using the agent's managed wallet.\n */\nexport const postV1AgentsByAgentRefWalletSignMessage = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignMessageData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignMessageResponses, PostV1AgentsByAgentRefWalletSignMessageErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/wallet/sign-message',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Sign typed data with agent wallet\n *\n * Sign typed structured data via the agent's managed wallet.\n */\nexport const postV1AgentsByAgentRefWalletSignTypedData = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignTypedDataData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignTypedDataResponses, PostV1AgentsByAgentRefWalletSignTypedDataErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/wallet/sign-typed-data',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Get the A2A card for an agent\n *\n * This endpoint is used to get the A2A card for an agent.\n */\nexport const getV1AgentsByAgentRefA2aCard = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefA2aCardData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1AgentsByAgentRefA2aCardResponses, GetV1AgentsByAgentRefA2aCardErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/a2a/card',\n        ...options\n    });\n};\n\n/**\n * JSON-RPC endpoint for A2A tasks\n *\n * This endpoint is used to send and subscribe to A2A tasks.\n */\nexport const postV1AgentsByAgentRefA2aRpc = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefA2aRpcData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefA2aRpcResponses, PostV1AgentsByAgentRefA2aRpcErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/a2a/rpc',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * List agents in the A2A registry\n *\n * Return a paginated list of agent cards, optionally filtering by skill, streaming capability, or payment requirements.\n */\nexport const getV1A2aRegistry = <ThrowOnError extends boolean = false>(options?: Options<GetV1A2aRegistryData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1A2aRegistryResponses, unknown, ThrowOnError>({\n        url: '/v1/a2a/registry',\n        ...options\n    });\n};\n\n/**\n * Get current user\n *\n * Retrieve the authenticated user, session, and memberships.\n */\nexport const getV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetV1UsersMeData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1UsersMeResponses, GetV1UsersMeErrors, ThrowOnError>({\n        url: '/v1/users/me',\n        ...options\n    });\n};\n\n/**\n * Create user wallet\n *\n * Create a managed wallet for the authenticated user on the specified chain.\n */\nexport const postV1UsersMeWallets = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersMeWalletsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1UsersMeWalletsResponses, PostV1UsersMeWalletsErrors, ThrowOnError>({\n        url: '/v1/users/me/wallets',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * Fetch available Coinbase Onramp payment options.\n */\nexport const getV1OnrampBuyOptions = <ThrowOnError extends boolean = false>(options: Options<GetV1OnrampBuyOptionsData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1OnrampBuyOptionsResponses, GetV1OnrampBuyOptionsErrors, ThrowOnError>({\n        url: '/v1/onramp/buy-options',\n        ...options\n    });\n};\n\n/**\n * Create a Coinbase Onramp buy quote.\n */\nexport const postV1OnrampBuyQuote = <ThrowOnError extends boolean = false>(options?: Options<PostV1OnrampBuyQuoteData, ThrowOnError>) => {\n    return (options?.client ?? client).post<PostV1OnrampBuyQuoteResponses, PostV1OnrampBuyQuoteErrors, ThrowOnError>({\n        url: '/v1/onramp/buy-quote',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options?.headers\n        }\n    });\n};\n\n/**\n * Receive Coinbase Onramp webhook callbacks.\n *\n * Validates the Coinbase webhook signature and acknowledges receipt. Actual balance reconciliation is handled externally.\n */\nexport const postV1OnrampWebhook = <ThrowOnError extends boolean = false>(options?: Options<PostV1OnrampWebhookData, ThrowOnError>) => {\n    return (options?.client ?? client).post<PostV1OnrampWebhookResponses, PostV1OnrampWebhookErrors, ThrowOnError>({\n        url: '/v1/onramp/webhook',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options?.headers\n        }\n    });\n};\n\n/**\n * Get embedded wallet balances\n *\n * Returns cached onchain balances for the authenticated user's embedded Base and Solana wallets.\n */\nexport const getV1OnchainBalances = <ThrowOnError extends boolean = false>(options?: Options<GetV1OnchainBalancesData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1OnchainBalancesResponses, GetV1OnchainBalancesErrors, ThrowOnError>({\n        url: '/v1/onchain/balances',\n        ...options\n    });\n};\n\n/**\n * Invoke an agent entrypoint\n *\n * Enqueue a run for an agent entrypoint or execute it synchronously when wait=1.\n */\nexport const postV1AgentsByAgentRefEntrypointsByKeyRuns = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyRunsData, ThrowOnError>) => {\n    return (options.client ?? client).post<PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses, PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors, ThrowOnError>({\n        url: '/v1/agents/{agentRef}/entrypoints/{key}/runs',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n\n/**\n * List runs\n *\n * List recent runs with optional filtering.\n */\nexport const getV1Runs = <ThrowOnError extends boolean = false>(options?: Options<GetV1RunsData, ThrowOnError>) => {\n    return (options?.client ?? client).get<GetV1RunsResponses, unknown, ThrowOnError>({\n        url: '/v1/runs',\n        ...options\n    });\n};\n\n/**\n * Get run detail\n *\n * Fetch detailed information about a run.\n */\nexport const getV1RunsByRunId = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1RunsByRunIdResponses, GetV1RunsByRunIdErrors, ThrowOnError>({\n        url: '/v1/runs/{runId}',\n        ...options\n    });\n};\n\n/**\n * Run ledger entries\n *\n * Retrieve ledger entries associated with the run.\n */\nexport const getV1RunsByRunIdLedger = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdLedgerData, ThrowOnError>) => {\n    return (options.client ?? client).get<GetV1RunsByRunIdLedgerResponses, GetV1RunsByRunIdLedgerErrors, ThrowOnError>({\n        url: '/v1/runs/{runId}/ledger',\n        ...options\n    });\n};\n\n/**\n * Stream run updates\n *\n * Stream updates for a run via Server-Sent Events until completion.\n */\nexport const getV1RunsByRunIdStream = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdStreamData, ThrowOnError>) => {\n    return (options.client ?? client).sse.get<GetV1RunsByRunIdStreamResponses, GetV1RunsByRunIdStreamErrors, ThrowOnError>({\n        url: '/v1/runs/{runId}/stream',\n        ...options\n    });\n};\n","export type AgentAuthClientErrorCode =\n  | \"AgentRefRequired\"\n  | \"BaseUrlRequired\"\n  | \"EmptyResponse\"\n  | \"RequestFailed\";\n\nexport interface AgentAuthClientErrorContext {\n  agentRef?: string;\n  cause?: unknown;\n}\n\nexport class AgentAuthClientError extends Error {\n  readonly code: AgentAuthClientErrorCode;\n  readonly agentRef?: string;\n  override readonly cause?: unknown;\n\n  constructor(\n    code: AgentAuthClientErrorCode,\n    message: string,\n    context?: AgentAuthClientErrorContext,\n  ) {\n    super(message);\n    this.name = \"AgentAuthClientError\";\n    this.code = code;\n    this.agentRef = context?.agentRef;\n    this.cause = context?.cause;\n  }\n}\n\nexport type TokenManagerErrorCode =\n  | \"TokensUnavailable\"\n  | \"StorageFailure\";\n\nexport interface TokenManagerErrorContext {\n  cause?: unknown;\n}\n\nexport class TokenManagerError extends Error {\n  readonly code: TokenManagerErrorCode;\n  override readonly cause?: unknown;\n\n  constructor(\n    code: TokenManagerErrorCode,\n    message: string,\n    context?: TokenManagerErrorContext,\n  ) {\n    super(message);\n    this.name = \"TokenManagerError\";\n    this.code = code;\n    this.cause = context?.cause;\n  }\n}\n\nexport type AgentApiClientErrorCode =\n  | \"AccessTokenRequired\"\n  | \"AgentRefRequired\"\n  | \"EmptyResponse\"\n  | \"RequestFailed\";\n\nexport interface AgentApiClientErrorContext {\n  agentRef?: string;\n  status?: number;\n  details?: unknown;\n  cause?: unknown;\n}\n\nexport class AgentApiClientError extends Error {\n  readonly code: AgentApiClientErrorCode;\n  readonly agentRef?: string;\n  readonly status?: number;\n  readonly details?: unknown;\n  override readonly cause?: unknown;\n\n  constructor(\n    code: AgentApiClientErrorCode,\n    message: string,\n    context?: AgentApiClientErrorContext,\n  ) {\n    super(message);\n    this.name = \"AgentApiClientError\";\n    this.code = code;\n    this.agentRef = context?.agentRef;\n    this.status = context?.status;\n    this.details = context?.details;\n    this.cause = context?.cause;\n  }\n}\n\nexport type AgentRuntimeErrorCode =\n  | \"ConfigurationError\"\n  | \"AuthenticationFailed\"\n  | \"RefreshFailed\"\n  | \"TokensUnavailable\";\n\nexport interface AgentRuntimeErrorContext {\n  cause?: unknown;\n}\n\nexport class AgentRuntimeError extends Error {\n  readonly code: AgentRuntimeErrorCode;\n  override readonly cause?: unknown;\n\n  constructor(\n    code: AgentRuntimeErrorCode,\n    message: string,\n    context?: AgentRuntimeErrorContext,\n  ) {\n    super(message);\n    this.name = \"AgentRuntimeError\";\n    this.code = code;\n    this.cause = context?.cause;\n  }\n}\n","import {\n  getV1Agents,\n  getV1AgentsByAgentRef,\n  postV1AgentsByAgentRefWalletSendTransaction,\n  postV1AgentsByAgentRefWalletSignMessage,\n  postV1AgentsByAgentRefWalletSignTransaction,\n  postV1AgentsByAgentRefWalletSignTypedData,\n} from \"@lucid-dreams/sdk\";\n\nimport { AgentApiClientError } from \"./errors.js\";\nimport type {\n  FetchExecutor,\n  HttpTransport,\n} from \"./transport/http-transport.js\";\nimport type {\n  AgentApiSdkClient,\n  AgentDetail,\n  AgentListResponse,\n  AgentWalletSendTransactionRequest,\n  AgentWalletSignMessageRequest,\n  AgentWalletSignedResponse,\n  AgentWalletSignTransactionRequest,\n  AgentWalletTransactionResponse,\n  AgentWalletSignTypedDataRequest,\n} from \"./types.js\";\n\nexport interface AgentApiClientOptions {\n  transport: HttpTransport;\n  /**\n   * Optional base URL forwarded to the generated SDK.\n   */\n  baseUrl?: string;\n  /**\n   * Default headers attached to every request.\n   */\n  headers?: HeadersInit;\n  /**\n   * Default agent reference applied when a method doesn't provide one.\n   */\n  agentRef?: string;\n  /**\n   * Optional custom SDK client instance.\n   */\n  client?: AgentApiSdkClient;\n  /**\n   * Callback that resolves the current access token.\n   */\n  getAccessToken: () => Promise<string | null | undefined>;\n}\n\nexport interface AgentRequestOptions {\n  headers?: HeadersInit;\n  signal?: AbortSignal;\n  meta?: Record<string, unknown>;\n}\n\nexport interface AgentScopedRequestOptions extends AgentRequestOptions {\n  agentRef?: string;\n}\n\ntype AgentApiOperation =\n  | \"listAgents\"\n  | \"getAgent\"\n  | \"signMessage\"\n  | \"signTypedData\"\n  | \"signTransaction\"\n  | \"sendTransaction\";\n\nconst DEFAULT_ERROR_MESSAGES: Record<AgentApiOperation, string> = {\n  listAgents: \"Failed to list agents\",\n  getAgent: \"Failed to fetch agent details\",\n  signMessage: \"Failed to sign message with agent wallet\",\n  signTypedData: \"Failed to sign typed data with agent wallet\",\n  signTransaction: \"Failed to sign transaction with agent wallet\",\n  sendTransaction: \"Failed to send transaction with agent wallet\",\n};\n\ntype SuccessResult<TData> = {\n  data: TData;\n  error: undefined;\n  request: Request;\n  response: Response;\n};\n\ntype ErrorResult<TError> = {\n  data: undefined;\n  error: TError;\n  request: Request;\n  response: Response;\n};\n\ntype SdkResult<TData, TError> = SuccessResult<TData> | ErrorResult<TError>;\n\nexport class AgentApiClient {\n  private readonly client?: AgentApiSdkClient;\n  private readonly baseUrl?: string;\n  private readonly defaultHeaders?: HeadersInit;\n  private readonly defaultAgentRef?: string;\n  private readonly fetchImpl: FetchExecutor;\n  private readonly getAccessToken: () => Promise<string | null | undefined>;\n\n  constructor(options: AgentApiClientOptions) {\n    this.client = options.client;\n    this.baseUrl = options.baseUrl;\n    this.defaultHeaders = options.headers;\n    this.defaultAgentRef = options.agentRef;\n    this.fetchImpl = options.transport.asFetch();\n    this.getAccessToken = options.getAccessToken;\n  }\n\n  async listAgents(options?: AgentRequestOptions): Promise<AgentListResponse> {\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await getV1Agents({\n      ...sdkOptions,\n    });\n    return this.unwrapResult(result, { operation: \"listAgents\" });\n  }\n\n  async getAgent(options?: AgentScopedRequestOptions): Promise<AgentDetail> {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await getV1AgentsByAgentRef({\n      ...sdkOptions,\n      path: { agentRef },\n    });\n    return this.unwrapResult(result, { operation: \"getAgent\", agentRef });\n  }\n\n  async signMessage(\n    payload: AgentWalletSignMessageRequest,\n    options?: AgentScopedRequestOptions\n  ): Promise<AgentWalletSignedResponse> {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await postV1AgentsByAgentRefWalletSignMessage({\n      ...sdkOptions,\n      path: { agentRef },\n      body: payload,\n    });\n    return this.unwrapResult(result, { operation: \"signMessage\", agentRef });\n  }\n\n  async signTypedData(\n    payload: AgentWalletSignTypedDataRequest,\n    options?: AgentScopedRequestOptions\n  ): Promise<AgentWalletSignedResponse> {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await postV1AgentsByAgentRefWalletSignTypedData({\n      ...sdkOptions,\n      path: { agentRef },\n      body: payload,\n    });\n    return this.unwrapResult(result, {\n      operation: \"signTypedData\",\n      agentRef,\n    });\n  }\n\n  async signTransaction(\n    payload: AgentWalletSignTransactionRequest,\n    options?: AgentScopedRequestOptions\n  ): Promise<AgentWalletSignedResponse> {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await postV1AgentsByAgentRefWalletSignTransaction({\n      ...sdkOptions,\n      path: { agentRef },\n      body: payload,\n    });\n    return this.unwrapResult(result, {\n      operation: \"signTransaction\",\n      agentRef,\n    });\n  }\n\n  async sendTransaction(\n    payload: AgentWalletSendTransactionRequest,\n    options?: AgentScopedRequestOptions\n  ): Promise<AgentWalletTransactionResponse> {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n    const sdkOptions = await this.makeBaseOptions(options);\n    const result = await postV1AgentsByAgentRefWalletSendTransaction({\n      ...sdkOptions,\n      path: { agentRef },\n      body: payload,\n    });\n    return this.unwrapResult(result, {\n      operation: \"sendTransaction\",\n      agentRef,\n    });\n  }\n\n  private async makeBaseOptions(options?: AgentRequestOptions): Promise<{\n    client?: AgentApiSdkClient;\n    baseUrl?: string;\n    fetch: FetchExecutor;\n    headers: Record<string, string>;\n    signal?: AbortSignal;\n    meta?: Record<string, unknown>;\n    responseStyle: \"fields\";\n    throwOnError: false;\n  }> {\n    const headers = await this.buildHeaders(options?.headers);\n    return {\n      client: this.client,\n      baseUrl: this.baseUrl,\n      fetch: this.fetchImpl,\n      headers,\n      signal: options?.signal,\n      meta: options?.meta,\n      responseStyle: \"fields\",\n      throwOnError: false,\n    };\n  }\n\n  private async buildHeaders(\n    overrides?: HeadersInit\n  ): Promise<Record<string, string>> {\n    const token = await this.getAccessToken();\n    if (!token) {\n      throw new AgentApiClientError(\n        \"AccessTokenRequired\",\n        \"Access token is required for agent API requests\"\n      );\n    }\n\n    const headers = new Headers(this.defaultHeaders);\n    const normalized = token.trim();\n    const bearerHeader = /^bearer\\s/i.test(normalized)\n      ? normalized\n      : `Bearer ${normalized}`;\n    headers.set(\"authorization\", bearerHeader);\n\n    if (overrides) {\n      new Headers(overrides).forEach((value, key) => {\n        headers.set(key, value);\n      });\n    }\n\n    return Object.fromEntries(headers.entries());\n  }\n\n  private resolveAgentRef(agentRef?: string): string {\n    const value = agentRef ?? this.defaultAgentRef;\n    if (!value) {\n      throw new AgentApiClientError(\n        \"AgentRefRequired\",\n        \"agentRef must be provided on the client or per request\"\n      );\n    }\n    return value;\n  }\n\n  private unwrapResult<TData, TError>(\n    result: SdkResult<TData, TError>,\n    context: { operation: AgentApiOperation; agentRef?: string }\n  ): TData {\n    if (\"error\" in result && result.error !== undefined) {\n      throw new AgentApiClientError(\n        \"RequestFailed\",\n        DEFAULT_ERROR_MESSAGES[context.operation],\n        {\n          agentRef: context.agentRef,\n          status: result.response.status,\n          details: result.error,\n        }\n      );\n    }\n\n    if (result.data === undefined) {\n      throw new AgentApiClientError(\n        \"EmptyResponse\",\n        `Received empty response for ${context.operation}`,\n        {\n          agentRef: context.agentRef,\n          status: result.response.status,\n        }\n      );\n    }\n\n    return result.data;\n  }\n}\n","import {\n  postV1AuthAgentsByAgentRefChallenge,\n  postV1AuthAgentsByAgentRefExchange,\n  postV1AuthAgentsByAgentRefRefresh,\n} from \"@lucid-dreams/sdk\";\n\nimport { AgentAuthClientError } from \"./errors.js\";\nimport type { FetchExecutor } from \"./transport/http-transport.js\";\nimport type {\n  AgentAuthClientOptions,\n  AgentAuthRequestOptions,\n  AgentAuthSdkClient,\n  AgentChallengeRequest,\n  AgentChallengeResponse,\n  AgentExchangeRequest,\n  AgentExchangeResponse,\n  AgentRefreshRequest,\n} from \"./types.js\";\n\ntype AgentAuthPhase = \"challenge\" | \"exchange\" | \"refresh\";\n\ntype RequestConfig = {\n  agentRef: string;\n  headers?: HeadersInit;\n  signal?: AbortSignal;\n  meta?: Record<string, unknown>;\n};\n\nconst DEFAULT_ERROR_MESSAGES: Record<AgentAuthPhase, string> = {\n  challenge: \"Failed to issue agent challenge\",\n  exchange: \"Failed to exchange agent challenge\",\n  refresh: \"Failed to refresh agent access token\",\n};\n\ntype SuccessResult<TData> = {\n  data: TData;\n  error: undefined;\n  request: Request;\n  response: Response;\n};\n\ntype ErrorResult<TError> = {\n  data: undefined;\n  error: TError;\n  request: Request;\n  response: Response;\n};\n\ntype SdkResult<TData, TError> = SuccessResult<TData> | ErrorResult<TError>;\n\nexport class AgentAuthClient {\n  private readonly client?: AgentAuthSdkClient;\n  private readonly baseUrl?: string;\n  private readonly fetchImpl?: FetchExecutor;\n  private readonly defaultAgentRef?: string;\n  private readonly defaultHeaders?: HeadersInit;\n\n  constructor(options: AgentAuthClientOptions) {\n    const { agentRef, client, baseUrl, fetch, headers } = options;\n\n    if (!client && !baseUrl) {\n      throw new AgentAuthClientError(\n        \"BaseUrlRequired\",\n        \"baseUrl is required when a client instance is not provided\"\n      );\n    }\n\n    this.client = client;\n    this.baseUrl = baseUrl;\n    this.fetchImpl = fetch;\n    this.defaultAgentRef = agentRef;\n    this.defaultHeaders = headers;\n  }\n\n  async requestChallenge(\n    payload: AgentChallengeRequest,\n    options?: AgentAuthRequestOptions\n  ): Promise<AgentChallengeResponse> {\n    const config = this.buildRequestConfig(options);\n\n    try {\n      const result = await postV1AuthAgentsByAgentRefChallenge({\n        ...this.makeRequestOptions(config),\n        body: payload,\n        path: { agentRef: config.agentRef },\n      });\n\n      return this.unwrapResult(result, {\n        phase: \"challenge\",\n        agentRef: config.agentRef,\n      });\n    } catch (error) {\n      throw this.wrapError(\"challenge\", error, config.agentRef);\n    }\n  }\n\n  async exchange(\n    payload: AgentExchangeRequest,\n    options?: AgentAuthRequestOptions\n  ): Promise<AgentExchangeResponse> {\n    const config = this.buildRequestConfig(options);\n\n    try {\n      const result = await postV1AuthAgentsByAgentRefExchange({\n        ...this.makeRequestOptions(config),\n        body: payload,\n        path: { agentRef: config.agentRef },\n      });\n\n      return this.unwrapResult(result, {\n        phase: \"exchange\",\n        agentRef: config.agentRef,\n      });\n    } catch (error) {\n      throw this.wrapError(\"exchange\", error, config.agentRef);\n    }\n  }\n\n  async refresh(\n    payload: AgentRefreshRequest,\n    options?: AgentAuthRequestOptions\n  ): Promise<AgentExchangeResponse> {\n    const config = this.buildRequestConfig(options);\n\n    try {\n      const result = await postV1AuthAgentsByAgentRefRefresh({\n        ...this.makeRequestOptions(config),\n        body: payload,\n        path: { agentRef: config.agentRef },\n      });\n\n      return this.unwrapResult(result, {\n        phase: \"refresh\",\n        agentRef: config.agentRef,\n      });\n    } catch (error) {\n      throw this.wrapError(\"refresh\", error, config.agentRef);\n    }\n  }\n\n  private buildRequestConfig(options?: AgentAuthRequestOptions): RequestConfig {\n    const agentRef = this.resolveAgentRef(options?.agentRef);\n\n    return {\n      agentRef,\n      headers: this.mergeHeaders(options?.headers),\n      signal: options?.signal,\n      meta: options?.meta,\n    };\n  }\n\n  private resolveAgentRef(agentRef?: string): string {\n    const value = agentRef ?? this.defaultAgentRef;\n    if (!value) {\n      throw new AgentAuthClientError(\n        \"AgentRefRequired\",\n        \"agentRef must be provided on the client or per request\"\n      );\n    }\n\n    return value;\n  }\n\n  private mergeHeaders(overrides?: HeadersInit): HeadersInit | undefined {\n    if (!this.defaultHeaders && !overrides) {\n      return undefined;\n    }\n\n    const merged = new Headers();\n\n    if (this.defaultHeaders) {\n      new Headers(this.defaultHeaders).forEach((value, key) => {\n        merged.set(key, value);\n      });\n    }\n\n    if (overrides) {\n      new Headers(overrides).forEach((value, key) => {\n        merged.set(key, value);\n      });\n    }\n\n    return Object.fromEntries(merged.entries());\n  }\n\n  private wrapError(\n    phase: AgentAuthPhase,\n    error: unknown,\n    agentRef: string\n  ): AgentAuthClientError {\n    if (error instanceof AgentAuthClientError) {\n      return error;\n    }\n\n    return new AgentAuthClientError(\n      \"RequestFailed\",\n      DEFAULT_ERROR_MESSAGES[phase],\n      {\n        agentRef,\n        cause: error,\n      }\n    );\n  }\n\n  private makeRequestOptions(config: RequestConfig): {\n    client?: AgentAuthSdkClient;\n    baseUrl?: string;\n    fetch?: FetchExecutor;\n    headers?: HeadersInit;\n    signal?: AbortSignal;\n    meta?: Record<string, unknown>;\n    responseStyle: \"fields\";\n    throwOnError: false;\n  } {\n    return {\n      client: this.client,\n      baseUrl: this.baseUrl,\n      fetch: this.fetchImpl,\n      headers: config.headers,\n      signal: config.signal,\n      meta: config.meta,\n      responseStyle: \"fields\",\n      throwOnError: false,\n    };\n  }\n\n  private unwrapResult<TData, TError>(\n    result: SdkResult<TData, TError>,\n    context: { phase: AgentAuthPhase; agentRef: string }\n  ): TData {\n    if (\"error\" in result && result.error !== undefined) {\n      throw new AgentAuthClientError(\n        \"RequestFailed\",\n        DEFAULT_ERROR_MESSAGES[context.phase],\n        {\n          agentRef: context.agentRef,\n          cause: {\n            error: result.error,\n            response: result.response,\n            request: result.request,\n          },\n        }\n      );\n    }\n\n    if (result.data === undefined) {\n      throw new AgentAuthClientError(\n        \"EmptyResponse\",\n        `Empty ${context.phase} response`,\n        {\n          agentRef: context.agentRef,\n          cause: {\n            response: result.response,\n            request: result.request,\n          },\n        }\n      );\n    }\n\n    return result.data;\n  }\n}\n","import { readFile } from \"node:fs/promises\";\nimport { isAbsolute, resolve } from \"node:path\";\n\nimport { AgentRuntimeError } from \"./errors.js\";\nimport type { AgentRuntimeConfig } from \"./types.js\";\n\nconst DEFAULT_CONFIG_FILENAME = \".lucid-agent.json\";\nconst DEFAULT_API_BASE_URL = \"https://api.lucid.run\";\n\nconst ENV_PREFIX = \"LUCID_AGENT_\";\n\nconst ENV_BASE_URL = `${ENV_PREFIX}BASE_URL`;\nconst ENV_AGENT_REF = `${ENV_PREFIX}AGENT_REF`;\nconst ENV_AGENT_ID = `${ENV_PREFIX}AGENT_ID`;\nconst ENV_CREDENTIAL_ID = `${ENV_PREFIX}CREDENTIAL_ID`;\nconst ENV_REFRESH_TOKEN = `${ENV_PREFIX}REFRESH_TOKEN`;\nconst ENV_SCOPES = `${ENV_PREFIX}SCOPES`;\nconst ENV_CONFIG_PATH = `${ENV_PREFIX}CONFIG_PATH`;\n\nexport interface AgentConfigFile {\n  agentId?: string;\n  agentRef?: string;\n  credentialId?: string;\n  refreshToken?: string;\n  scopes?: string[] | null;\n  apiBaseUrl?: string;\n  [key: string]: unknown;\n}\n\nexport interface AgentConfigOverrides {\n  baseUrl?: string;\n  agentRef?: string;\n  credentialId?: string;\n  refreshToken?: string;\n  scopes?: string[];\n}\n\nexport interface ConfigLoaderOptions {\n  /**\n   * Path to the config file. Defaults to `.lucid-agent.json` in the current working directory.\n   */\n  path?: string;\n  /**\n   * Working directory used when resolving relative config paths.\n   */\n  cwd?: string;\n  /**\n   * Environment variables used for overrides. Defaults to `process.env`.\n   */\n  env?: Record<string, string | undefined>;\n  /**\n   * Runtime overrides applied last.\n   */\n  overrides?: AgentConfigOverrides;\n  /**\n   * Custom file reader for testing.\n   */\n  readFile?: (path: string) => Promise<string>;\n}\n\nexport interface LoadedAgentRuntimeConfig {\n  config: AgentRuntimeConfig;\n  /**\n   * Path the loader attempted to read. `undefined` when running env-only mode.\n   */\n  sourcePath?: string;\n  /**\n   * Raw parsed configuration file (if one existed).\n   */\n  fileConfig?: AgentConfigFile | null;\n}\n\nexport async function loadAgentRuntimeConfig(\n  options: ConfigLoaderOptions = {},\n): Promise<LoadedAgentRuntimeConfig> {\n  const env = options.env ?? process.env;\n  const cwd = options.cwd ?? process.cwd();\n\n  const explicitPath = options.path ?? env[ENV_CONFIG_PATH];\n  const configPath = explicitPath ?? DEFAULT_CONFIG_FILENAME;\n  const resolvedPath = isAbsolute(configPath)\n    ? configPath\n    : resolve(cwd, configPath);\n\n  const fileConfig = await readConfigFile(\n    resolvedPath,\n    options.readFile ?? defaultReadFile,\n  );\n\n  const baseUrl =\n    options.overrides?.baseUrl ??\n    env[ENV_BASE_URL] ??\n    fileConfig?.apiBaseUrl ??\n    DEFAULT_API_BASE_URL;\n\n  const agentRef =\n    options.overrides?.agentRef ??\n    env[ENV_AGENT_REF] ??\n    env[ENV_AGENT_ID] ??\n    fileConfig?.agentRef ??\n    fileConfig?.agentId;\n\n  const credentialId =\n    options.overrides?.credentialId ??\n    env[ENV_CREDENTIAL_ID] ??\n    fileConfig?.credentialId;\n\n  const refreshToken =\n    options.overrides?.refreshToken ??\n    env[ENV_REFRESH_TOKEN] ??\n    fileConfig?.refreshToken;\n\n  const scopes =\n    normalizeScopes(options.overrides?.scopes) ??\n    normalizeScopes(env[ENV_SCOPES]) ??\n    normalizeScopes(fileConfig?.scopes);\n\n  validateRequired(\"agentRef\", agentRef, resolvedPath);\n  validateRequired(\"credentialId\", credentialId, resolvedPath);\n\n  const config: AgentRuntimeConfig = {\n    baseUrl,\n    agentRef,\n    credentialId,\n    refreshToken: refreshToken || undefined,\n    scopes: scopes ?? undefined,\n  };\n\n  return {\n    config,\n    sourcePath: fileConfig ? resolvedPath : undefined,\n    fileConfig,\n  };\n}\n\nconst defaultReadFile = (path: string) => readFile(path, \"utf8\");\n\nasync function readConfigFile(\n  path: string,\n  reader: (path: string) => Promise<string>,\n): Promise<AgentConfigFile | null> {\n  try {\n    const contents = await reader(path);\n    if (!contents.trim()) {\n      return {};\n    }\n\n    try {\n      const parsed = JSON.parse(contents) as AgentConfigFile;\n      return parsed;\n    } catch (error) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        `Failed to parse config file at ${path}`,\n        { cause: error },\n      );\n    }\n  } catch (error) {\n    if (\n      isNodeError(error) &&\n      (error.code === \"ENOENT\" || error.code === \"ENOTDIR\")\n    ) {\n      return null;\n    }\n\n    throw new AgentRuntimeError(\n      \"ConfigurationError\",\n      `Unable to read config file at ${path}`,\n      { cause: error },\n    );\n  }\n}\n\nfunction normalizeScopes(\n  value: unknown,\n): string[] | undefined {\n  if (!value) {\n    return undefined;\n  }\n\n  if (Array.isArray(value)) {\n    const scopes = value\n      .filter((scope): scope is string => typeof scope === \"string\")\n      .map((scope) => scope.trim())\n      .filter(Boolean);\n    return scopes.length ? scopes : undefined;\n  }\n\n  if (typeof value === \"string\") {\n    const trimmed = value.trim();\n    if (!trimmed) {\n      return undefined;\n    }\n\n    try {\n      const parsed = JSON.parse(trimmed);\n      if (Array.isArray(parsed)) {\n        return normalizeScopes(parsed);\n      }\n    } catch {\n      // fall through to comma-separated parsing\n    }\n\n    const scopes = trimmed\n      .split(\",\")\n      .map((scope) => scope.trim())\n      .filter(Boolean);\n    return scopes.length ? scopes : undefined;\n  }\n\n  return undefined;\n}\n\nfunction validateRequired(\n  field: string,\n  value: string | undefined,\n  path: string,\n): asserts value is string {\n  if (!value) {\n    throw new AgentRuntimeError(\n      \"ConfigurationError\",\n      `Missing required configuration value \"${field}\". Checked ${path} and environment overrides.`,\n    );\n  }\n}\n\nfunction isNodeError(error: unknown): error is NodeJS.ErrnoException {\n  return typeof error === \"object\" && error !== null && \"code\" in error;\n}\n\nexport {\n  DEFAULT_API_BASE_URL,\n  DEFAULT_CONFIG_FILENAME,\n  ENV_AGENT_ID,\n  ENV_AGENT_REF,\n  ENV_BASE_URL,\n  ENV_CREDENTIAL_ID,\n  ENV_REFRESH_TOKEN,\n  ENV_SCOPES,\n  ENV_CONFIG_PATH,\n};\n","import type { StorageAdapter } from \"./types.js\";\n\nexport class MemoryStorageAdapter<T = unknown> implements StorageAdapter<T> {\n  private readonly store = new Map<string, T>();\n\n  async get(key: string): Promise<T | null> {\n    return this.store.has(key) ? (this.store.get(key) as T) : null;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    this.store.set(key, value);\n  }\n\n  async delete(key: string): Promise<void> {\n    this.store.delete(key);\n  }\n}\n\nexport const createMemoryStorageAdapter = <T = unknown>() =>\n  new MemoryStorageAdapter<T>();\n","import { TokenManagerError } from \"./errors.js\";\nimport { MemoryStorageAdapter } from \"./storage/memory-adapter.js\";\nimport type { StorageAdapter } from \"./storage/types.js\";\n\nexport interface TokenBundleInput {\n  accessToken: string;\n  accessTokenExpiresAt: Date | string;\n  refreshToken: string;\n  refreshTokenExpiresAt: Date | string;\n  revocationNonce?: string | null;\n  scopes?: string[] | null;\n}\n\nexport interface TokenSnapshot {\n  accessToken: string;\n  accessTokenExpiresAt: Date;\n  refreshToken: string;\n  refreshTokenExpiresAt: Date;\n  revocationNonce?: string;\n  scopes?: string[];\n}\n\nexport interface CachedAccessToken {\n  token: string;\n  expiresAt: Date;\n  scopes?: string[];\n  refreshToken: string;\n  refreshTokenExpiresAt: Date;\n  revocationNonce?: string;\n}\n\nexport interface TokenManagerOptions {\n  storage?: StorageAdapter<string>;\n  storageKey?: string;\n  refreshLeadTimeMs?: number;\n  now?: () => number;\n}\n\nexport interface CancelHandle {\n  cancel(): void;\n}\n\ntype NormalizedTokenBundle = TokenSnapshot;\n\ntype SerializedTokenBundle = {\n  version: 1;\n  value: {\n    accessToken: string;\n    accessTokenExpiresAt: string;\n    refreshToken: string;\n    refreshTokenExpiresAt: string;\n    revocationNonce?: string;\n    scopes?: string[];\n  };\n};\n\nconst DEFAULT_STORAGE_KEY = \"agent-auth:token-bundle\";\nconst DEFAULT_REFRESH_LEAD_TIME_MS = 30_000;\n\nconst normalizeDate = (value: Date | string): Date =>\n  value instanceof Date ? value : new Date(value);\n\nconst cloneSnapshot = (snapshot: NormalizedTokenBundle): TokenSnapshot => ({\n  accessToken: snapshot.accessToken,\n  accessTokenExpiresAt: new Date(snapshot.accessTokenExpiresAt.getTime()),\n  refreshToken: snapshot.refreshToken,\n  refreshTokenExpiresAt: new Date(snapshot.refreshTokenExpiresAt.getTime()),\n  revocationNonce: snapshot.revocationNonce,\n  scopes: snapshot.scopes ? [...snapshot.scopes] : undefined,\n});\n\nconst serializeSnapshot = (\n  snapshot: NormalizedTokenBundle,\n): SerializedTokenBundle => ({\n  version: 1,\n  value: {\n    accessToken: snapshot.accessToken,\n    accessTokenExpiresAt: snapshot.accessTokenExpiresAt.toISOString(),\n    refreshToken: snapshot.refreshToken,\n    refreshTokenExpiresAt: snapshot.refreshTokenExpiresAt.toISOString(),\n    revocationNonce: snapshot.revocationNonce,\n    scopes: snapshot.scopes ? [...snapshot.scopes] : undefined,\n  },\n});\n\nconst deserializeSnapshot = (\n  serialized: SerializedTokenBundle,\n): NormalizedTokenBundle => ({\n  accessToken: serialized.value.accessToken,\n  accessTokenExpiresAt: normalizeDate(serialized.value.accessTokenExpiresAt),\n  refreshToken: serialized.value.refreshToken,\n  refreshTokenExpiresAt: normalizeDate(\n    serialized.value.refreshTokenExpiresAt,\n  ),\n  revocationNonce: serialized.value.revocationNonce ?? undefined,\n  scopes: serialized.value.scopes ? [...serialized.value.scopes] : undefined,\n});\n\nexport class TokenManager {\n  private readonly storage: StorageAdapter<string>;\n  private readonly storageKey: string;\n  private readonly refreshLeadTimeMs: number;\n  private readonly now: () => number;\n\n  private tokens: NormalizedTokenBundle | null = null;\n  private refreshTimer: ReturnType<typeof setTimeout> | null = null;\n  private refreshPromise: Promise<unknown> | null = null;\n\n  constructor(options: TokenManagerOptions = {}) {\n    this.storage = options.storage ?? new MemoryStorageAdapter<string>();\n    this.storageKey = options.storageKey ?? DEFAULT_STORAGE_KEY;\n    this.refreshLeadTimeMs =\n      options.refreshLeadTimeMs ?? DEFAULT_REFRESH_LEAD_TIME_MS;\n    this.now = options.now ?? (() => Date.now());\n  }\n\n  async hydrate(): Promise<TokenSnapshot | null> {\n    const raw = await this.storage.get(this.storageKey);\n    if (!raw) {\n      return null;\n    }\n\n    let parsed: SerializedTokenBundle;\n    try {\n      parsed = JSON.parse(raw) as SerializedTokenBundle;\n    } catch (error) {\n      throw new TokenManagerError(\n        \"StorageFailure\",\n        \"Failed to parse stored token bundle\",\n        { cause: error },\n      );\n    }\n\n    if (parsed.version !== 1) {\n      throw new TokenManagerError(\n        \"StorageFailure\",\n        `Unsupported token bundle version: ${parsed.version}`,\n      );\n    }\n\n    this.tokens = deserializeSnapshot(parsed);\n    return cloneSnapshot(this.tokens);\n  }\n\n  getSnapshot(): TokenSnapshot | null {\n    return this.tokens ? cloneSnapshot(this.tokens) : null;\n  }\n\n  getCachedAccessToken(): CachedAccessToken | null {\n    if (!this.tokens) {\n      return null;\n    }\n\n    return {\n      token: this.tokens.accessToken,\n      expiresAt: new Date(this.tokens.accessTokenExpiresAt.getTime()),\n      scopes: this.tokens.scopes ? [...this.tokens.scopes] : undefined,\n      refreshToken: this.tokens.refreshToken,\n      refreshTokenExpiresAt: new Date(\n        this.tokens.refreshTokenExpiresAt.getTime(),\n      ),\n      revocationNonce: this.tokens.revocationNonce,\n    };\n  }\n\n  async setTokens(bundle: TokenBundleInput): Promise<TokenSnapshot> {\n    const normalized = this.normalizeBundle(bundle);\n    this.tokens = normalized;\n\n    const serialized = serializeSnapshot(normalized);\n    await this.storage.set(this.storageKey, JSON.stringify(serialized));\n\n    return cloneSnapshot(normalized);\n  }\n\n  async clear(): Promise<void> {\n    this.tokens = null;\n    this.clearScheduledRefresh();\n    await this.storage.delete(this.storageKey);\n  }\n\n  scheduleRefresh(\n    trigger: () => Promise<TokenBundleInput>,\n  ): CancelHandle {\n    if (!this.tokens) {\n      throw new TokenManagerError(\n        \"TokensUnavailable\",\n        \"Cannot schedule refresh without cached tokens\",\n      );\n    }\n\n    this.clearScheduledRefresh();\n\n    const targetTime =\n      this.tokens.accessTokenExpiresAt.getTime() - this.refreshLeadTimeMs;\n    const delay = Math.max(0, targetTime - this.now());\n\n    let cancelled = false;\n\n    const run = () => {\n      void this.withRefreshLock(async () => {\n        if (cancelled) {\n          return;\n        }\n        const next = await trigger();\n        await this.setTokens(next);\n      }).catch(() => {\n        // swallow error so the timer promise doesn't crash the process.\n      });\n    };\n\n    this.refreshTimer = setTimeout(run, delay);\n\n    return {\n      cancel: () => {\n        cancelled = true;\n        this.clearScheduledRefresh();\n      },\n    };\n  }\n\n  async withRefreshLock<T>(fn: () => Promise<T>): Promise<T> {\n    if (this.refreshPromise) {\n      return this.refreshPromise as Promise<T>;\n    }\n\n    const promise = (async () => {\n      try {\n        return await fn();\n      } finally {\n        this.refreshPromise = null;\n      }\n    })();\n\n    this.refreshPromise = promise;\n    return promise;\n  }\n\n  private normalizeBundle(bundle: TokenBundleInput): NormalizedTokenBundle {\n    const accessTokenExpiresAt = normalizeDate(bundle.accessTokenExpiresAt);\n    const refreshTokenExpiresAt = normalizeDate(bundle.refreshTokenExpiresAt);\n\n    return {\n      accessToken: bundle.accessToken,\n      accessTokenExpiresAt,\n      refreshToken: bundle.refreshToken,\n      refreshTokenExpiresAt,\n      revocationNonce: bundle.revocationNonce ?? undefined,\n      scopes: bundle.scopes ? [...bundle.scopes] : undefined,\n    };\n  }\n\n  private clearScheduledRefresh(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n}\n","export type HttpMethod =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"PATCH\"\n  | \"DELETE\"\n  | \"HEAD\"\n  | \"OPTIONS\";\n\nexport type HttpResponseType =\n  | \"json\"\n  | \"text\"\n  | \"arrayBuffer\"\n  | \"blob\"\n  | \"stream\"\n  | \"response\";\n\nexport type QueryParameters = Record<\n  string,\n  string | number | boolean | null | undefined\n>;\n\ntype FetchPreconnect = typeof fetch extends { preconnect: infer T }\n  ? T\n  : (input: RequestInfo | URL, init?: RequestInit) => Promise<void>;\n\nexport type FetchExecutor = ((input: RequestInfo | URL, init?: RequestInit) => Promise<Response>) & {\n  /**\n   * Bun extends the global fetch with a preconnect helper. The generated SDK expects it to exist,\n   * so transport implementations must expose a compatible surface.\n   */\n  preconnect: FetchPreconnect;\n};\n\nexport interface HttpRequestOptions<TResponse = unknown> {\n  /**\n   * Destination URL. Relative paths require a transport configured with a base URL.\n   */\n  url: string | URL;\n  method?: HttpMethod;\n  headers?: HeadersInit;\n  /**\n   * Raw body to send with the request.\n   */\n  body?: BodyInit | null;\n  /**\n   * Structured payload that will be JSON-encoded automatically.\n   */\n  json?: unknown;\n  /**\n   * Query parameters appended to the resolved URL.\n   */\n  query?: QueryParameters;\n  /**\n   * Abort signal provided by the caller.\n   */\n  signal?: AbortSignal;\n  /**\n   * Override response parsing strategy. Defaults to `json`.\n   */\n  parseAs?: HttpResponseType;\n  /**\n   * Maximum time in milliseconds before the transport aborts the request.\n   */\n  timeoutMs?: number;\n  /**\n   * Prevent the transport from throwing on non-2xx responses.\n   */\n  throwOnError?: boolean;\n}\n\nexport interface HttpResponse<TData = unknown> {\n  status: number;\n  headers: Headers;\n  data: TData;\n  raw: Response;\n  url: string;\n}\n\nexport interface HttpTransport {\n  request<TResponse = unknown>(\n    options: HttpRequestOptions<TResponse>,\n  ): Promise<HttpResponse<TResponse>>;\n  /**\n   * Returns a fetch-compatible function that honours the transport configuration.\n  */\n  asFetch(): FetchExecutor;\n}\n\nexport type HttpTransportErrorCode =\n  | \"ConfigurationError\"\n  | \"NetworkError\"\n  | \"TimeoutError\"\n  | \"AbortError\"\n  | \"HttpError\"\n  | \"ParseError\";\n\nexport interface HttpTransportErrorOptions {\n  code: HttpTransportErrorCode;\n  url: string;\n  status?: number;\n  response?: Response;\n  data?: unknown;\n  cause?: unknown;\n}\n\nexport class HttpTransportError extends Error {\n  readonly code: HttpTransportErrorCode;\n  readonly url: string;\n  readonly status?: number;\n  readonly response?: Response;\n  readonly data?: unknown;\n  override readonly cause?: unknown;\n\n  constructor(message: string, options: HttpTransportErrorOptions) {\n    super(message);\n    this.name = \"HttpTransportError\";\n    this.code = options.code;\n    this.url = options.url;\n    this.status = options.status;\n    this.response = options.response;\n    this.data = options.data;\n    this.cause = options.cause;\n  }\n}\n\nexport const isHttpTransportError = (\n  error: unknown,\n): error is HttpTransportError => error instanceof HttpTransportError;\n","import {\n  HttpTransportError,\n  type HttpMethod,\n  type HttpRequestOptions,\n  type HttpResponse,\n  type HttpResponseType,\n  type HttpTransport,\n  type QueryParameters,\n  type FetchExecutor,\n} from \"./http-transport.js\";\n\nexport interface FetchTransportOptions {\n  baseUrl?: string;\n  defaultHeaders?: HeadersInit;\n  defaultTimeoutMs?: number;\n  fetch?: FetchExecutor;\n}\n\ninterface AbortBundle {\n  signal?: AbortSignal;\n  cleanup?: () => void;\n  timedOut(): boolean;\n}\n\nconst ABSOLUTE_URL_PATTERN = /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/;\nconst DEFAULT_METHOD: HttpMethod = \"GET\";\nconst DEFAULT_RESPONSE_TYPE: HttpResponseType = \"json\";\n\nconst resolveUrl = (\n  baseUrl: string | undefined,\n  input: string | URL,\n  query?: QueryParameters,\n): string => {\n  let target: URL | null = null;\n\n  if (input instanceof URL) {\n    target = new URL(input.toString());\n  } else if (ABSOLUTE_URL_PATTERN.test(input)) {\n    target = new URL(input);\n  } else if (baseUrl) {\n    target = new URL(input, baseUrl);\n  }\n\n  if (!target) {\n    const raw =\n      typeof input === \"string\" ? input : input.toString();\n    throw new HttpTransportError(\n      \"Failed to resolve request URL. Provide an absolute URL or configure a baseUrl.\",\n      {\n        code: \"ConfigurationError\",\n        url: raw,\n      },\n    );\n  }\n\n  if (query) {\n    const params = new URLSearchParams(target.search);\n    for (const [key, value] of Object.entries(query)) {\n      if (value === undefined || value === null) {\n        continue;\n      }\n      const normalized =\n        typeof value === \"boolean\" ? (value ? \"true\" : \"false\") : String(value);\n      params.set(key, normalized);\n    }\n    target.search = params.toString();\n  }\n\n  return target.toString();\n};\n\nconst mergeHeaders = (...sources: (HeadersInit | undefined)[]): Headers => {\n  const result = new Headers();\n  for (const source of sources) {\n    if (!source) {\n      continue;\n    }\n    const headers = new Headers(source);\n    headers.forEach((value, key) => {\n      result.set(key, value);\n    });\n  }\n  return result;\n};\n\nconst createAbortBundle = (\n  signal?: AbortSignal,\n  timeoutMs?: number,\n): AbortBundle => {\n  if (timeoutMs === undefined || timeoutMs === null) {\n    return {\n      signal,\n      cleanup: undefined,\n      timedOut: () => false,\n    };\n  }\n\n  const controller = new AbortController();\n  let timedOut = false;\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let abortHandler: (() => void) | undefined;\n\n  if (signal) {\n    if (signal.aborted) {\n      controller.abort(getSignalReason(signal));\n    } else {\n      abortHandler = () => {\n        if (!controller.signal.aborted) {\n          controller.abort(getSignalReason(signal));\n        }\n      };\n      signal.addEventListener(\"abort\", abortHandler, { once: true });\n    }\n  }\n\n  timeoutId = setTimeout(() => {\n    if (!controller.signal.aborted) {\n      timedOut = true;\n      controller.abort(new Error(\"Request timed out\"));\n    }\n  }, timeoutMs);\n\n  const cleanup = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    if (signal && abortHandler) {\n      signal.removeEventListener(\"abort\", abortHandler);\n    }\n  };\n\n  return {\n    signal: controller.signal,\n    cleanup,\n    timedOut: () => timedOut,\n  };\n};\n\nconst getSignalReason = (signal: AbortSignal): unknown => {\n  if (\"reason\" in signal) {\n    return (signal as { reason?: unknown }).reason;\n  }\n  return undefined;\n};\n\nconst isAbortError = (error: unknown): boolean => {\n  if (typeof DOMException !== \"undefined\" && error instanceof DOMException) {\n    return error.name === \"AbortError\";\n  }\n  return (\n    error instanceof Error &&\n    error.name === \"AbortError\"\n  );\n};\n\nconst parseJson = async <T>(\n  response: Response,\n  url: string,\n): Promise<T> => {\n  if (response.status === 204 || response.status === 205) {\n    return null as T;\n  }\n\n  const contentLength = response.headers.get(\"content-length\");\n  if (contentLength === \"0\") {\n    return null as T;\n  }\n\n  const text = await response.text();\n  if (!text) {\n    return null as T;\n  }\n\n  try {\n    return JSON.parse(text) as T;\n  } catch (error) {\n    throw new HttpTransportError(\"Failed to parse JSON response\", {\n      code: \"ParseError\",\n      url,\n      response,\n      cause: error,\n    });\n  }\n};\n\nconst parseResponse = async <T>(\n  response: Response,\n  type: HttpResponseType,\n  url: string,\n): Promise<T> => {\n  switch (type) {\n    case \"json\":\n      return parseJson<T>(response, url);\n    case \"text\":\n      return (await response.text()) as T;\n    case \"arrayBuffer\":\n      return (await response.arrayBuffer()) as T;\n    case \"blob\":\n      return (await response.blob()) as T;\n    case \"stream\":\n      return (response.body ?? null) as T;\n    case \"response\":\n      return response as unknown as T;\n    default: {\n      const exhaustive: never = type;\n      throw new Error(`Unsupported response type: ${exhaustive}`);\n    }\n  }\n};\n\nexport const createFetchTransport = (\n  options: FetchTransportOptions = {},\n): HttpTransport => {\n  const fetchImpl =\n    options.fetch ?? (globalThis.fetch as FetchExecutor | undefined);\n\n  if (typeof fetchImpl !== \"function\") {\n    throw new Error(\n      \"Unable to create fetch transport: no fetch implementation provided.\",\n    );\n  }\n\n  const baseUrl = options.baseUrl;\n  const defaultHeaders = options.defaultHeaders;\n  const defaultTimeoutMs = options.defaultTimeoutMs;\n\n  const request = async <T>(\n    requestOptions: HttpRequestOptions<T>,\n  ): Promise<HttpResponse<T>> => {\n    const method = (requestOptions.method ?? DEFAULT_METHOD).toUpperCase() as HttpMethod;\n\n    if (\n      requestOptions.json !== undefined &&\n      requestOptions.body !== undefined &&\n      requestOptions.body !== null\n    ) {\n      const raw =\n        typeof requestOptions.url === \"string\"\n          ? requestOptions.url\n          : requestOptions.url.toString();\n      throw new HttpTransportError(\n        \"Provide either `json` or `body` when issuing a request.\",\n        {\n          code: \"ConfigurationError\",\n          url: raw,\n        },\n      );\n    }\n\n    const resolvedUrl = resolveUrl(\n      baseUrl,\n      requestOptions.url,\n      requestOptions.query,\n    );\n    const headers = mergeHeaders(defaultHeaders, requestOptions.headers);\n\n    let requestBody: BodyInit | undefined;\n    if (requestOptions.body !== undefined && requestOptions.body !== null) {\n      requestBody = requestOptions.body;\n    }\n\n    if (requestOptions.json !== undefined) {\n      requestBody = JSON.stringify(requestOptions.json);\n      if (!headers.has(\"content-type\")) {\n        headers.set(\"content-type\", \"application/json\");\n      }\n    }\n\n    const timeoutMs =\n      requestOptions.timeoutMs ?? defaultTimeoutMs;\n    const abortBundle = createAbortBundle(\n      requestOptions.signal,\n      timeoutMs,\n    );\n\n    const fetchInit: RequestInit = {\n      method,\n      headers,\n      signal: abortBundle.signal ?? requestOptions.signal,\n    };\n\n    if (requestBody !== undefined) {\n      fetchInit.body = requestBody;\n    }\n\n    const parseAs = requestOptions.parseAs ?? DEFAULT_RESPONSE_TYPE;\n    const throwOnError = requestOptions.throwOnError ?? true;\n\n    let response: Response | undefined;\n\n    try {\n      response = await fetchImpl(resolvedUrl, fetchInit);\n      const responseUrl = response.url || resolvedUrl;\n      const parseTarget =\n        parseAs === \"response\" || parseAs === \"stream\"\n          ? response\n          : response.clone();\n      const data = await parseResponse<T>(parseTarget, parseAs, responseUrl);\n\n      if (!response.ok && throwOnError) {\n        throw new HttpTransportError(\n          `Request to ${responseUrl} failed with status ${response.status}`,\n          {\n            code: \"HttpError\",\n            url: responseUrl,\n            status: response.status,\n            response,\n            data,\n          },\n        );\n      }\n\n      return {\n        status: response.status,\n        headers: response.headers,\n        data,\n        raw: response,\n        url: responseUrl,\n      };\n    } catch (error) {\n      if (error instanceof HttpTransportError) {\n        throw error;\n      }\n\n      if (abortBundle.timedOut()) {\n        throw new HttpTransportError(\"Request timed out\", {\n          code: \"TimeoutError\",\n          url: response?.url ?? resolvedUrl,\n          response,\n          cause: error,\n        });\n      }\n\n      if (isAbortError(error)) {\n        throw new HttpTransportError(\"Request aborted\", {\n          code: \"AbortError\",\n          url: response?.url ?? resolvedUrl,\n          response,\n          cause: error,\n        });\n      }\n\n      throw new HttpTransportError(\"Network request failed\", {\n        code: \"NetworkError\",\n        url: response?.url ?? resolvedUrl,\n        response,\n        cause: error,\n      });\n    } finally {\n      abortBundle.cleanup?.();\n    }\n  };\n\n  const asFetch = (): FetchExecutor => {\n    const fetchFn = (async (\n      input: RequestInfo | URL,\n      init?: RequestInit,\n    ): Promise<Response> => {\n      const overrides = init ?? {};\n\n      const headers = new Headers();\n      let url: string | URL;\n      let method: HttpMethod | undefined;\n      let body: BodyInit | null | undefined;\n      let signal: AbortSignal | undefined;\n\n      if (input instanceof Request) {\n        url = input.url;\n        method = input.method as HttpMethod;\n        body = input.body ?? undefined;\n        signal = input.signal ?? undefined;\n        new Headers(input.headers).forEach((value, key) => {\n          headers.set(key, value);\n        });\n      } else {\n        url = input;\n      }\n\n      if (overrides.headers) {\n        new Headers(overrides.headers).forEach((value, key) => {\n          headers.set(key, value);\n        });\n      }\n\n      method =\n        (overrides.method as HttpMethod | undefined) ??\n        method ??\n        DEFAULT_METHOD;\n      if (overrides.body !== undefined) {\n        body = overrides.body;\n      }\n      signal = overrides.signal ?? signal;\n\n      const response = await request<Response>({\n        url,\n        method,\n        headers,\n        body: body ?? undefined,\n        signal,\n        parseAs: \"response\",\n        throwOnError: false,\n        timeoutMs: defaultTimeoutMs,\n      });\n\n      return response.data;\n    }) as FetchExecutor;\n\n    const globalFetch = globalThis.fetch as Partial<FetchExecutor> | undefined;\n    if (globalFetch && typeof globalFetch.preconnect === \"function\") {\n      fetchFn.preconnect = globalFetch.preconnect.bind(globalFetch);\n    } else {\n      const noopPreconnect: FetchExecutor[\"preconnect\"] = async (..._args) => {};\n      fetchFn.preconnect = noopPreconnect;\n    }\n\n    return fetchFn;\n  };\n\n  return {\n    request,\n    asFetch,\n  };\n};\n","import { AgentApiClient } from \"./agent-api-client.js\";\nimport { AgentAuthClient } from \"./agent-auth-client.js\";\nimport {\n  loadAgentRuntimeConfig,\n  type ConfigLoaderOptions,\n  type LoadedAgentRuntimeConfig,\n} from \"./config-loader.js\";\nimport { AgentRuntimeError } from \"./errors.js\";\nimport { TokenManager } from \"./token-manager.js\";\nimport type { TokenSnapshot } from \"./token-manager.js\";\nimport { createFetchTransport } from \"./transport/fetch-transport.js\";\nimport type {\n  FetchExecutor,\n  HttpTransport,\n} from \"./transport/http-transport.js\";\nimport type { StorageAdapter } from \"./storage/types.js\";\nimport type {\n  AgentExchangeResponse,\n  AgentRuntimeConfig,\n  AgentRuntimeEvent,\n  AgentRuntimeEventHandler,\n  AgentRuntimeEventPayloads,\n  AgentRuntimeOptions,\n  AgentRuntimeWallet,\n} from \"./types.js\";\n\nconst DEFAULT_REFRESH_LEAD_TIME_MS = 30_000;\n\nexport interface AgentRuntimeFromConfigOptions {\n  config: AgentRuntimeConfig;\n  wallet: AgentRuntimeWallet;\n  fetch?: FetchExecutor;\n  transport?: HttpTransport;\n  authClient?: AgentAuthClient;\n  apiClient?: AgentApiClient;\n  tokenManager?: TokenManager;\n  storage?: StorageAdapter<string>;\n  headers?: HeadersInit;\n  refreshLeadTimeMs?: number;\n  now?: () => number;\n}\n\nexport interface AgentRuntimeLoadOptions\n  extends Omit<AgentRuntimeFromConfigOptions, \"config\"> {\n  loader?: ConfigLoaderOptions;\n}\n\nexport interface AgentRuntimeLoadResult\n  extends LoadedAgentRuntimeConfig {\n  runtime: AgentRuntime;\n}\n\nexport interface AuthenticatedSession {\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: Date;\n  refreshTokenExpiresAt: Date;\n  scopes?: string[];\n}\n\ntype EventHandlers = {\n  [Event in AgentRuntimeEvent]: Set<\n    AgentRuntimeEventHandler<Event>\n  >;\n};\n\nconst parseDate = (value: string | Date): Date =>\n  value instanceof Date ? value : new Date(value);\n\nconst resolveRefreshExpiry = (\n  response: AgentExchangeResponse,\n): string => {\n  const candidate =\n    // accommodate legacy schema name\n    (response as { refresh_token_expires_at?: string })\n      .refresh_token_expires_at ?? response.refresh_expires_at;\n  if (!candidate) {\n    throw new AgentRuntimeError(\n      \"AuthenticationFailed\",\n      \"Refresh token expiry is missing in exchange response\",\n    );\n  }\n  return candidate;\n};\n\nexport class AgentRuntime {\n  static async fromConfig(\n    options: AgentRuntimeFromConfigOptions,\n  ): Promise<AgentRuntime> {\n    const { config, wallet } = options;\n    if (!config?.baseUrl) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        \"baseUrl is required\",\n      );\n    }\n    if (!config.agentRef) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        \"agentRef is required\",\n      );\n    }\n    if (!config.credentialId) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        \"credentialId is required\",\n      );\n    }\n    if (!wallet?.signer) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        \"wallet signer is required\",\n      );\n    }\n\n    const fetchImpl =\n      options.fetch ?? (globalThis.fetch as FetchExecutor | undefined);\n    if (!fetchImpl) {\n      throw new AgentRuntimeError(\n        \"ConfigurationError\",\n        \"No fetch implementation available. Provide one via options.fetch.\",\n      );\n    }\n\n    const refreshLeadTimeMs =\n      options.refreshLeadTimeMs ?? DEFAULT_REFRESH_LEAD_TIME_MS;\n    const now = options.now ?? (() => Date.now());\n\n    const transport =\n      options.transport ??\n      createFetchTransport({\n        baseUrl: config.baseUrl,\n        fetch: fetchImpl,\n        defaultHeaders: options.headers,\n      });\n\n    const authClient =\n      options.authClient ??\n      new AgentAuthClient({\n        agentRef: config.agentRef,\n        baseUrl: config.baseUrl,\n        fetch: transport.asFetch(),\n        headers: options.headers,\n      });\n\n    const tokenManager =\n      options.tokenManager ??\n      new TokenManager({\n        storage: options.storage,\n        refreshLeadTimeMs,\n        now,\n      });\n\n    const runtime = new AgentRuntime({\n      config,\n      wallet,\n      transport,\n      authClient,\n      apiClient: options.apiClient,\n      tokenManager,\n      refreshLeadTimeMs,\n      now,\n    });\n\n    await runtime.initialize();\n    return runtime;\n  }\n\n  static async load(\n    options: AgentRuntimeLoadOptions,\n  ): Promise<AgentRuntimeLoadResult> {\n    const { loader, ...runtimeOptions } = options;\n    const loadedConfig = await loadAgentRuntimeConfig(loader);\n\n    const runtime = await AgentRuntime.fromConfig({\n      ...runtimeOptions,\n      config: loadedConfig.config,\n    });\n\n    return {\n      ...loadedConfig,\n      runtime,\n    };\n  }\n\n  readonly api: AgentApiClient;\n\n  private readonly config: AgentRuntimeConfig;\n  private readonly wallet: AgentRuntimeWallet;\n  private readonly transport: HttpTransport;\n  private readonly authClient: AgentAuthClient;\n  private readonly tokenManager: TokenManager;\n  private readonly refreshLeadTimeMs: number;\n  private readonly now: () => number;\n  private readonly handlers: EventHandlers = {\n    authenticated: new Set(),\n    tokenRefreshed: new Set(),\n    refreshFailed: new Set(),\n    tokensCleared: new Set(),\n  };\n\n  private refreshTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private constructor(options: AgentRuntimeOptions) {\n    this.config = options.config;\n    this.wallet = options.wallet;\n    this.transport = options.transport;\n    this.authClient = options.authClient;\n    this.tokenManager = options.tokenManager;\n    this.refreshLeadTimeMs = options.refreshLeadTimeMs;\n    this.now = options.now;\n    this.api =\n      options.apiClient ??\n      new AgentApiClient({\n        transport: this.transport,\n        baseUrl: this.config.baseUrl,\n        agentRef: this.config.agentRef,\n        getAccessToken: async () =>\n          this.tokenManager.getCachedAccessToken()?.token ?? null,\n      });\n  }\n\n  async authenticate(): Promise<AuthenticatedSession> {\n    const challenge = await this.authClient.requestChallenge({\n      credential_id: this.config.credentialId,\n      scopes: this.config.scopes,\n    });\n\n    const signature = await this.wallet.signer.signChallenge(\n      challenge.challenge,\n    );\n\n    const exchange = await this.authClient.exchange({\n      challenge_id: challenge.challenge.id,\n      signature,\n      credential_id: this.config.credentialId,\n    });\n\n    const snapshot = await this.storeTokens(exchange);\n    this.emit(\"authenticated\", snapshot);\n    return snapshot;\n  }\n\n  async ensureAccessToken(): Promise<string> {\n    const cached = this.tokenManager.getCachedAccessToken();\n    if (!cached) {\n      const session = await this.authenticate();\n      return session.accessToken;\n    }\n\n    const timeToExpiry =\n      cached.expiresAt.getTime() - this.now();\n\n    if (timeToExpiry <= 0 || timeToExpiry <= this.refreshLeadTimeMs) {\n      const snapshot = await this.refreshTokens();\n      return snapshot.accessToken;\n    }\n\n    return cached.token;\n  }\n\n  async shutdown(): Promise<void> {\n    this.clearRefreshTimer();\n  }\n\n  on<TEvent extends AgentRuntimeEvent>(\n    event: TEvent,\n    handler: AgentRuntimeEventHandler<TEvent>,\n  ): () => void {\n    const set = this.handlers[event] as Set<\n      AgentRuntimeEventHandler<TEvent>\n    >;\n    set.add(handler);\n    return () => {\n      set.delete(handler);\n    };\n  }\n\n  async clearTokens(reason?: string): Promise<void> {\n    this.clearRefreshTimer();\n    await this.tokenManager.clear();\n    this.emit(\"tokensCleared\", { reason });\n  }\n\n  private async initialize(): Promise<void> {\n    const snapshot = await this.tokenManager.hydrate();\n    if (snapshot) {\n      this.scheduleRefresh(this.snapshotToSession(snapshot));\n      return;\n    }\n\n    if (this.config.refreshToken) {\n      try {\n        const refreshed = await this.authClient.refresh({\n          refresh_token: this.config.refreshToken,\n        });\n        const session = await this.storeTokens(refreshed);\n        this.emit(\"authenticated\", session);\n      } catch (error) {\n        this.emit(\"refreshFailed\", { error });\n      }\n    }\n  }\n\n  private async refreshTokens(): Promise<AuthenticatedSession> {\n    return this.tokenManager.withRefreshLock(async () => {\n      const snapshot = this.tokenManager.getSnapshot();\n      if (!snapshot) {\n        throw new AgentRuntimeError(\n          \"TokensUnavailable\",\n          \"Cannot refresh tokens without an active session\",\n        );\n      }\n\n      try {\n        const refreshed = await this.authClient.refresh({\n          refresh_token: snapshot.refreshToken,\n        });\n        const updated = await this.storeTokens(refreshed);\n        this.emit(\"tokenRefreshed\", updated);\n        return updated;\n      } catch (error) {\n        this.emit(\"refreshFailed\", { error });\n        throw new AgentRuntimeError(\n          \"RefreshFailed\",\n          \"Failed to refresh access token\",\n          { cause: error },\n        );\n      }\n    });\n  }\n\n  private async storeTokens(\n    response: AgentExchangeResponse,\n  ): Promise<AuthenticatedSession> {\n    const refreshTokenExpiresAt = resolveRefreshExpiry(response);\n    const scoped = response.credential?.scopes ?? undefined;\n\n    const snapshot = await this.tokenManager.setTokens({\n      accessToken: response.access_token,\n      accessTokenExpiresAt: parseDate(response.expires_at),\n      refreshToken: response.refresh_token,\n      refreshTokenExpiresAt: parseDate(refreshTokenExpiresAt),\n      revocationNonce: response.credential?.revocation_nonce ?? undefined,\n      scopes: scoped,\n    });\n\n    const session = this.snapshotToSession(snapshot);\n    this.scheduleRefresh(session);\n    return session;\n  }\n\n  private scheduleRefresh(snapshot: AuthenticatedSession): void {\n    this.clearRefreshTimer();\n\n    const target =\n      snapshot.expiresAt.getTime() - this.refreshLeadTimeMs;\n    const delay = Math.max(0, target - this.now());\n\n    this.refreshTimer = setTimeout(() => {\n      void this.refreshTokens().catch(() => {\n        // errors are surfaced via events; background failures are swallowed.\n      });\n    }, delay);\n  }\n\n  private clearRefreshTimer(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  private emit<TEvent extends AgentRuntimeEvent>(\n    event: TEvent,\n    payload: AgentRuntimeEventPayloads[TEvent],\n  ): void {\n    const listeners = this.handlers[event] as Set<\n      AgentRuntimeEventHandler<TEvent>\n    >;\n    for (const handler of listeners) {\n      try {\n        handler(payload);\n      } catch {\n        // ignore listener errors\n      }\n    }\n  }\n\n  private snapshotToSession(snapshot: TokenSnapshot): AuthenticatedSession {\n    return {\n      accessToken: snapshot.accessToken,\n      refreshToken: snapshot.refreshToken,\n      expiresAt: snapshot.accessTokenExpiresAt,\n      refreshTokenExpiresAt: snapshot.refreshTokenExpiresAt,\n      scopes: snapshot.scopes,\n    };\n  }\n}\n","import { createFetchTransport } from \"./fetch-transport.js\";\nimport type { FetchTransportOptions } from \"./fetch-transport.js\";\nimport type {\n  FetchExecutor,\n  HttpTransport,\n} from \"./http-transport.js\";\n\nexport interface UndiciTransportOptions extends FetchTransportOptions {\n  /**\n   * Optional Undici dispatcher instance injected into each request.\n   */\n  dispatcher?: unknown;\n}\n\nexport const createUndiciTransport = (\n  options: UndiciTransportOptions = {},\n): HttpTransport => {\n  const { dispatcher, fetch: fetchOption, ...rest } = options;\n\n  if (!dispatcher) {\n    return createFetchTransport({\n      ...rest,\n      fetch: fetchOption,\n    });\n  }\n\n  const baseFetch =\n    (fetchOption as typeof globalThis.fetch | undefined) ??\n    (globalThis.fetch as typeof globalThis.fetch | undefined);\n\n  if (typeof baseFetch !== \"function\") {\n    throw new Error(\n      \"Unable to create undici transport: provide the undici fetch implementation.\",\n    );\n  }\n\n  const fetchWithDispatcher = ((\n    input: Parameters<FetchExecutor>[0],\n    init?: Parameters<FetchExecutor>[1],\n  ) =>\n    baseFetch(input, {\n      ...(init ?? {}),\n      dispatcher,\n    } as RequestInit)) as typeof globalThis.fetch;\n\n  if (\"preconnect\" in baseFetch) {\n    const preconnect = (\n      baseFetch as typeof globalThis.fetch & {\n        preconnect?: (...args: unknown[]) => Promise<void>;\n      }\n    ).preconnect;\n    if (typeof preconnect === \"function\") {\n      (\n        fetchWithDispatcher as typeof globalThis.fetch & {\n          preconnect?: typeof preconnect;\n        }\n      ).preconnect = preconnect.bind(baseFetch);\n    }\n  }\n\n  return createFetchTransport({\n    ...rest,\n    fetch: fetchWithDispatcher as FetchExecutor,\n  });\n};\n","import type { AgentChallengeResponse, ChallengeSigner } from \"../types.js\";\n\nexport interface WalletMetadata {\n  id?: string | null;\n  address?: string | null;\n  chain?: string | null;\n  chainType?: string | null;\n  provider?: string | null;\n  accountId?: string | null;\n  label?: string | null;\n  caip2?: string | null;\n}\n\nexport interface NormalizedChallenge {\n  id: string;\n  credentialId: string | null;\n  payload: unknown;\n  payloadHash: string;\n  nonce: string;\n  scopes: string[];\n  issuedAt: Date;\n  expiresAt: Date;\n  serverSignature: string | null;\n  message: string | null;\n}\n\nexport interface WalletConnector extends ChallengeSigner {\n  /**\n   * Optional hook for retrieving wallet metadata that was discovered during\n   * prior signing operations.\n   */\n  getWalletMetadata(): Promise<WalletMetadata | null>;\n\n  /**\n   * Optional helper that can be used by runtimes to assert chain support\n   * before delegating signing to the connector.\n   */\n  supportsCaip2?(caip2: string): boolean | Promise<boolean>;\n\n  /**\n   * Optional helper returning the primary signing address (if known).\n   */\n  getAddress?(): Promise<string | null>;\n}\n\nexport interface ChallengeNormalizationOptions {\n  /**\n   * When true, objects are stringified using a stable key order.\n   * Defaults to true.\n   */\n  stableStringify?: boolean;\n}\n\nconst DEFAULT_NORMALIZATION_OPTIONS: Required<ChallengeNormalizationOptions> = {\n  stableStringify: true,\n};\n\nexport const normalizeChallenge = (\n  challenge: AgentChallengeResponse[\"challenge\"],\n  options: ChallengeNormalizationOptions = DEFAULT_NORMALIZATION_OPTIONS,\n): NormalizedChallenge => {\n  const issuedAt = toDate(challenge.issued_at);\n  const expiresAt = toDate(challenge.expires_at);\n\n  const scopes = Array.isArray(challenge.scopes)\n    ? challenge.scopes.filter((value): value is string => typeof value === \"string\")\n    : [];\n\n  return {\n    id: challenge.id,\n    credentialId: challenge.credential_id ?? null,\n    payload: challenge.payload,\n    payloadHash: challenge.payload_hash,\n    nonce: challenge.nonce,\n    scopes,\n    issuedAt,\n    expiresAt,\n    serverSignature: challenge.server_signature ?? null,\n    message: resolveChallengeMessage(challenge.payload, options),\n  };\n};\n\nconst toDate = (value: string | Date): Date =>\n  value instanceof Date ? value : new Date(value);\n\nconst resolveChallengeMessage = (\n  payload: unknown,\n  options: ChallengeNormalizationOptions,\n): string | null => {\n  if (!payload) {\n    return null;\n  }\n\n  if (typeof payload === \"string\") {\n    return payload;\n  }\n\n  if (typeof payload !== \"object\") {\n    return null;\n  }\n\n  const record = payload as Record<string, unknown>;\n\n  if (typeof record.message === \"string\") {\n    return record.message;\n  }\n\n  if (typeof record.payload === \"string\") {\n    return record.payload;\n  }\n\n  if (Array.isArray(record.parts)) {\n    const joined = record.parts\n      .map((item) =>\n        typeof item === \"string\"\n          ? item\n          : typeof item === \"object\" && item && \"text\" in item\n            ? String((item as { text: unknown }).text ?? \"\")\n            : \"\",\n      )\n      .join(\"\");\n    if (joined) {\n      return joined;\n    }\n  }\n\n  try {\n    return options.stableStringify !== false\n      ? stableJsonStringify(record)\n      : JSON.stringify(record);\n  } catch {\n    return null;\n  }\n};\n\nexport const stableJsonStringify = (value: unknown): string => {\n  if (value === null || typeof value !== \"object\") {\n    if (typeof value === \"bigint\") {\n      return JSON.stringify(value.toString());\n    }\n    return JSON.stringify(value);\n  }\n\n  if (Array.isArray(value)) {\n    const mapped = value.map((item) => stableJsonStringify(item));\n    return `[${mapped.join(\",\")}]`;\n  }\n\n  const entries = Object.entries(value as Record<string, unknown>)\n    .filter(([, entryValue]) => entryValue !== undefined)\n    .sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0));\n\n  const serialized = entries\n    .map(([key, entryValue]) => {\n      const normalizedEntry =\n        typeof entryValue === \"bigint\" ? entryValue.toString() : entryValue;\n      return `${JSON.stringify(key)}:${stableJsonStringify(normalizedEntry)}`;\n    })\n    .join(\",\");\n\n  return `{${serialized}}`;\n};\n\nexport const extractSignature = (payload: unknown): string | null => {\n  if (!payload) {\n    return null;\n  }\n\n  if (typeof payload === \"string\") {\n    return payload;\n  }\n\n  if (typeof payload !== \"object\") {\n    return null;\n  }\n\n  const record = payload as Record<string, unknown>;\n  const signed = record.signed ?? record.signature ?? payload;\n\n  if (typeof signed === \"string\") {\n    return signed;\n  }\n\n  if (\n    signed &&\n    typeof signed === \"object\" &&\n    \"signature\" in signed &&\n    typeof (signed as { signature: unknown }).signature === \"string\"\n  ) {\n    return (signed as { signature: string }).signature;\n  }\n\n  return null;\n};\n\nexport const extractWalletMetadata = (payload: unknown): WalletMetadata | null => {\n  if (!payload || typeof payload !== \"object\") {\n    return null;\n  }\n\n  const record = payload as Record<string, unknown>;\n  if (!record.wallet || typeof record.wallet !== \"object\") {\n    return null;\n  }\n\n  const wallet = record.wallet as Record<string, unknown>;\n  const account =\n    record.account && typeof record.account === \"object\"\n      ? (record.account as Record<string, unknown>)\n      : undefined;\n\n  return {\n    id: typeof wallet.id === \"string\" ? wallet.id : null,\n    address: typeof wallet.address === \"string\" ? wallet.address : null,\n    chain: typeof wallet.chain === \"string\" ? wallet.chain : null,\n    chainType: typeof wallet.chainType === \"string\" ? wallet.chainType : null,\n    provider: typeof wallet.provider === \"string\" ? wallet.provider : null,\n    caip2: typeof wallet.caip2 === \"string\" ? wallet.caip2 : null,\n    accountId: typeof account?.id === \"string\" ? account.id : null,\n    label:\n      typeof account?.displayName === \"string\"\n        ? account.displayName\n        : typeof wallet.label === \"string\"\n          ? wallet.label\n          : null,\n  };\n};\n\nexport type ChallengeMessageEncoding = \"utf-8\" | \"hex\";\n\nexport const detectMessageEncoding = (\n  message: string,\n): ChallengeMessageEncoding => {\n  if (/^0x[0-9a-fA-F]*$/.test(message.trim())) {\n    return \"hex\";\n  }\n  return \"utf-8\";\n};\n","import type { AgentChallengeResponse } from \"../types.js\";\nimport type { FetchExecutor } from \"../transport/http-transport.js\";\n\nimport {\n  detectMessageEncoding,\n  extractSignature,\n  extractWalletMetadata,\n  normalizeChallenge,\n  type WalletConnector,\n  type WalletMetadata,\n} from \"./base-connector.js\";\n\nexport interface ServerOrchestratorWalletConnectorOptions {\n  baseUrl: string;\n  agentRef: string;\n  fetch?: FetchExecutor;\n  headers?: HeadersInit;\n  accessToken?: string | null;\n  authorizationContext?: Record<string, unknown>;\n}\n\nconst DEFAULT_AUTHORIZATION_CONTEXT: Record<string, unknown> = {\n  reason: \"lucid.agent.auth.exchange\",\n};\n\nexport class ServerOrchestratorMissingAccessTokenError extends Error {\n  constructor() {\n    super(\n      \"Server orchestrator connector requires a bearer token. Call setAccessToken() first.\",\n    );\n    this.name = \"ServerOrchestratorMissingAccessTokenError\";\n  }\n}\n\nexport class ServerOrchestratorWalletConnector implements WalletConnector {\n  private readonly baseUrl: string;\n  private readonly agentRef: string;\n  private readonly fetchImpl: FetchExecutor;\n  private readonly defaultHeaders: HeadersInit | undefined;\n  private readonly authorizationContext: Record<string, unknown>;\n\n  private accessToken: string | null;\n  private cachedMetadata: WalletMetadata | null = null;\n\n  constructor(options: ServerOrchestratorWalletConnectorOptions) {\n    if (!options?.baseUrl) {\n      throw new Error(\n        \"ServerOrchestratorWalletConnector requires a baseUrl option\",\n      );\n    }\n    if (!options.agentRef) {\n      throw new Error(\n        \"ServerOrchestratorWalletConnector requires an agentRef option\",\n      );\n    }\n\n    const fetchCandidate =\n      options.fetch ?? (globalThis.fetch as FetchExecutor | undefined);\n    if (!fetchCandidate) {\n      throw new Error(\n        \"No fetch implementation available. Provide one via options.fetch.\",\n      );\n    }\n\n    this.baseUrl = options.baseUrl.replace(/\\/?$/, \"\");\n    this.agentRef = options.agentRef;\n    this.fetchImpl = fetchCandidate;\n    this.defaultHeaders = options.headers;\n    this.accessToken = options.accessToken ?? null;\n    this.authorizationContext = {\n      ...DEFAULT_AUTHORIZATION_CONTEXT,\n      ...options.authorizationContext,\n    };\n  }\n\n  setAccessToken(token: string | null): void {\n    this.accessToken = token ?? null;\n  }\n\n  async signChallenge(\n    challenge: AgentChallengeResponse[\"challenge\"],\n  ): Promise<string> {\n    const token = this.accessToken;\n    if (!token) {\n      throw new ServerOrchestratorMissingAccessTokenError();\n    }\n\n    const normalized = normalizeChallenge(challenge);\n    const message = normalized.message;\n    if (!message) {\n      throw new Error(\n        \"Server orchestrator challenge payload did not include a signable message\",\n      );\n    }\n\n    const response = await this.fetchImpl(\n      buildWalletSignUrl(this.baseUrl, this.agentRef),\n      {\n        method: \"POST\",\n        headers: this.buildHeaders(token),\n        body: JSON.stringify({\n          message,\n          encoding: detectMessageEncoding(message),\n          idempotency_key: normalized.id,\n          authorization_context: {\n            ...this.authorizationContext,\n            challenge_id: normalized.id,\n          },\n        }),\n      },\n    );\n\n    const rawBody = await response.text();\n    if (!response.ok) {\n      throw buildSigningError(response, rawBody);\n    }\n\n    const parsed = safeJsonParse(rawBody);\n    const signature = extractSignature(parsed);\n    if (!signature) {\n      throw new Error(\n        \"Server orchestrator response did not contain a signature field\",\n      );\n    }\n\n    this.cachedMetadata = extractWalletMetadata(parsed);\n\n    return signature;\n  }\n\n  async getWalletMetadata(): Promise<WalletMetadata | null> {\n    return this.cachedMetadata;\n  }\n\n  supportsCaip2(_: string): boolean {\n    // Server orchestrator handles chain abstraction; defer checks to server.\n    return true;\n  }\n\n  async getAddress(): Promise<string | null> {\n    return this.cachedMetadata?.address ?? null;\n  }\n\n  private buildHeaders(token: string): HeadersInit {\n    const headers = new Headers(this.defaultHeaders);\n    headers.set(\"content-type\", \"application/json\");\n    headers.set(\"authorization\", normalizeAuthorizationHeader(token));\n    return Object.fromEntries(headers.entries());\n  }\n}\n\nconst buildWalletSignUrl = (baseUrl: string, agentRef: string): string =>\n  `${baseUrl}/v1/agents/${encodeURIComponent(agentRef)}/wallet/sign-message`;\n\nconst normalizeAuthorizationHeader = (token: string): string =>\n  /^bearer\\s/i.test(token) ? token : `Bearer ${token}`;\n\nconst buildSigningError = (response: Response, body: string): Error => {\n  const details = safeJsonParse(body);\n  const serialized =\n    details && typeof details === \"object\"\n      ? JSON.stringify(details)\n      : body;\n\n  return new Error(\n    `Server wallet signing failed: ${response.status} ${response.statusText}${serialized ? ` - ${serialized}` : \"\"}`,\n  );\n};\n\nconst safeJsonParse = (text: string): unknown => {\n  if (!text) return null;\n  try {\n    return JSON.parse(text);\n  } catch {\n    return text;\n  }\n};\n","import { AgentRuntime, type AuthenticatedSession } from \"./agent-runtime.js\";\nimport type {\n  AgentRuntimeConfig,\n  AgentRuntimeEvent,\n  AgentRuntimeEventHandler,\n  AgentWalletSendTransactionRequest,\n  AgentWalletSignMessageRequest,\n  AgentWalletSignTransactionRequest,\n  AgentWalletSignTypedDataRequest,\n  AgentWalletSignedResponse,\n  AgentWalletTransactionResponse,\n} from \"./types.js\";\nimport type {\n  FetchExecutor,\n  HttpTransport,\n} from \"./transport/http-transport.js\";\nimport type { StorageAdapter } from \"./storage/types.js\";\nimport type { WalletConnector, WalletMetadata } from \"./wallet/base-connector.js\";\nimport {\n  ServerOrchestratorWalletConnector,\n  type ServerOrchestratorWalletConnectorOptions,\n} from \"./wallet/server-orchestrator-connector.js\";\n\nconst DEFAULT_BASE_URL = \"https://lucid.daydream.systems\";\n\nexport interface CreateWalletConfig {\n  /**\n   * Override the Lucid API base URL. Defaults to https://lucid.daydream.systems.\n   */\n  baseUrl?: string;\n  /** Optional override for the agent reference. Falls back to `LUCID_AGENT_REF`. */\n  agentRef?: string;\n  /** Optional override for the agent credential ID. Falls back to `LUCID_AGENT_CREDENTIAL`. */\n  credentialId?: string;\n  /** Optional override for the refresh token. Falls back to `LUCID_AGENT_REFRESH_TOKEN`. */\n  refreshToken?: string;\n  /** Optional override for requested scopes. Falls back to parsing `LUCID_AGENT_SCOPES`. */\n  scopes?: string[];\n}\n\nexport interface CreateWalletOptions {\n  /**\n   * Optional runtime configuration overrides. Defaults are sourced from environment variables.\n   */\n  config?: CreateWalletConfig;\n\n  /**\n   * Optional overrides for wallet connector wiring.\n   */\n  wallet?: {\n    /**\n     * Provide a fully configured connector. When omitted, a server orchestrator connector is created.\n     */\n    connector?: WalletConnector;\n    /**\n     * Options used when bootstrapping the default server orchestrator connector.\n     */\n    server?: CreateWalletServerOptions;\n  };\n\n  /**\n   * Inject a custom fetch implementation. Required in environments without global fetch.\n   */\n  fetch?: FetchExecutor;\n\n  /**\n   * Override the HTTP transport shared with the generated SDK.\n   */\n  transport?: HttpTransport;\n\n  /**\n   * Provide a custom storage adapter for token persistence.\n   */\n  storage?: StorageAdapter<string>;\n\n  /**\n   * Default headers appended to every network request.\n   */\n  headers?: HeadersInit;\n\n  /**\n   * Pre-register event handlers on the underlying runtime.\n   */\n  events?: {\n    [Event in AgentRuntimeEvent]?:\n      | AgentRuntimeEventHandler<Event>\n      | Array<AgentRuntimeEventHandler<Event>>;\n  };\n}\n\nexport interface WalletClient {\n  /** Underlying runtime instance for advanced scenarios. */\n  readonly runtime: AgentRuntime;\n  /** Wallet connector handling challenge signing. */\n  readonly connector: WalletConnector;\n\n  /** Ensure the agent is authenticated, returning the active session. */\n  authenticate(): Promise<AuthenticatedSession>;\n  /** Return a valid access token, refreshing or exchanging as needed. */\n  ensureAccessToken(): Promise<string>;\n\n  /** Sign an arbitrary message using the agent wallet. */\n  signMessage(\n    payload: AgentWalletSignMessageRequest,\n  ): Promise<AgentWalletSignedResponse>;\n\n  /** Sign typed data (EIP-712) using the agent wallet. */\n  signTypedData(\n    payload: AgentWalletSignTypedDataRequest,\n  ): Promise<AgentWalletSignedResponse>;\n\n  /** Sign a transaction payload without broadcasting it. */\n  signTransaction(\n    payload: AgentWalletSignTransactionRequest,\n  ): Promise<AgentWalletSignedResponse>;\n\n  /** Send a transaction via the agent wallet. */\n  sendTransaction(\n    payload: AgentWalletSendTransactionRequest,\n  ): Promise<AgentWalletTransactionResponse>;\n\n  /** Retrieve cached wallet metadata, if exposed by the connector. */\n  getWalletMetadata(): Promise<WalletMetadata | null>;\n\n  /** Resolve the primary signing address when exposed by the connector. */\n  getAddress(): Promise<string | null>;\n\n  /**\n   * Subscribe to runtime events. Returns an unsubscribe handle mirroring `AgentRuntime.on`.\n   */\n  on<Event extends AgentRuntimeEvent>(\n    event: Event,\n    handler: AgentRuntimeEventHandler<Event>,\n  ): () => void;\n\n  /** Shut down the runtime, cancelling background refresh operations. */\n  shutdown(): Promise<void>;\n}\n\nexport const createWallet = async (\n  options: CreateWalletOptions,\n): Promise<WalletClient> => {\n  const fetchImpl = options.fetch ?? (globalThis.fetch as FetchExecutor | undefined);\n  if (!fetchImpl) {\n    throw new Error(\n      \"createWallet was invoked without a fetch implementation. Provide one via options.fetch.\",\n    );\n  }\n\n  const runtimeConfig = resolveRuntimeConfig(options.config);\n  const serverOverrides = options.wallet?.server ?? inferServerOverridesFromEnv();\n\n  const connector =\n    options.wallet?.connector ??\n    createDefaultServerConnector({\n      config: runtimeConfig,\n      fetch: fetchImpl,\n      server: serverOverrides,\n    });\n\n  const runtime = await AgentRuntime.fromConfig({\n    config: runtimeConfig,\n    wallet: { signer: connector },\n    fetch: fetchImpl,\n    transport: options.transport,\n    storage: options.storage,\n    headers: options.headers,\n  });\n\n  // Forward refreshed tokens to connectors that understand bearer tokens.\n  const syncConnectorToken = (token: string | null) => {\n    if (isAccessTokenAware(connector)) {\n      connector.setAccessToken(token);\n    }\n  };\n\n  runtime.on(\"authenticated\", (event) => {\n    syncConnectorToken(event.accessToken);\n  });\n\n  runtime.on(\"tokenRefreshed\", (event) => {\n    syncConnectorToken(event.accessToken);\n  });\n\n  if (options.events) {\n    registerInitialEventHandlers(runtime, options.events);\n  }\n\n  const walletClient: WalletClient = {\n    runtime,\n    connector,\n    authenticate: () => runtime.authenticate(),\n    ensureAccessToken: () => runtime.ensureAccessToken(),\n    signMessage: (payload) => runtime.api.signMessage(payload),\n    signTypedData: (payload) => runtime.api.signTypedData(payload),\n    signTransaction: (payload) => runtime.api.signTransaction(payload),\n    sendTransaction: (payload) => runtime.api.sendTransaction(payload),\n    getWalletMetadata: () => connector.getWalletMetadata(),\n    getAddress: async () => {\n      if (typeof connector.getAddress === \"function\") {\n        return connector.getAddress();\n      }\n      const metadata = await connector.getWalletMetadata();\n      return metadata?.address ?? null;\n    },\n    on: (event, handler) => runtime.on(event, handler),\n    shutdown: () => runtime.shutdown(),\n  };\n\n  return walletClient;\n};\n\ninterface DefaultServerConnectorOptions {\n  config: AgentRuntimeConfig;\n  server?: CreateWalletServerOptions;\n  fetch: FetchExecutor;\n}\n\nconst createDefaultServerConnector = (\n  options: DefaultServerConnectorOptions,\n): WalletConnector => {\n  const { config, fetch, server } = options;\n  const baseUrl = server?.baseUrl ?? config.baseUrl ?? DEFAULT_BASE_URL;\n\n  return new ServerOrchestratorWalletConnector({\n    baseUrl,\n    agentRef: config.agentRef,\n    fetch,\n    headers: server?.headers,\n    accessToken: server?.accessToken ?? null,\n    authorizationContext: server?.authorizationContext,\n  });\n};\n\ntype CreateWalletServerOptions = Omit<\n  ServerOrchestratorWalletConnectorOptions,\n  \"agentRef\" | \"fetch\"\n> & {\n  /**\n   * Override the orchestrator base URL. Defaults to the runtime base URL.\n   */\n  baseUrl?: string;\n  /**\n   * Optional initial access token applied before authentication completes.\n   */\n  accessToken?: string | null;\n};\n\nconst isAccessTokenAware = (\n  connector: WalletConnector,\n): connector is WalletConnector & {\n  setAccessToken(token: string | null): void;\n} => typeof (connector as { setAccessToken?: unknown }).setAccessToken === \"function\";\n\nconst registerInitialEventHandlers = (\n  runtime: AgentRuntime,\n  events: NonNullable<CreateWalletOptions[\"events\"]>,\n): void => {\n  for (const [event, handlers] of Object.entries(events) as Array<[\n    AgentRuntimeEvent,\n    CreateWalletOptions[\"events\"][AgentRuntimeEvent],\n  ]>) {\n    if (!handlers) continue;\n    const list = Array.isArray(handlers) ? handlers : [handlers];\n    for (const handler of list) {\n      runtime.on(event, handler as AgentRuntimeEventHandler<AgentRuntimeEvent>);\n    }\n  }\n};\n\nconst resolveRuntimeConfig = (\n  overrides: CreateWalletConfig | undefined,\n): AgentRuntimeConfig => {\n  const rawBaseUrl =\n    overrides?.baseUrl ?? process.env.LUCID_BASE_URL ?? DEFAULT_BASE_URL;\n  const baseUrl = rawBaseUrl.trim() || DEFAULT_BASE_URL;\n\n  const agentRef = overrides?.agentRef ?? process.env.LUCID_AGENT_REF;\n  if (!agentRef) {\n    throw new Error(\n      \"createWallet requires an agent ref. Provide config.agentRef or set LUCID_AGENT_REF.\",\n    );\n  }\n\n  const credentialId = overrides?.credentialId ?? process.env.LUCID_AGENT_CREDENTIAL;\n  if (!credentialId) {\n    throw new Error(\n      \"createWallet requires an agent credential. Provide config.credentialId or set LUCID_AGENT_CREDENTIAL.\",\n    );\n  }\n\n  const refreshToken =\n    overrides?.refreshToken ?? process.env.LUCID_AGENT_REFRESH_TOKEN ?? undefined;\n  const scopes = overrides?.scopes ?? parseScopes(process.env.LUCID_AGENT_SCOPES);\n\n  return {\n    baseUrl,\n    agentRef,\n    credentialId,\n    refreshToken,\n    scopes,\n  };\n};\n\nconst parseScopes = (raw: string | null | undefined): string[] | undefined => {\n  if (!raw) {\n    return undefined;\n  }\n\n  const tokens = raw\n    .split(/[,\\s]+/g)\n    .map((token) => token.trim())\n    .filter(Boolean);\n\n  return tokens.length ? tokens : undefined;\n};\n\nconst inferServerOverridesFromEnv = (): CreateWalletServerOptions | undefined => {\n  const baseUrl = process.env.LUCID_SERVER_URL;\n  const accessToken = process.env.LUCID_SERVER_ACCESS_TOKEN;\n\n  if (!baseUrl && !accessToken) {\n    return undefined;\n  }\n\n  return {\n    baseUrl: baseUrl ?? undefined,\n    accessToken: accessToken ?? null,\n  };\n};\n","import type { AgentChallengeResponse } from \"../types.js\";\n\nimport {\n  detectMessageEncoding,\n  normalizeChallenge,\n  type WalletConnector,\n  type WalletMetadata,\n} from \"./base-connector.js\";\n\ntype TypedDataPayload = {\n  domain: Record<string, unknown>;\n  primary_type: string;\n  types: Record<string, Array<{ name: string; type: string }>>;\n  message: Record<string, unknown>;\n};\n\nexport interface LocalEoaSigner {\n  signMessage(message: string | Uint8Array): Promise<string>;\n  signTypedData?(payload: TypedDataPayload): Promise<string>;\n  getAddress?(): Promise<string | null>;\n}\n\nexport interface LocalEoaWalletConnectorOptions {\n  signer: LocalEoaSigner;\n  /** Optional static address hint to avoid additional signer roundtrips. */\n  address?: string | null;\n  /** Optional CAIP-2 identifier for the connected chain. */\n  caip2?: string | null;\n  chain?: string | null;\n  chainType?: string | null;\n  provider?: string | null;\n  label?: string | null;\n}\n\nexport class LocalEoaWalletConnector implements WalletConnector {\n  private readonly signer: LocalEoaSigner;\n  private metadata: WalletMetadata | null;\n\n  constructor(options: LocalEoaWalletConnectorOptions) {\n    if (!options?.signer) {\n      throw new Error(\"LocalEoaWalletConnector requires a signer instance\");\n    }\n\n    this.signer = options.signer;\n    this.metadata = {\n      address: options.address ?? null,\n      caip2: options.caip2 ?? null,\n      chain: options.chain ?? null,\n      chainType: options.chainType ?? null,\n      provider: options.provider ?? \"local\",\n      label: options.label ?? null,\n    };\n  }\n\n  async signChallenge(\n    challenge: AgentChallengeResponse[\"challenge\"],\n  ): Promise<string> {\n    const normalized = normalizeChallenge(challenge);\n    const typedData = extractTypedDataPayload(normalized.payload);\n\n    if (typedData) {\n      if (!this.signer.signTypedData) {\n        throw new Error(\n          \"Challenge payload requires typed-data signing but signer does not expose signTypedData()\",\n        );\n      }\n      const signature = await this.signer.signTypedData(typedData);\n      await this.refreshMetadataFromSigner();\n      return signature;\n    }\n\n    const message = normalized.message ?? normalized.payloadHash;\n    if (!message) {\n      throw new Error(\n        \"Challenge payload does not include a signable message or payload hash\",\n      );\n    }\n\n    const signature = await this.signer.signMessage(\n      coerceMessageForSigning(message),\n    );\n    await this.refreshMetadataFromSigner();\n    return signature;\n  }\n\n  async getWalletMetadata(): Promise<WalletMetadata | null> {\n    if (!this.metadata?.address && this.signer.getAddress) {\n      await this.refreshMetadataFromSigner();\n    }\n    return this.metadata;\n  }\n\n  async getAddress(): Promise<string | null> {\n    const metadata = await this.getWalletMetadata();\n    return metadata?.address ?? null;\n  }\n\n  supportsCaip2(caip2: string): boolean {\n    if (!caip2) return false;\n    if (!this.metadata?.caip2) return true;\n    return this.metadata.caip2.toLowerCase() === caip2.toLowerCase();\n  }\n\n  private async refreshMetadataFromSigner(): Promise<void> {\n    if (!this.signer.getAddress) {\n      return;\n    }\n\n    try {\n      const address = await this.signer.getAddress();\n      if (!address) {\n        return;\n      }\n\n      this.metadata = {\n        ...this.metadata,\n        address,\n      };\n    } catch {\n      // ignore metadata refresh failures – signing already succeeded\n    }\n  }\n}\n\nconst coerceMessageForSigning = (message: string): string | Uint8Array => {\n  const encoding = detectMessageEncoding(message);\n  if (encoding === \"utf-8\") {\n    return message;\n  }\n\n  // Strip 0x prefix and convert to bytes for signers that expect raw payloads.\n  const hex = message.slice(2);\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let index = 0; index < hex.length; index += 2) {\n    bytes[index / 2] = parseInt(hex.slice(index, index + 2), 16);\n  }\n  return bytes;\n};\n\nconst extractTypedDataPayload = (\n  payload: unknown,\n): TypedDataPayload | null => {\n  if (!payload || typeof payload !== \"object\") {\n    return null;\n  }\n\n  const record = payload as Record<string, unknown>;\n  const candidate = record.typed_data ?? record.typedData;\n  if (!candidate || typeof candidate !== \"object\") {\n    return null;\n  }\n\n  const typed = candidate as Record<string, unknown>;\n  if (\n    typeof typed.primary_type !== \"string\" ||\n    !typed.types ||\n    typeof typed.types !== \"object\" ||\n    !typed.domain ||\n    typeof typed.domain !== \"object\" ||\n    !typed.message ||\n    typeof typed.message !== \"object\"\n  ) {\n    return null;\n  }\n\n  return {\n    primary_type: typed.primary_type,\n    types: typed.types as TypedDataPayload[\"types\"],\n    domain: typed.domain as TypedDataPayload[\"domain\"],\n    message: typed.message as TypedDataPayload[\"message\"],\n  };\n};\n"]}