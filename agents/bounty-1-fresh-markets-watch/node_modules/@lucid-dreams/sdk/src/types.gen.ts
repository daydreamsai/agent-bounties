// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type AuthSessionResponse = {
    user: {
        [key: string]: unknown;
    };
    session: {
        token: string;
        expires_at: string;
    };
    memberships: Array<{
        [key: string]: unknown;
    }>;
    primary_account_id: string | null;
};

export type ServiceError = {
    error: string;
    message?: string;
};

export type PrivyExchangeRequest = {
    token: string;
};

export type CoinbaseExchangeRequest = {
    accessToken: string;
};

export type AgentChallengeResponse = {
    challenge: {
        id: string;
        credential_id: string | null;
        payload?: unknown;
        payload_hash: string;
        nonce: string;
        scopes: Array<string> | null;
        issued_at: string;
        expires_at: string;
        server_signature: string | null;
    };
};

export type InternalError = {
    error: 'internal_error';
};

export type AgentChallengeRequest = {
    credential_id?: string;
    scopes?: Array<string>;
};

export type AgentExchangeResponse = {
    access_token: string;
    token_type: 'bearer';
    expires_at: string;
    refresh_token: string;
    refresh_expires_at: string;
    credential: {
        id: string;
        scopes: Array<string>;
        revocation_nonce: string | null;
    };
};

export type AgentExchangeRequest = {
    challenge_id: string;
    signature: string;
    credential_id?: string;
};

export type AgentRefreshRequest = {
    refresh_token: string;
};

export type LogoutResponse = {
    ok: true;
};

export type UnauthorizedError = {
    error: 'unauthorized';
};

export type AgentListResponse = {
    items: Array<{
        [key: string]: unknown;
    }>;
};

export type AgentGraph = {
    [key: string]: unknown;
};

export type AgentDetail = {
    [key: string]: unknown;
};

export type NotFoundError = {
    error: 'not_found';
};

export type AgentEntrypointList = {
    [key: string]: unknown;
};

export type AgentEntrypointRefresh = {
    [key: string]: unknown;
};

export type AgentResponse = {
    [key: string]: unknown;
};

export type AgentCredential = {
    id: string;
    agent_id: string;
    type: string;
    managed_wallet_id: string | null;
    wallet_address: string | null;
    description: string | null;
    scopes: Array<string>;
    metadata: {
        [key: string]: unknown;
    } | null;
    is_primary: boolean;
    revocation_nonce: string | null;
    created_at: string;
    updated_at: string;
    rotated_at: string | null;
    revoked_at: string | null;
    last_used_at: string | null;
};

export type AgentCredentialListResponse = {
    items: Array<AgentCredential>;
};

export type ForbiddenError = {
    error: 'forbidden';
};

export type AgentCredentialResponse = {
    credential: AgentCredential;
};

export type AgentCredentialCreateRequest = {
    wallet_id: string;
    scopes?: Array<string>;
    description?: string;
    make_primary?: boolean;
    metadata?: {
        [key: string]: unknown;
    };
};

export type AgentTokenList = {
    items: Array<{
        [key: string]: unknown;
    }>;
};

export type AgentTokenIssueResponse = {
    tokenId: string;
    token: string;
    expiresAt: string;
    scopes: Array<string>;
    description: string | null;
};

export type AgentInvokeResponse = {
    [key: string]: unknown;
};

export type AgentInvokeRequest = {
    input: {
        [key: string]: unknown;
    };
    session_id?: string;
    metadata?: {
        [key: string]: unknown;
    };
    timeout_ms?: number;
};

export type AgentWalletTransactionResponse = {
    account: {
        id: string;
        displayName: string | null;
    };
    wallet: {
        id: string;
        address: string | null;
        chain: string;
        provider: string;
        chainType: string;
        externalId: string | null;
        privyWalletId: string | null;
        status: string | null;
    };
    transaction?: unknown;
};

export type AgentWalletSignedResponse = {
    account: {
        id: string;
        displayName: string | null;
    };
    wallet: {
        id: string;
        address: string | null;
        chain: string;
        provider: string;
        chainType: string;
        externalId: string | null;
        privyWalletId: string | null;
        status: string | null;
    };
    signed?: unknown;
};

export type A2aCard = {
    name: string;
    version: string;
    description?: string;
    url: string;
    capabilities: {
        streaming: boolean;
        pushNotifications: boolean;
        stateTransitionHistory: boolean;
    };
    defaultInputModes: Array<string>;
    defaultOutputModes: Array<string>;
    skills: Array<{
        id: string;
        name: string;
        description?: string;
        inputModes: Array<string>;
        outputModes: Array<string>;
    }>;
    supportsAuthenticatedExtendedCard: boolean;
    entrypoints: {
        [key: string]: {
            description?: string;
            streaming?: boolean;
            input_schema?: unknown;
            output_schema?: unknown;
        };
    };
};

export type MessagePart = {
    kind: 'text';
    text: string;
};

export type Message = {
    kind: 'message';
    role: 'user' | 'agent';
    messageId: string;
    parts: Array<MessagePart>;
    taskId?: string;
    contextId?: string;
    metadata?: {
        [key: string]: unknown;
    };
};

export type TaskStatus = {
    state: 'submitted' | 'working' | 'input-required' | 'completed' | 'canceled' | 'failed' | 'unknown';
    message?: Message;
    timestamp?: string;
};

export type Task = {
    kind: 'task';
    id: string;
    contextId?: string;
    status?: TaskStatus;
    history?: Array<Message>;
    metadata?: {
        [key: string]: unknown;
    };
    artifacts?: Array<unknown>;
};

export type A2aRpcSuccessResponse = {
    jsonrpc: '2.0';
    id?: string | number | unknown;
    result: Task;
};

export type A2aRpcErrorResponse = {
    jsonrpc: '2.0';
    id?: string | number | unknown;
    error: {
        code: number;
        message: string;
        data?: unknown;
    };
};

export type A2aRpcRequest = {
    jsonrpc: string;
    id?: string | number | unknown;
    method: string;
    params?: {
        [key: string]: unknown;
    };
};

export type RegistrySkill = {
    id: string;
    name?: string;
    description?: string;
    /**
     * Whether the skill supports streaming responses.
     */
    streaming?: boolean;
    pricing_invoke?: string;
    pricing_stream?: string;
};

export type RegistryItem = {
    agentRef: string;
    name: string;
    description?: string | null;
    capabilities?: {
        streaming?: boolean;
    };
    payments?: unknown;
    skills: Array<RegistrySkill>;
    source: 'cache' | 'live';
};

export type RegistryResponse = {
    items: Array<RegistryItem>;
    next_cursor: string | null;
};

export type UserMembership = {
    account: {
        [key: string]: unknown;
    };
    membership: {
        [key: string]: unknown;
    };
    wallets: Array<{
        [key: string]: unknown;
    }>;
};

export type UserSessionResponse = {
    user: {
        [key: string]: unknown;
    };
    session: {
        token: string;
        expires_at: string | null;
        id: string;
        created_at: string | null;
        updated_at: string | null;
    };
    memberships: Array<UserMembership>;
    primary_account_id: string | null;
};

export type CreateWalletResponse = {
    wallet: {
        [key: string]: unknown;
    };
    memberships: Array<UserMembership>;
    default_wallet_id: string | null;
};

export type NoPrimaryAccountError = {
    error: 'no_primary_account';
};

export type CreateWalletRequest = {
    label: string;
    chain: 'ethereum' | 'solana';
    agent_ref?: string;
    make_default?: boolean;
};

export type CoinbaseOnrampError = {
    error: 'coinbase_onramp_error';
    message: string;
    status?: number;
    details?: unknown;
};

export type CoinbaseBuyQuoteRequest = {
    /**
     * Asset symbol to purchase, e.g. `eth`.
     */
    purchaseCurrency: string;
    /**
     * Network identifier for the asset, e.g. `base`.
     */
    purchaseNetwork?: string;
    /**
     * Fiat amount to pay.
     */
    paymentAmount: string | number;
    /**
     * Fiat currency code, e.g. `usd`.
     */
    paymentCurrency: string;
    /**
     * Identifier of the selected funding payment method.
     */
    paymentMethod: string;
    /**
     * ISO 3166-1 alpha-2 country code.
     */
    country: string;
    /**
     * ISO 3166-2 subdivision/state code; mandatory for US residents.
     */
    subdivision?: string;
    /**
     * Optional wallet address that will receive purchased assets. Enables one-click Coinbase checkout.
     */
    destinationAddress?: string;
};

export type TokenBalance = {
    token: 'eth' | 'sol' | 'usdc' | 'dreams';
    symbol: string;
    tokenType: 'native' | 'erc20' | 'spl';
    amount: string;
    rawAmount: string;
    decimals: number;
    address?: string | null;
    mint?: string | null;
    updatedAt: string;
    usdValue?: string | null;
} | null;

export type BaseBalances = {
    eth: TokenBalance;
    usdc: TokenBalance;
    dreams: TokenBalance;
} | null;

export type SolanaBalances = {
    sol: TokenBalance;
    usdc: TokenBalance;
    dreams: TokenBalance;
} | null;

export type OnchainBalancesResponse = {
    base: BaseBalances;
    solana: SolanaBalances;
    warnings: Array<string>;
};

export type InvalidRequestError = {
    error: 'invalid_request';
    message: string;
};

export type InvokeResult = {
    run_id: string;
    status: 'succeeded' | 'failed';
    output?: {
        [key: string]: unknown;
    };
    error?: {
        code: string;
        message: string;
        details?: unknown;
    };
    usage?: {
        prompt_tokens?: number;
        completion_tokens?: number;
        total_tokens?: number;
    };
    model?: string;
    timings?: {
        total_ms?: number;
    };
};

export type RunQueuedResponse = {
    run_id: string;
    status: 'queued';
};

export type ProxyError = {
    error: {
        code: string;
        message: string;
        details?: unknown;
    };
};

export type InvokeRequest = {
    input?: {
        [key: string]: unknown;
    };
    session_id?: string;
    metadata?: {
        [key: string]: unknown;
    };
    timeout_ms?: number;
};

export type RunListResponse = {
    items: Array<{
        [key: string]: unknown;
    }>;
    next_cursor: string | null;
};

export type RunResponse = {
    [key: string]: unknown;
};

export type RunLedgerEntry = {
    id: string;
    runId: string;
    agentRef: string;
    debitedAccountId: string | null;
    creditedAccountId: string | null;
    pricingSnapshot?: unknown;
    amount: string | null;
    currency: string | null;
    status: string;
    createdAt: string;
    updatedAt: string;
};

export type RunLedgerResponse = {
    items: Array<RunLedgerEntry>;
};

export type PostV1AuthPrivyData = {
    body: PrivyExchangeRequest;
    path?: never;
    query?: never;
    url: '/v1/auth/privy';
};

export type PostV1AuthPrivyErrors = {
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthPrivyError = PostV1AuthPrivyErrors[keyof PostV1AuthPrivyErrors];

export type PostV1AuthPrivyResponses = {
    /**
     * Session created.
     */
    200: AuthSessionResponse;
};

export type PostV1AuthPrivyResponse = PostV1AuthPrivyResponses[keyof PostV1AuthPrivyResponses];

export type PostV1AuthCoinbaseData = {
    body: CoinbaseExchangeRequest;
    path?: never;
    query?: never;
    url: '/v1/auth/coinbase';
};

export type PostV1AuthCoinbaseErrors = {
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthCoinbaseError = PostV1AuthCoinbaseErrors[keyof PostV1AuthCoinbaseErrors];

export type PostV1AuthCoinbaseResponses = {
    /**
     * Session created.
     */
    200: AuthSessionResponse;
};

export type PostV1AuthCoinbaseResponse = PostV1AuthCoinbaseResponses[keyof PostV1AuthCoinbaseResponses];

export type PostV1AuthAgentsByAgentRefChallengeData = {
    body: AgentChallengeRequest;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/auth/agents/{agentRef}/challenge';
};

export type PostV1AuthAgentsByAgentRefChallengeErrors = {
    /**
     * Internal error.
     */
    500: InternalError;
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthAgentsByAgentRefChallengeError = PostV1AuthAgentsByAgentRefChallengeErrors[keyof PostV1AuthAgentsByAgentRefChallengeErrors];

export type PostV1AuthAgentsByAgentRefChallengeResponses = {
    /**
     * Challenge created.
     */
    201: AgentChallengeResponse;
};

export type PostV1AuthAgentsByAgentRefChallengeResponse = PostV1AuthAgentsByAgentRefChallengeResponses[keyof PostV1AuthAgentsByAgentRefChallengeResponses];

export type PostV1AuthAgentsByAgentRefExchangeData = {
    body: AgentExchangeRequest;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/auth/agents/{agentRef}/exchange';
};

export type PostV1AuthAgentsByAgentRefExchangeErrors = {
    /**
     * Internal error.
     */
    500: InternalError;
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthAgentsByAgentRefExchangeError = PostV1AuthAgentsByAgentRefExchangeErrors[keyof PostV1AuthAgentsByAgentRefExchangeErrors];

export type PostV1AuthAgentsByAgentRefExchangeResponses = {
    /**
     * Access granted.
     */
    200: AgentExchangeResponse;
};

export type PostV1AuthAgentsByAgentRefExchangeResponse = PostV1AuthAgentsByAgentRefExchangeResponses[keyof PostV1AuthAgentsByAgentRefExchangeResponses];

export type PostV1AuthAgentsByAgentRefRefreshData = {
    body: AgentRefreshRequest;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/auth/agents/{agentRef}/refresh';
};

export type PostV1AuthAgentsByAgentRefRefreshErrors = {
    /**
     * Internal error.
     */
    500: InternalError;
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthAgentsByAgentRefRefreshError = PostV1AuthAgentsByAgentRefRefreshErrors[keyof PostV1AuthAgentsByAgentRefRefreshErrors];

export type PostV1AuthAgentsByAgentRefRefreshResponses = {
    /**
     * Access token refreshed.
     */
    200: AgentExchangeResponse;
};

export type PostV1AuthAgentsByAgentRefRefreshResponse = PostV1AuthAgentsByAgentRefRefreshResponses[keyof PostV1AuthAgentsByAgentRefRefreshResponses];

export type PostV1AuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/auth/logout';
};

export type PostV1AuthLogoutErrors = {
    /**
     * Unauthorized.
     */
    401: UnauthorizedError;
    /**
     * Error response.
     */
    default: ServiceError;
};

export type PostV1AuthLogoutError = PostV1AuthLogoutErrors[keyof PostV1AuthLogoutErrors];

export type PostV1AuthLogoutResponses = {
    /**
     * Logged out successfully.
     */
    200: LogoutResponse;
};

export type PostV1AuthLogoutResponse = PostV1AuthLogoutResponses[keyof PostV1AuthLogoutResponses];

export type GetV1AgentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/agents';
};

export type GetV1AgentsResponses = {
    /**
     * Agents retrieved successfully.
     */
    200: AgentListResponse;
};

export type GetV1AgentsResponse = GetV1AgentsResponses[keyof GetV1AgentsResponses];

export type PostV1AgentsData = {
    body: {
        name: string;
        ref?: string;
        description?: string;
        base_url?: string;
        billing_mode?: 'user' | 'agent';
        billing_account_id?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/agents';
};

export type PostV1AgentsErrors = {
    /**
     * Service error
     */
    default: ServiceError;
};

export type PostV1AgentsError = PostV1AgentsErrors[keyof PostV1AgentsErrors];

export type PostV1AgentsResponses = {
    /**
     * Agent created.
     */
    201: AgentResponse;
};

export type PostV1AgentsResponse = PostV1AgentsResponses[keyof PostV1AgentsResponses];

export type GetV1AgentsGraphData = {
    body?: never;
    path?: never;
    query?: {
        account_id?: string;
        agent_ref?: string;
        /**
         * ISO timestamp inclusive lower bound.
         */
        from?: string;
        /**
         * ISO timestamp exclusive upper bound.
         */
        to?: string;
        /**
         * Filter by run status. Can be provided multiple times or as a comma-separated list.
         */
        status?: string | Array<string>;
        /**
         * Include runs invoked by humans (1/true to enable).
         */
        include_human_invokers?: '0' | '1' | 'false' | 'true';
        /**
         * Limit the number of edges returned.
         */
        limit?: string;
    };
    url: '/v1/agents/graph';
};

export type GetV1AgentsGraphResponses = {
    /**
     * Graph data
     */
    200: AgentGraph;
};

export type GetV1AgentsGraphResponse = GetV1AgentsGraphResponses[keyof GetV1AgentsGraphResponses];

export type DeleteV1AgentsByAgentRefData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}';
};

export type DeleteV1AgentsByAgentRefErrors = {
    /**
     * Service error
     */
    default: ServiceError;
};

export type DeleteV1AgentsByAgentRefError = DeleteV1AgentsByAgentRefErrors[keyof DeleteV1AgentsByAgentRefErrors];

export type DeleteV1AgentsByAgentRefResponses = {
    /**
     * Agent deleted.
     */
    204: void;
};

export type DeleteV1AgentsByAgentRefResponse = DeleteV1AgentsByAgentRefResponses[keyof DeleteV1AgentsByAgentRefResponses];

export type GetV1AgentsByAgentRefData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}';
};

export type GetV1AgentsByAgentRefErrors = {
    /**
     * Agent not found
     */
    404: NotFoundError;
};

export type GetV1AgentsByAgentRefError = GetV1AgentsByAgentRefErrors[keyof GetV1AgentsByAgentRefErrors];

export type GetV1AgentsByAgentRefResponses = {
    /**
     * Agent found
     */
    200: AgentDetail;
};

export type GetV1AgentsByAgentRefResponse = GetV1AgentsByAgentRefResponses[keyof GetV1AgentsByAgentRefResponses];

export type PatchV1AgentsByAgentRefData = {
    body: {
        name?: string;
        description?: string;
        base_url?: string;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}';
};

export type PatchV1AgentsByAgentRefErrors = {
    /**
     * Service error
     */
    default: ServiceError;
};

export type PatchV1AgentsByAgentRefError = PatchV1AgentsByAgentRefErrors[keyof PatchV1AgentsByAgentRefErrors];

export type PatchV1AgentsByAgentRefResponses = {
    /**
     * Agent updated.
     */
    200: AgentResponse;
};

export type PatchV1AgentsByAgentRefResponse = PatchV1AgentsByAgentRefResponses[keyof PatchV1AgentsByAgentRefResponses];

export type GetV1AgentsByAgentRefHealthData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/health';
};

export type GetV1AgentsByAgentRefHealthResponses = {
    /**
     * Health response proxied from agent.
     */
    200: string;
};

export type GetV1AgentsByAgentRefHealthResponse = GetV1AgentsByAgentRefHealthResponses[keyof GetV1AgentsByAgentRefHealthResponses];

export type GetV1AgentsByAgentRefEntrypointsData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: {
        /**
         * Set to 1 to refresh cached entrypoints from upstream.
         */
        refresh?: string;
    };
    url: '/v1/agents/{agentRef}/entrypoints';
};

export type GetV1AgentsByAgentRefEntrypointsErrors = {
    /**
     * Service error
     */
    default: ServiceError;
};

export type GetV1AgentsByAgentRefEntrypointsError = GetV1AgentsByAgentRefEntrypointsErrors[keyof GetV1AgentsByAgentRefEntrypointsErrors];

export type GetV1AgentsByAgentRefEntrypointsResponses = {
    /**
     * Entrypoints listed successfully.
     */
    200: AgentEntrypointList;
};

export type GetV1AgentsByAgentRefEntrypointsResponse = GetV1AgentsByAgentRefEntrypointsResponses[keyof GetV1AgentsByAgentRefEntrypointsResponses];

export type PostV1AgentsByAgentRefRefreshEntrypointsData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/refresh-entrypoints';
};

export type PostV1AgentsByAgentRefRefreshEntrypointsErrors = {
    /**
     * Service error
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefRefreshEntrypointsError = PostV1AgentsByAgentRefRefreshEntrypointsErrors[keyof PostV1AgentsByAgentRefRefreshEntrypointsErrors];

export type PostV1AgentsByAgentRefRefreshEntrypointsResponses = {
    /**
     * Entrypoints refreshed.
     */
    200: AgentEntrypointRefresh;
};

export type PostV1AgentsByAgentRefRefreshEntrypointsResponse = PostV1AgentsByAgentRefRefreshEntrypointsResponses[keyof PostV1AgentsByAgentRefRefreshEntrypointsResponses];

export type GetV1AgentsByAgentRefCredentialsData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: {
        /**
         * Include revoked credentials (1/true/yes).
         */
        include_revoked?: string;
    };
    url: '/v1/agents/{agentRef}/credentials';
};

export type GetV1AgentsByAgentRefCredentialsErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type GetV1AgentsByAgentRefCredentialsError = GetV1AgentsByAgentRefCredentialsErrors[keyof GetV1AgentsByAgentRefCredentialsErrors];

export type GetV1AgentsByAgentRefCredentialsResponses = {
    /**
     * Credentials listed.
     */
    200: AgentCredentialListResponse;
};

export type GetV1AgentsByAgentRefCredentialsResponse = GetV1AgentsByAgentRefCredentialsResponses[keyof GetV1AgentsByAgentRefCredentialsResponses];

export type PostV1AgentsByAgentRefCredentialsData = {
    body: AgentCredentialCreateRequest;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/credentials';
};

export type PostV1AgentsByAgentRefCredentialsErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefCredentialsError = PostV1AgentsByAgentRefCredentialsErrors[keyof PostV1AgentsByAgentRefCredentialsErrors];

export type PostV1AgentsByAgentRefCredentialsResponses = {
    /**
     * Credential created.
     */
    201: AgentCredentialResponse;
};

export type PostV1AgentsByAgentRefCredentialsResponse = PostV1AgentsByAgentRefCredentialsResponses[keyof PostV1AgentsByAgentRefCredentialsResponses];

export type DeleteV1AgentsByAgentRefCredentialsByCredentialIdData = {
    body?: never;
    path: {
        agentRef: string;
        credentialId: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/credentials/{credentialId}';
};

export type DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type DeleteV1AgentsByAgentRefCredentialsByCredentialIdError = DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors[keyof DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors];

export type DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses = {
    /**
     * Credential revoked.
     */
    200: AgentCredentialResponse;
};

export type DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponse = DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses[keyof DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses];

export type GetV1AgentsByAgentRefTokensData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/tokens';
};

export type GetV1AgentsByAgentRefTokensErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type GetV1AgentsByAgentRefTokensError = GetV1AgentsByAgentRefTokensErrors[keyof GetV1AgentsByAgentRefTokensErrors];

export type GetV1AgentsByAgentRefTokensResponses = {
    /**
     * Tokens listed.
     */
    200: AgentTokenList;
};

export type GetV1AgentsByAgentRefTokensResponse = GetV1AgentsByAgentRefTokensResponses[keyof GetV1AgentsByAgentRefTokensResponses];

export type PostV1AgentsByAgentRefTokensData = {
    body: {
        scopes?: Array<'wallet.sign' | 'wallet.send'>;
        description?: string;
        expires_in_minutes?: number;
        [key: string]: unknown | Array<'wallet.sign' | 'wallet.send'> | string | number | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/tokens';
};

export type PostV1AgentsByAgentRefTokensErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefTokensError = PostV1AgentsByAgentRefTokensErrors[keyof PostV1AgentsByAgentRefTokensErrors];

export type PostV1AgentsByAgentRefTokensResponses = {
    /**
     * Token issued.
     */
    201: AgentTokenIssueResponse;
};

export type PostV1AgentsByAgentRefTokensResponse = PostV1AgentsByAgentRefTokensResponses[keyof PostV1AgentsByAgentRefTokensResponses];

export type PostV1AgentsByAgentRefRuntimeCredentialsData = {
    body: {
        credential_id?: string;
        scopes?: Array<'wallet.sign' | 'wallet.send'>;
        [key: string]: unknown | string | Array<'wallet.sign' | 'wallet.send'> | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/runtime-credentials';
};

export type PostV1AgentsByAgentRefRuntimeCredentialsErrors = {
    /**
     * Invalid request parameters.
     */
    400: ServiceError;
    /**
     * User is not authenticated.
     */
    401: UnauthorizedError;
    /**
     * User is not authorized.
     */
    403: ForbiddenError;
};

export type PostV1AgentsByAgentRefRuntimeCredentialsError = PostV1AgentsByAgentRefRuntimeCredentialsErrors[keyof PostV1AgentsByAgentRefRuntimeCredentialsErrors];

export type PostV1AgentsByAgentRefRuntimeCredentialsResponses = {
    /**
     * Runtime credential issued.
     */
    201: {
        agentRef: string;
        credentialId: string;
        accessToken: string;
        accessExpiresAt: string;
        refreshToken: string;
        refreshExpiresAt: string;
        scopes: Array<'wallet.sign' | 'wallet.send'>;
    };
};

export type PostV1AgentsByAgentRefRuntimeCredentialsResponse = PostV1AgentsByAgentRefRuntimeCredentialsResponses[keyof PostV1AgentsByAgentRefRuntimeCredentialsResponses];

export type DeleteV1AgentsByAgentRefTokensByTokenIdData = {
    body?: never;
    path: {
        agentRef: string;
        tokenId: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/tokens/{tokenId}';
};

export type DeleteV1AgentsByAgentRefTokensByTokenIdErrors = {
    /**
     * Not authorized.
     */
    403: ForbiddenError;
    /**
     * Service error
     */
    default: ServiceError;
};

export type DeleteV1AgentsByAgentRefTokensByTokenIdError = DeleteV1AgentsByAgentRefTokensByTokenIdErrors[keyof DeleteV1AgentsByAgentRefTokensByTokenIdErrors];

export type DeleteV1AgentsByAgentRefTokensByTokenIdResponses = {
    /**
     * Token revoked.
     */
    204: void;
};

export type DeleteV1AgentsByAgentRefTokensByTokenIdResponse = DeleteV1AgentsByAgentRefTokensByTokenIdResponses[keyof DeleteV1AgentsByAgentRefTokensByTokenIdResponses];

export type PostV1AgentsByAgentRefEntrypointsByKeyInvokeData = {
    body: AgentInvokeRequest;
    path: {
        agentRef: string;
        key: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/entrypoints/{key}/invoke';
};

export type PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors = {
    /**
     * Proxy error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyInvokeError = PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors[keyof PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors];

export type PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses = {
    /**
     * Invocation result.
     */
    200: AgentInvokeResponse;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponse = PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses[keyof PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses];

export type PostV1AgentsByAgentRefEntrypointsByKeyStreamData = {
    body: AgentInvokeRequest;
    path: {
        agentRef: string;
        key: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/entrypoints/{key}/stream';
};

export type PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors = {
    /**
     * Proxy error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyStreamError = PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors[keyof PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors];

export type PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses = {
    /**
     * Server-Sent Events stream delivering run updates.
     */
    200: string;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyStreamResponse = PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses[keyof PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses];

export type PostV1AgentsByAgentRefWalletSendTransactionData = {
    body: {
        caip2: string;
        idempotency_key?: string;
        authorization_context?: {
            [key: string]: unknown;
        };
        params: {
            transaction: {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
            [key: string]: unknown | {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
        };
        [key: string]: unknown | string | {
            [key: string]: unknown;
        } | {
            transaction: {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
            [key: string]: unknown | {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
        } | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/wallet/send-transaction';
};

export type PostV1AgentsByAgentRefWalletSendTransactionErrors = {
    /**
     * Unauthorized.
     */
    401: UnauthorizedError;
    /**
     * Service error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefWalletSendTransactionError = PostV1AgentsByAgentRefWalletSendTransactionErrors[keyof PostV1AgentsByAgentRefWalletSendTransactionErrors];

export type PostV1AgentsByAgentRefWalletSendTransactionResponses = {
    /**
     * Transaction sent.
     */
    200: AgentWalletTransactionResponse;
};

export type PostV1AgentsByAgentRefWalletSendTransactionResponse = PostV1AgentsByAgentRefWalletSendTransactionResponses[keyof PostV1AgentsByAgentRefWalletSendTransactionResponses];

export type PostV1AgentsByAgentRefWalletSignTransactionData = {
    body: {
        caip2: string;
        idempotency_key?: string;
        authorization_context?: {
            [key: string]: unknown;
        };
        params: {
            transaction: {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
            [key: string]: unknown | {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
        };
        [key: string]: unknown | string | {
            [key: string]: unknown;
        } | {
            transaction: {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
            [key: string]: unknown | {
                to?: string;
                from?: string;
                value?: string | number;
                data?: string;
                gas?: string | number;
                gas_price?: string | number;
                gasPrice?: string | number;
                gas_limit?: string | number;
                gasLimit?: string | number;
                max_fee_per_gas?: string | number;
                maxFeePerGas?: string | number;
                max_priority_fee_per_gas?: string | number;
                maxPriorityFeePerGas?: string | number;
                nonce?: string | number;
                chainId?: string | number;
                chain_id?: string | number;
                type?: 0 | 1 | 2 | string | number;
                [key: string]: unknown | string | string | number | string | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | string | number | 0 | 1 | 2 | string | number | undefined;
            };
        } | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/wallet/sign-transaction';
};

export type PostV1AgentsByAgentRefWalletSignTransactionErrors = {
    /**
     * Unauthorized.
     */
    401: UnauthorizedError;
    /**
     * Service error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefWalletSignTransactionError = PostV1AgentsByAgentRefWalletSignTransactionErrors[keyof PostV1AgentsByAgentRefWalletSignTransactionErrors];

export type PostV1AgentsByAgentRefWalletSignTransactionResponses = {
    /**
     * Transaction signed.
     */
    200: AgentWalletSignedResponse;
};

export type PostV1AgentsByAgentRefWalletSignTransactionResponse = PostV1AgentsByAgentRefWalletSignTransactionResponses[keyof PostV1AgentsByAgentRefWalletSignTransactionResponses];

export type PostV1AgentsByAgentRefWalletSignMessageData = {
    body: {
        message: string;
        idempotency_key?: string;
        authorization_context?: {
            [key: string]: unknown;
        };
        encoding?: 'utf-8' | 'hex';
        [key: string]: unknown | string | {
            [key: string]: unknown;
        } | 'utf-8' | 'hex' | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/wallet/sign-message';
};

export type PostV1AgentsByAgentRefWalletSignMessageErrors = {
    /**
     * Unauthorized.
     */
    401: UnauthorizedError;
    /**
     * Service error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefWalletSignMessageError = PostV1AgentsByAgentRefWalletSignMessageErrors[keyof PostV1AgentsByAgentRefWalletSignMessageErrors];

export type PostV1AgentsByAgentRefWalletSignMessageResponses = {
    /**
     * Message signed.
     */
    200: AgentWalletSignedResponse;
};

export type PostV1AgentsByAgentRefWalletSignMessageResponse = PostV1AgentsByAgentRefWalletSignMessageResponses[keyof PostV1AgentsByAgentRefWalletSignMessageResponses];

export type PostV1AgentsByAgentRefWalletSignTypedDataData = {
    body: {
        typed_data: {
            domain: {
                [key: string]: unknown;
            };
            primary_type: string;
            types: {
                [key: string]: Array<{
                    name: string;
                    type: string;
                }>;
            };
            message: {
                [key: string]: unknown;
            };
        };
        idempotency_key?: string;
        authorization_context?: {
            [key: string]: unknown;
        };
        [key: string]: unknown | {
            domain: {
                [key: string]: unknown;
            };
            primary_type: string;
            types: {
                [key: string]: Array<{
                    name: string;
                    type: string;
                }>;
            };
            message: {
                [key: string]: unknown;
            };
        } | string | {
            [key: string]: unknown;
        } | undefined;
    };
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/wallet/sign-typed-data';
};

export type PostV1AgentsByAgentRefWalletSignTypedDataErrors = {
    /**
     * Unauthorized.
     */
    401: UnauthorizedError;
    /**
     * Service error.
     */
    default: ServiceError;
};

export type PostV1AgentsByAgentRefWalletSignTypedDataError = PostV1AgentsByAgentRefWalletSignTypedDataErrors[keyof PostV1AgentsByAgentRefWalletSignTypedDataErrors];

export type PostV1AgentsByAgentRefWalletSignTypedDataResponses = {
    /**
     * Typed data signed.
     */
    200: AgentWalletSignedResponse;
};

export type PostV1AgentsByAgentRefWalletSignTypedDataResponse = PostV1AgentsByAgentRefWalletSignTypedDataResponses[keyof PostV1AgentsByAgentRefWalletSignTypedDataResponses];

export type GetV1AgentsByAgentRefA2aCardData = {
    body?: never;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/a2a/card';
};

export type GetV1AgentsByAgentRefA2aCardErrors = {
    /**
     * Agent not found
     */
    404: NotFoundError;
};

export type GetV1AgentsByAgentRefA2aCardError = GetV1AgentsByAgentRefA2aCardErrors[keyof GetV1AgentsByAgentRefA2aCardErrors];

export type GetV1AgentsByAgentRefA2aCardResponses = {
    /**
     * Success
     */
    200: A2aCard;
};

export type GetV1AgentsByAgentRefA2aCardResponse = GetV1AgentsByAgentRefA2aCardResponses[keyof GetV1AgentsByAgentRefA2aCardResponses];

export type PostV1AgentsByAgentRefA2aRpcData = {
    body: A2aRpcRequest;
    path: {
        agentRef: string;
    };
    query?: never;
    url: '/v1/agents/{agentRef}/a2a/rpc';
};

export type PostV1AgentsByAgentRefA2aRpcErrors = {
    /**
     * Invalid request or upstream error
     */
    400: A2aRpcErrorResponse;
    /**
     * Agent not found
     */
    404: A2aRpcErrorResponse;
};

export type PostV1AgentsByAgentRefA2aRpcError = PostV1AgentsByAgentRefA2aRpcErrors[keyof PostV1AgentsByAgentRefA2aRpcErrors];

export type PostV1AgentsByAgentRefA2aRpcResponses = {
    /**
     * Success
     */
    200: A2aRpcSuccessResponse;
};

export type PostV1AgentsByAgentRefA2aRpcResponse = PostV1AgentsByAgentRefA2aRpcResponses[keyof PostV1AgentsByAgentRefA2aRpcResponses];

export type GetV1A2aRegistryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Full-text search across agents and skills.
         */
        q?: string;
        /**
         * Filter by skill identifier.
         */
        skill?: string;
        /**
         * Filter by streaming capability.
         */
        streaming?: 'true' | 'false';
        /**
         * Filter by payment requirement.
         */
        paid?: 'true' | 'false';
        /**
         * Select whether to use cached cards, live fetch, or automatic fallback.
         */
        mode?: 'cache' | 'live' | 'auto';
        /**
         * Maximum number of results to return (1-100).
         */
        limit?: string;
        /**
         * Cursor for pagination.
         */
        cursor?: string;
    };
    url: '/v1/a2a/registry';
};

export type GetV1A2aRegistryResponses = {
    /**
     * Registry results.
     */
    200: RegistryResponse;
};

export type GetV1A2aRegistryResponse = GetV1A2aRegistryResponses[keyof GetV1A2aRegistryResponses];

export type GetV1UsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/users/me';
};

export type GetV1UsersMeErrors = {
    /**
     * User is not authenticated.
     */
    401: UnauthorizedError;
};

export type GetV1UsersMeError = GetV1UsersMeErrors[keyof GetV1UsersMeErrors];

export type GetV1UsersMeResponses = {
    /**
     * Current user details.
     */
    200: UserSessionResponse;
};

export type GetV1UsersMeResponse = GetV1UsersMeResponses[keyof GetV1UsersMeResponses];

export type PostV1UsersMeWalletsData = {
    body: CreateWalletRequest;
    path?: never;
    query?: never;
    url: '/v1/users/me/wallets';
};

export type PostV1UsersMeWalletsErrors = {
    /**
     * Invalid request or missing primary account.
     */
    400: NoPrimaryAccountError | ServiceError;
    /**
     * User is not authenticated.
     */
    401: UnauthorizedError;
    /**
     * Internal error.
     */
    500: InternalError;
};

export type PostV1UsersMeWalletsError = PostV1UsersMeWalletsErrors[keyof PostV1UsersMeWalletsErrors];

export type PostV1UsersMeWalletsResponses = {
    /**
     * Wallet created successfully.
     */
    200: CreateWalletResponse;
};

export type PostV1UsersMeWalletsResponse = PostV1UsersMeWalletsResponses[keyof PostV1UsersMeWalletsResponses];

export type GetV1OnrampBuyOptionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ISO 3166-1 alpha-2 country code.
         */
        country: string;
        /**
         * ISO 3166-2 subdivision/state code (required for some countries).
         */
        subdivision?: string;
        /**
         * Optional comma separated list of networks (CAIP-2 identifiers) to filter buy options.
         */
        networks?: string;
    };
    url: '/v1/onramp/buy-options';
};

export type GetV1OnrampBuyOptionsErrors = {
    /**
     * Invalid request or upstream validation error.
     */
    400: CoinbaseOnrampError;
    /**
     * Server misconfiguration or Coinbase failure.
     */
    500: CoinbaseOnrampError;
};

export type GetV1OnrampBuyOptionsError = GetV1OnrampBuyOptionsErrors[keyof GetV1OnrampBuyOptionsErrors];

export type GetV1OnrampBuyOptionsResponses = {
    /**
     * Available buy options.
     */
    200: unknown;
};

export type PostV1OnrampBuyQuoteData = {
    body?: CoinbaseBuyQuoteRequest;
    path?: never;
    query?: never;
    url: '/v1/onramp/buy-quote';
};

export type PostV1OnrampBuyQuoteErrors = {
    /**
     * Validation error.
     */
    400: CoinbaseOnrampError;
    /**
     * Server misconfiguration or Coinbase failure.
     */
    500: CoinbaseOnrampError;
};

export type PostV1OnrampBuyQuoteError = PostV1OnrampBuyQuoteErrors[keyof PostV1OnrampBuyQuoteErrors];

export type PostV1OnrampBuyQuoteResponses = {
    /**
     * Buy quote created successfully.
     */
    200: unknown;
};

export type PostV1OnrampWebhookData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/v1/onramp/webhook';
};

export type PostV1OnrampWebhookErrors = {
    /**
     * Invalid payload.
     */
    400: CoinbaseOnrampError;
};

export type PostV1OnrampWebhookError = PostV1OnrampWebhookErrors[keyof PostV1OnrampWebhookErrors];

export type PostV1OnrampWebhookResponses = {
    /**
     * Webhook accepted.
     */
    200: {
        received: true;
    };
};

export type PostV1OnrampWebhookResponse = PostV1OnrampWebhookResponses[keyof PostV1OnrampWebhookResponses];

export type GetV1OnchainBalancesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Comma separated list of networks to include (`base`, `solana`). Defaults to both.
         */
        networks?: string;
        /**
         * Comma separated list of tokens to include (`eth`, `sol`, `usdc`, `dreams`). Defaults to all.
         */
        tokens?: string;
    };
    url: '/v1/onchain/balances';
};

export type GetV1OnchainBalancesErrors = {
    /**
     * The query parameters were invalid.
     */
    400: InvalidRequestError;
    /**
     * Missing or invalid session.
     */
    401: UnauthorizedError;
};

export type GetV1OnchainBalancesError = GetV1OnchainBalancesErrors[keyof GetV1OnchainBalancesErrors];

export type GetV1OnchainBalancesResponses = {
    /**
     * Balances retrieved successfully.
     */
    200: OnchainBalancesResponse;
};

export type GetV1OnchainBalancesResponse = GetV1OnchainBalancesResponses[keyof GetV1OnchainBalancesResponses];

export type PostV1AgentsByAgentRefEntrypointsByKeyRunsData = {
    body: InvokeRequest;
    path: {
        agentRef: string;
        key: string;
    };
    query?: {
        /**
         * Set to 1 to wait for the run to complete.
         */
        wait?: '1';
    };
    url: '/v1/agents/{agentRef}/entrypoints/{key}/runs';
};

export type PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors = {
    /**
     * Upstream rejected the request.
     */
    400: ProxyError;
    /**
     * Agent or entrypoint not found.
     */
    404: ProxyError;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyRunsError = PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors[keyof PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors];

export type PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses = {
    /**
     * Run completed successfully or proxied response from upstream.
     */
    200: InvokeResult;
    /**
     * Run enqueued for asynchronous processing.
     */
    202: RunQueuedResponse;
};

export type PostV1AgentsByAgentRefEntrypointsByKeyRunsResponse = PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses[keyof PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses];

export type GetV1RunsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of runs to return (1-200).
         */
        limit?: string;
        /**
         * Filter runs by agent reference.
         */
        agent_ref?: string;
    };
    url: '/v1/runs';
};

export type GetV1RunsResponses = {
    /**
     * Runs listed.
     */
    200: RunListResponse;
};

export type GetV1RunsResponse = GetV1RunsResponses[keyof GetV1RunsResponses];

export type GetV1RunsByRunIdData = {
    body?: never;
    path: {
        runId: string;
    };
    query?: never;
    url: '/v1/runs/{runId}';
};

export type GetV1RunsByRunIdErrors = {
    /**
     * Run not found.
     */
    404: NotFoundError;
};

export type GetV1RunsByRunIdError = GetV1RunsByRunIdErrors[keyof GetV1RunsByRunIdErrors];

export type GetV1RunsByRunIdResponses = {
    /**
     * Run details.
     */
    200: RunResponse;
};

export type GetV1RunsByRunIdResponse = GetV1RunsByRunIdResponses[keyof GetV1RunsByRunIdResponses];

export type GetV1RunsByRunIdLedgerData = {
    body?: never;
    path: {
        runId: string;
    };
    query?: never;
    url: '/v1/runs/{runId}/ledger';
};

export type GetV1RunsByRunIdLedgerErrors = {
    /**
     * Run not found.
     */
    404: NotFoundError;
};

export type GetV1RunsByRunIdLedgerError = GetV1RunsByRunIdLedgerErrors[keyof GetV1RunsByRunIdLedgerErrors];

export type GetV1RunsByRunIdLedgerResponses = {
    /**
     * Ledger entries.
     */
    200: RunLedgerResponse;
};

export type GetV1RunsByRunIdLedgerResponse = GetV1RunsByRunIdLedgerResponses[keyof GetV1RunsByRunIdLedgerResponses];

export type GetV1RunsByRunIdStreamData = {
    body?: never;
    path: {
        runId: string;
    };
    query?: never;
    url: '/v1/runs/{runId}/stream';
};

export type GetV1RunsByRunIdStreamErrors = {
    /**
     * Run not found.
     */
    404: NotFoundError;
};

export type GetV1RunsByRunIdStreamError = GetV1RunsByRunIdStreamErrors[keyof GetV1RunsByRunIdStreamErrors];

export type GetV1RunsByRunIdStreamResponses = {
    /**
     * Server-Sent Events stream of run updates.
     */
    200: string;
};

export type GetV1RunsByRunIdStreamResponse = GetV1RunsByRunIdStreamResponses[keyof GetV1RunsByRunIdStreamResponses];
