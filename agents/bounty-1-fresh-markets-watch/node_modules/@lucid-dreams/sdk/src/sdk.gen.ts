// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteV1AgentsByAgentRefCredentialsByCredentialIdData, DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors, DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses, DeleteV1AgentsByAgentRefData, DeleteV1AgentsByAgentRefErrors, DeleteV1AgentsByAgentRefResponses, DeleteV1AgentsByAgentRefTokensByTokenIdData, DeleteV1AgentsByAgentRefTokensByTokenIdErrors, DeleteV1AgentsByAgentRefTokensByTokenIdResponses, GetV1A2aRegistryData, GetV1A2aRegistryResponses, GetV1AgentsByAgentRefA2aCardData, GetV1AgentsByAgentRefA2aCardErrors, GetV1AgentsByAgentRefA2aCardResponses, GetV1AgentsByAgentRefCredentialsData, GetV1AgentsByAgentRefCredentialsErrors, GetV1AgentsByAgentRefCredentialsResponses, GetV1AgentsByAgentRefData, GetV1AgentsByAgentRefEntrypointsData, GetV1AgentsByAgentRefEntrypointsErrors, GetV1AgentsByAgentRefEntrypointsResponses, GetV1AgentsByAgentRefErrors, GetV1AgentsByAgentRefHealthData, GetV1AgentsByAgentRefHealthResponses, GetV1AgentsByAgentRefResponses, GetV1AgentsByAgentRefTokensData, GetV1AgentsByAgentRefTokensErrors, GetV1AgentsByAgentRefTokensResponses, GetV1AgentsData, GetV1AgentsGraphData, GetV1AgentsGraphResponses, GetV1AgentsResponses, GetV1OnchainBalancesData, GetV1OnchainBalancesErrors, GetV1OnchainBalancesResponses, GetV1OnrampBuyOptionsData, GetV1OnrampBuyOptionsErrors, GetV1OnrampBuyOptionsResponses, GetV1RunsByRunIdData, GetV1RunsByRunIdErrors, GetV1RunsByRunIdLedgerData, GetV1RunsByRunIdLedgerErrors, GetV1RunsByRunIdLedgerResponses, GetV1RunsByRunIdResponses, GetV1RunsByRunIdStreamData, GetV1RunsByRunIdStreamErrors, GetV1RunsByRunIdStreamResponses, GetV1RunsData, GetV1RunsResponses, GetV1UsersMeData, GetV1UsersMeErrors, GetV1UsersMeResponses, PatchV1AgentsByAgentRefData, PatchV1AgentsByAgentRefErrors, PatchV1AgentsByAgentRefResponses, PostV1AgentsByAgentRefA2aRpcData, PostV1AgentsByAgentRefA2aRpcErrors, PostV1AgentsByAgentRefA2aRpcResponses, PostV1AgentsByAgentRefCredentialsData, PostV1AgentsByAgentRefCredentialsErrors, PostV1AgentsByAgentRefCredentialsResponses, PostV1AgentsByAgentRefEntrypointsByKeyInvokeData, PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors, PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses, PostV1AgentsByAgentRefEntrypointsByKeyRunsData, PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors, PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses, PostV1AgentsByAgentRefEntrypointsByKeyStreamData, PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors, PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses, PostV1AgentsByAgentRefRefreshEntrypointsData, PostV1AgentsByAgentRefRefreshEntrypointsErrors, PostV1AgentsByAgentRefRefreshEntrypointsResponses, PostV1AgentsByAgentRefRuntimeCredentialsData, PostV1AgentsByAgentRefRuntimeCredentialsErrors, PostV1AgentsByAgentRefRuntimeCredentialsResponses, PostV1AgentsByAgentRefTokensData, PostV1AgentsByAgentRefTokensErrors, PostV1AgentsByAgentRefTokensResponses, PostV1AgentsByAgentRefWalletSendTransactionData, PostV1AgentsByAgentRefWalletSendTransactionErrors, PostV1AgentsByAgentRefWalletSendTransactionResponses, PostV1AgentsByAgentRefWalletSignMessageData, PostV1AgentsByAgentRefWalletSignMessageErrors, PostV1AgentsByAgentRefWalletSignMessageResponses, PostV1AgentsByAgentRefWalletSignTransactionData, PostV1AgentsByAgentRefWalletSignTransactionErrors, PostV1AgentsByAgentRefWalletSignTransactionResponses, PostV1AgentsByAgentRefWalletSignTypedDataData, PostV1AgentsByAgentRefWalletSignTypedDataErrors, PostV1AgentsByAgentRefWalletSignTypedDataResponses, PostV1AgentsData, PostV1AgentsErrors, PostV1AgentsResponses, PostV1AuthAgentsByAgentRefChallengeData, PostV1AuthAgentsByAgentRefChallengeErrors, PostV1AuthAgentsByAgentRefChallengeResponses, PostV1AuthAgentsByAgentRefExchangeData, PostV1AuthAgentsByAgentRefExchangeErrors, PostV1AuthAgentsByAgentRefExchangeResponses, PostV1AuthAgentsByAgentRefRefreshData, PostV1AuthAgentsByAgentRefRefreshErrors, PostV1AuthAgentsByAgentRefRefreshResponses, PostV1AuthCoinbaseData, PostV1AuthCoinbaseErrors, PostV1AuthCoinbaseResponses, PostV1AuthLogoutData, PostV1AuthLogoutErrors, PostV1AuthLogoutResponses, PostV1AuthPrivyData, PostV1AuthPrivyErrors, PostV1AuthPrivyResponses, PostV1OnrampBuyQuoteData, PostV1OnrampBuyQuoteErrors, PostV1OnrampBuyQuoteResponses, PostV1OnrampWebhookData, PostV1OnrampWebhookErrors, PostV1OnrampWebhookResponses, PostV1UsersMeWalletsData, PostV1UsersMeWalletsErrors, PostV1UsersMeWalletsResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Exchange Privy token
 *
 * Exchange a Privy token for an authenticated session.
 */
export const postV1AuthPrivy = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthPrivyData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AuthPrivyResponses, PostV1AuthPrivyErrors, ThrowOnError>({
        url: '/v1/auth/privy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Exchange Coinbase token
 *
 * Exchange a Coinbase access token for an authenticated session.
 */
export const postV1AuthCoinbase = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthCoinbaseData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AuthCoinbaseResponses, PostV1AuthCoinbaseErrors, ThrowOnError>({
        url: '/v1/auth/coinbase',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create agent auth challenge
 *
 * Create a challenge that an agent must sign to authenticate.
 */
export const postV1AuthAgentsByAgentRefChallenge = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefChallengeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefChallengeResponses, PostV1AuthAgentsByAgentRefChallengeErrors, ThrowOnError>({
        url: '/v1/auth/agents/{agentRef}/challenge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Exchange agent challenge
 *
 * Exchange a signed challenge for agent access tokens.
 */
export const postV1AuthAgentsByAgentRefExchange = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefExchangeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefExchangeResponses, PostV1AuthAgentsByAgentRefExchangeErrors, ThrowOnError>({
        url: '/v1/auth/agents/{agentRef}/exchange',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh agent access token
 *
 * Refresh an agent access token using a refresh token.
 */
export const postV1AuthAgentsByAgentRefRefresh = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthAgentsByAgentRefRefreshData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AuthAgentsByAgentRefRefreshResponses, PostV1AuthAgentsByAgentRefRefreshErrors, ThrowOnError>({
        url: '/v1/auth/agents/{agentRef}/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 *
 * Invalidate the current session token and clear cookies.
 */
export const postV1AuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostV1AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostV1AuthLogoutResponses, PostV1AuthLogoutErrors, ThrowOnError>({
        url: '/v1/auth/logout',
        ...options
    });
};

/**
 * List agents
 *
 * Retrieve up to 100 agents accessible to the current user.
 */
export const getV1Agents = <ThrowOnError extends boolean = false>(options?: Options<GetV1AgentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1AgentsResponses, unknown, ThrowOnError>({
        url: '/v1/agents',
        ...options
    });
};

/**
 * Create agent
 *
 * Create a new agent with the provided configuration.
 */
export const postV1Agents = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsResponses, PostV1AgentsErrors, ThrowOnError>({
        url: '/v1/agents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Agent run graph
 *
 * Fetch aggregate data about agent runs for visualization analytics.
 */
export const getV1AgentsGraph = <ThrowOnError extends boolean = false>(options?: Options<GetV1AgentsGraphData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1AgentsGraphResponses, unknown, ThrowOnError>({
        url: '/v1/agents/graph',
        ...options
    });
};

/**
 * Delete agent
 *
 * Delete an agent and its cached entrypoints.
 */
export const deleteV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefResponses, DeleteV1AgentsByAgentRefErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}',
        ...options
    });
};

/**
 * Get agent details
 *
 * Fetch an agent along with its billing information.
 */
export const getV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefResponses, GetV1AgentsByAgentRefErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}',
        ...options
    });
};

/**
 * Update agent
 *
 * Update an existing agent.
 */
export const patchV1AgentsByAgentRef = <ThrowOnError extends boolean = false>(options: Options<PatchV1AgentsByAgentRefData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV1AgentsByAgentRefResponses, PatchV1AgentsByAgentRefErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check agent health
 *
 * Proxy request to the agent's health endpoint.
 */
export const getV1AgentsByAgentRefHealth = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefHealthData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefHealthResponses, unknown, ThrowOnError>({
        url: '/v1/agents/{agentRef}/health',
        ...options
    });
};

/**
 * List agent entrypoints
 *
 * List entrypoints for an agent, optionally refreshing from upstream.
 */
export const getV1AgentsByAgentRefEntrypoints = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefEntrypointsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefEntrypointsResponses, GetV1AgentsByAgentRefEntrypointsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/entrypoints',
        ...options
    });
};

/**
 * Refresh agent entrypoints
 *
 * Force refresh an agent's entrypoints from upstream.
 */
export const postV1AgentsByAgentRefRefreshEntrypoints = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefRefreshEntrypointsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefRefreshEntrypointsResponses, PostV1AgentsByAgentRefRefreshEntrypointsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/refresh-entrypoints',
        ...options
    });
};

/**
 * List agent credentials
 *
 * List credentials associated with an agent.
 */
export const getV1AgentsByAgentRefCredentials = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefCredentialsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefCredentialsResponses, GetV1AgentsByAgentRefCredentialsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/credentials',
        ...options
    });
};

/**
 * Create agent credential
 *
 * Create a new credential for an agent.
 */
export const postV1AgentsByAgentRefCredentials = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefCredentialsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefCredentialsResponses, PostV1AgentsByAgentRefCredentialsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke agent credential
 *
 * Revoke a credential from an agent.
 */
export const deleteV1AgentsByAgentRefCredentialsByCredentialId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefCredentialsByCredentialIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefCredentialsByCredentialIdResponses, DeleteV1AgentsByAgentRefCredentialsByCredentialIdErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/credentials/{credentialId}',
        ...options
    });
};

/**
 * List agent tokens
 *
 * List API tokens issued for an agent.
 */
export const getV1AgentsByAgentRefTokens = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefTokensData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefTokensResponses, GetV1AgentsByAgentRefTokensErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/tokens',
        ...options
    });
};

/**
 * Create agent token
 *
 * Issue a new API token for an agent.
 */
export const postV1AgentsByAgentRefTokens = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefTokensData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefTokensResponses, PostV1AgentsByAgentRefTokensErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Issue agent runtime credential
 *
 * Generate a refresh token backed by a managed wallet credential for use with the agent runtime.
 */
export const postV1AgentsByAgentRefRuntimeCredentials = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefRuntimeCredentialsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefRuntimeCredentialsResponses, PostV1AgentsByAgentRefRuntimeCredentialsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/runtime-credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke agent token
 *
 * Revoke an existing API token.
 */
export const deleteV1AgentsByAgentRefTokensByTokenId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1AgentsByAgentRefTokensByTokenIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV1AgentsByAgentRefTokensByTokenIdResponses, DeleteV1AgentsByAgentRefTokensByTokenIdErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/tokens/{tokenId}',
        ...options
    });
};

/**
 * Invoke agent entrypoint
 *
 * Trigger an agent entrypoint synchronously.
 */
export const postV1AgentsByAgentRefEntrypointsByKeyInvoke = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyInvokeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefEntrypointsByKeyInvokeResponses, PostV1AgentsByAgentRefEntrypointsByKeyInvokeErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/entrypoints/{key}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Stream agent entrypoint
 *
 * Trigger an agent entrypoint and stream responses via SSE.
 */
export const postV1AgentsByAgentRefEntrypointsByKeyStream = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyStreamData, ThrowOnError>) => {
    return (options.client ?? client).sse.post<PostV1AgentsByAgentRefEntrypointsByKeyStreamResponses, PostV1AgentsByAgentRefEntrypointsByKeyStreamErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/entrypoints/{key}/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send transaction with agent wallet
 *
 * Send a transaction using the agent's managed wallet.
 */
export const postV1AgentsByAgentRefWalletSendTransaction = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSendTransactionData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSendTransactionResponses, PostV1AgentsByAgentRefWalletSendTransactionErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/wallet/send-transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Sign transaction with agent wallet
 *
 * Sign a transaction payload using the agent's managed wallet.
 */
export const postV1AgentsByAgentRefWalletSignTransaction = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignTransactionData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignTransactionResponses, PostV1AgentsByAgentRefWalletSignTransactionErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/wallet/sign-transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Sign message with agent wallet
 *
 * Sign an arbitrary message using the agent's managed wallet.
 */
export const postV1AgentsByAgentRefWalletSignMessage = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignMessageResponses, PostV1AgentsByAgentRefWalletSignMessageErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/wallet/sign-message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Sign typed data with agent wallet
 *
 * Sign typed structured data via the agent's managed wallet.
 */
export const postV1AgentsByAgentRefWalletSignTypedData = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefWalletSignTypedDataData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefWalletSignTypedDataResponses, PostV1AgentsByAgentRefWalletSignTypedDataErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/wallet/sign-typed-data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the A2A card for an agent
 *
 * This endpoint is used to get the A2A card for an agent.
 */
export const getV1AgentsByAgentRefA2aCard = <ThrowOnError extends boolean = false>(options: Options<GetV1AgentsByAgentRefA2aCardData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1AgentsByAgentRefA2aCardResponses, GetV1AgentsByAgentRefA2aCardErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/a2a/card',
        ...options
    });
};

/**
 * JSON-RPC endpoint for A2A tasks
 *
 * This endpoint is used to send and subscribe to A2A tasks.
 */
export const postV1AgentsByAgentRefA2aRpc = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefA2aRpcData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefA2aRpcResponses, PostV1AgentsByAgentRefA2aRpcErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/a2a/rpc',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List agents in the A2A registry
 *
 * Return a paginated list of agent cards, optionally filtering by skill, streaming capability, or payment requirements.
 */
export const getV1A2aRegistry = <ThrowOnError extends boolean = false>(options?: Options<GetV1A2aRegistryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1A2aRegistryResponses, unknown, ThrowOnError>({
        url: '/v1/a2a/registry',
        ...options
    });
};

/**
 * Get current user
 *
 * Retrieve the authenticated user, session, and memberships.
 */
export const getV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetV1UsersMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1UsersMeResponses, GetV1UsersMeErrors, ThrowOnError>({
        url: '/v1/users/me',
        ...options
    });
};

/**
 * Create user wallet
 *
 * Create a managed wallet for the authenticated user on the specified chain.
 */
export const postV1UsersMeWallets = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersMeWalletsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1UsersMeWalletsResponses, PostV1UsersMeWalletsErrors, ThrowOnError>({
        url: '/v1/users/me/wallets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch available Coinbase Onramp payment options.
 */
export const getV1OnrampBuyOptions = <ThrowOnError extends boolean = false>(options: Options<GetV1OnrampBuyOptionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1OnrampBuyOptionsResponses, GetV1OnrampBuyOptionsErrors, ThrowOnError>({
        url: '/v1/onramp/buy-options',
        ...options
    });
};

/**
 * Create a Coinbase Onramp buy quote.
 */
export const postV1OnrampBuyQuote = <ThrowOnError extends boolean = false>(options?: Options<PostV1OnrampBuyQuoteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostV1OnrampBuyQuoteResponses, PostV1OnrampBuyQuoteErrors, ThrowOnError>({
        url: '/v1/onramp/buy-quote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Receive Coinbase Onramp webhook callbacks.
 *
 * Validates the Coinbase webhook signature and acknowledges receipt. Actual balance reconciliation is handled externally.
 */
export const postV1OnrampWebhook = <ThrowOnError extends boolean = false>(options?: Options<PostV1OnrampWebhookData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostV1OnrampWebhookResponses, PostV1OnrampWebhookErrors, ThrowOnError>({
        url: '/v1/onramp/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get embedded wallet balances
 *
 * Returns cached onchain balances for the authenticated user's embedded Base and Solana wallets.
 */
export const getV1OnchainBalances = <ThrowOnError extends boolean = false>(options?: Options<GetV1OnchainBalancesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1OnchainBalancesResponses, GetV1OnchainBalancesErrors, ThrowOnError>({
        url: '/v1/onchain/balances',
        ...options
    });
};

/**
 * Invoke an agent entrypoint
 *
 * Enqueue a run for an agent entrypoint or execute it synchronously when wait=1.
 */
export const postV1AgentsByAgentRefEntrypointsByKeyRuns = <ThrowOnError extends boolean = false>(options: Options<PostV1AgentsByAgentRefEntrypointsByKeyRunsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV1AgentsByAgentRefEntrypointsByKeyRunsResponses, PostV1AgentsByAgentRefEntrypointsByKeyRunsErrors, ThrowOnError>({
        url: '/v1/agents/{agentRef}/entrypoints/{key}/runs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List runs
 *
 * List recent runs with optional filtering.
 */
export const getV1Runs = <ThrowOnError extends boolean = false>(options?: Options<GetV1RunsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1RunsResponses, unknown, ThrowOnError>({
        url: '/v1/runs',
        ...options
    });
};

/**
 * Get run detail
 *
 * Fetch detailed information about a run.
 */
export const getV1RunsByRunId = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1RunsByRunIdResponses, GetV1RunsByRunIdErrors, ThrowOnError>({
        url: '/v1/runs/{runId}',
        ...options
    });
};

/**
 * Run ledger entries
 *
 * Retrieve ledger entries associated with the run.
 */
export const getV1RunsByRunIdLedger = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdLedgerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV1RunsByRunIdLedgerResponses, GetV1RunsByRunIdLedgerErrors, ThrowOnError>({
        url: '/v1/runs/{runId}/ledger',
        ...options
    });
};

/**
 * Stream run updates
 *
 * Stream updates for a run via Server-Sent Events until completion.
 */
export const getV1RunsByRunIdStream = <ThrowOnError extends boolean = false>(options: Options<GetV1RunsByRunIdStreamData, ThrowOnError>) => {
    return (options.client ?? client).sse.get<GetV1RunsByRunIdStreamResponses, GetV1RunsByRunIdStreamErrors, ThrowOnError>({
        url: '/v1/runs/{runId}/stream',
        ...options
    });
};
