{
  "openapi": "3.0.0",
  "info": {
    "version": "0.1.0",
    "title": "My API"
  },
  "components": {
    "schemas": {
      "AuthSessionResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {},
            "additionalProperties": {
              "nullable": true
            }
          },
          "session": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "expires_at": {
                "type": "string"
              }
            },
            "required": ["token", "expires_at"]
          },
          "memberships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "nullable": true
              }
            }
          },
          "primary_account_id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["user", "session", "memberships", "primary_account_id"]
      },
      "ServiceError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["error"]
      },
      "PrivyExchangeRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "minLength": 1,
            "example": "privy-token-123"
          }
        },
        "required": ["token"]
      },
      "CoinbaseExchangeRequest": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "minLength": 1,
            "example": "coinbase-access-token"
          }
        },
        "required": ["accessToken"]
      },
      "AgentChallengeResponse": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "credential_id": {
                "type": "string",
                "nullable": true
              },
              "payload": {
                "nullable": true
              },
              "payload_hash": {
                "type": "string"
              },
              "nonce": {
                "type": "string"
              },
              "scopes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "issued_at": {
                "type": "string"
              },
              "expires_at": {
                "type": "string"
              },
              "server_signature": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "id",
              "credential_id",
              "payload_hash",
              "nonce",
              "scopes",
              "issued_at",
              "expires_at",
              "server_signature"
            ]
          }
        },
        "required": ["challenge"]
      },
      "InternalError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["internal_error"]
          }
        },
        "required": ["error"]
      },
      "AgentChallengeRequest": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string",
            "minLength": 1,
            "example": "cred_123"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "maxItems": 10,
            "example": ["sign_transaction"]
          }
        }
      },
      "AgentExchangeResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string",
            "enum": ["bearer"]
          },
          "expires_at": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "refresh_expires_at": {
            "type": "string"
          },
          "credential": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "revocation_nonce": {
                "type": "string",
                "nullable": true
              }
            },
            "required": ["id", "scopes", "revocation_nonce"]
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_at",
          "refresh_token",
          "refresh_expires_at",
          "credential"
        ]
      },
      "AgentExchangeRequest": {
        "type": "object",
        "properties": {
          "challenge_id": {
            "type": "string",
            "minLength": 1,
            "example": "challenge_abc"
          },
          "signature": {
            "type": "string",
            "minLength": 1,
            "example": "0xdeadbeef"
          },
          "credential_id": {
            "type": "string",
            "minLength": 1,
            "example": "cred_123"
          }
        },
        "required": ["challenge_id", "signature"]
      },
      "AgentRefreshRequest": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "minLength": 1,
            "example": "refresh-token"
          }
        },
        "required": ["refresh_token"]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [true]
          }
        },
        "required": ["ok"]
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["unauthorized"]
          }
        },
        "required": ["error"]
      },
      "AgentListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "nullable": true
              }
            }
          }
        },
        "required": ["items"]
      },
      "AgentGraph": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "AgentDetail": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["not_found"]
          }
        },
        "required": ["error"]
      },
      "AgentEntrypointList": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "AgentEntrypointRefresh": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "AgentResponse": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "AgentCredential": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "agent_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "managed_wallet_id": {
            "type": "string",
            "nullable": true
          },
          "wallet_address": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "is_primary": {
            "type": "boolean"
          },
          "revocation_nonce": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "rotated_at": {
            "type": "string",
            "nullable": true
          },
          "revoked_at": {
            "type": "string",
            "nullable": true
          },
          "last_used_at": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "agent_id",
          "type",
          "managed_wallet_id",
          "wallet_address",
          "description",
          "scopes",
          "metadata",
          "is_primary",
          "revocation_nonce",
          "created_at",
          "updated_at",
          "rotated_at",
          "revoked_at",
          "last_used_at"
        ]
      },
      "AgentCredentialListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentCredential"
            }
          }
        },
        "required": ["items"]
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["forbidden"]
          }
        },
        "required": ["error"]
      },
      "AgentCredentialResponse": {
        "type": "object",
        "properties": {
          "credential": {
            "$ref": "#/components/schemas/AgentCredential"
          }
        },
        "required": ["credential"]
      },
      "AgentCredentialCreateRequest": {
        "type": "object",
        "properties": {
          "wallet_id": {
            "type": "string",
            "minLength": 1,
            "example": "wallet_123"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "maxItems": 10,
            "example": ["sign_message"]
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "example": "Primary signing credential"
          },
          "make_primary": {
            "type": "boolean",
            "example": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "example": {
              "environment": "production"
            }
          }
        },
        "required": ["wallet_id"]
      },
      "AgentTokenList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "nullable": true
              }
            }
          }
        },
        "required": ["items"]
      },
      "AgentTokenIssueResponse": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["tokenId", "token", "expiresAt", "scopes", "description"]
      },
      "AgentInvokeResponse": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "AgentInvokeRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "example": {
              "prompt": "Hello from client"
            }
          },
          "session_id": {
            "type": "string",
            "example": "session-123"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "example": {
              "priority": "normal"
            }
          },
          "timeout_ms": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "example": 30000
          }
        },
        "required": ["input"]
      },
      "AgentWalletTransactionResponse": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "nullable": true
              }
            },
            "required": ["id", "displayName"]
          },
          "wallet": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "address": {
                "type": "string",
                "nullable": true
              },
              "chain": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "chainType": {
                "type": "string"
              },
              "externalId": {
                "type": "string",
                "nullable": true
              },
              "privyWalletId": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "id",
              "address",
              "chain",
              "provider",
              "chainType",
              "externalId",
              "privyWalletId",
              "status"
            ]
          },
          "transaction": {
            "nullable": true
          }
        },
        "required": ["account", "wallet"]
      },
      "AgentWalletSignedResponse": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "nullable": true
              }
            },
            "required": ["id", "displayName"]
          },
          "wallet": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "address": {
                "type": "string",
                "nullable": true
              },
              "chain": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "chainType": {
                "type": "string"
              },
              "externalId": {
                "type": "string",
                "nullable": true
              },
              "privyWalletId": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "id",
              "address",
              "chain",
              "provider",
              "chainType",
              "externalId",
              "privyWalletId",
              "status"
            ]
          },
          "signed": {
            "nullable": true
          }
        },
        "required": ["account", "wallet"]
      },
      "A2ACard": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "streaming": {
                "type": "boolean"
              },
              "pushNotifications": {
                "type": "boolean"
              },
              "stateTransitionHistory": {
                "type": "boolean"
              }
            },
            "required": [
              "streaming",
              "pushNotifications",
              "stateTransitionHistory"
            ]
          },
          "defaultInputModes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultOutputModes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "inputModes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "outputModes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["id", "name", "inputModes", "outputModes"]
            }
          },
          "supportsAuthenticatedExtendedCard": {
            "type": "boolean"
          },
          "entrypoints": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "streaming": {
                  "type": "boolean"
                },
                "input_schema": {
                  "nullable": true
                },
                "output_schema": {
                  "nullable": true
                }
              }
            }
          }
        },
        "required": [
          "name",
          "version",
          "url",
          "capabilities",
          "defaultInputModes",
          "defaultOutputModes",
          "skills",
          "supportsAuthenticatedExtendedCard",
          "entrypoints"
        ]
      },
      "MessagePart": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["text"]
          },
          "text": {
            "type": "string"
          }
        },
        "required": ["kind", "text"]
      },
      "Message": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["message"]
          },
          "role": {
            "type": "string",
            "enum": ["user", "agent"]
          },
          "messageId": {
            "type": "string"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagePart"
            }
          },
          "taskId": {
            "type": "string"
          },
          "contextId": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": ["kind", "role", "messageId", "parts"]
      },
      "TaskStatus": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "submitted",
              "working",
              "input-required",
              "completed",
              "canceled",
              "failed",
              "unknown"
            ],
            "example": "completed"
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": ["state"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["task"]
          },
          "id": {
            "type": "string"
          },
          "contextId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "artifacts": {
            "type": "array",
            "items": {
              "nullable": true
            }
          }
        },
        "required": ["kind", "id"]
      },
      "A2ARpcSuccessResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": ["2.0"]
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "result": {
            "$ref": "#/components/schemas/Task"
          }
        },
        "required": ["jsonrpc", "result"]
      },
      "A2ARpcErrorResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": ["2.0"]
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              },
              "message": {
                "type": "string"
              },
              "data": {
                "nullable": true
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["jsonrpc", "error"]
      },
      "A2ARpcRequest": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "minLength": 1,
            "example": "2.0"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ],
            "example": "abc123"
          },
          "method": {
            "type": "string",
            "minLength": 1,
            "example": "tasks/send"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "example": {
              "skillId": "default",
              "input": {
                "text": "Hello"
              }
            }
          }
        },
        "required": ["jsonrpc", "method"]
      },
      "RegistrySkill": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "default"
          },
          "name": {
            "type": "string",
            "example": "Default Skill"
          },
          "description": {
            "type": "string",
            "example": "Primary entrypoint for general requests."
          },
          "streaming": {
            "type": "boolean",
            "description": "Whether the skill supports streaming responses.",
            "example": true
          },
          "pricing_invoke": {
            "type": "string"
          },
          "pricing_stream": {
            "type": "string"
          }
        },
        "required": ["id"]
      },
      "RegistryItem": {
        "type": "object",
        "properties": {
          "agentRef": {
            "type": "string",
            "example": "demo-agent"
          },
          "name": {
            "type": "string",
            "example": "Demo Agent"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "streaming": {
                "type": "boolean"
              }
            }
          },
          "payments": {
            "nullable": true
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrySkill"
            }
          },
          "source": {
            "type": "string",
            "enum": ["cache", "live"]
          }
        },
        "required": ["agentRef", "name", "skills", "source"]
      },
      "RegistryResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistryItem"
            }
          },
          "next_cursor": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["items", "next_cursor"]
      },
      "UserMembership": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "membership": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "nullable": true
              }
            }
          }
        },
        "required": ["account", "membership", "wallets"]
      },
      "UserSessionResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "session": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "expires_at": {
                "type": "string",
                "nullable": true
              },
              "id": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "nullable": true
              },
              "updated_at": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "token",
              "expires_at",
              "id",
              "created_at",
              "updated_at"
            ]
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMembership"
            }
          },
          "primary_account_id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["user", "session", "memberships", "primary_account_id"]
      },
      "CreateWalletResponse": {
        "type": "object",
        "properties": {
          "wallet": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMembership"
            }
          },
          "default_wallet_id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["wallet", "memberships", "default_wallet_id"]
      },
      "NoPrimaryAccountError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["no_primary_account"]
          }
        },
        "required": ["error"]
      },
      "CreateWalletRequest": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "example": "Agent Ops Wallet"
          },
          "chain": {
            "type": "string",
            "enum": ["ethereum", "solana"],
            "example": "ethereum"
          },
          "agent_ref": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "example": "agent_123"
          },
          "make_default": {
            "type": "boolean",
            "example": true
          }
        },
        "required": ["label", "chain"]
      },
      "CoinbaseOnrampError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["coinbase_onramp_error"]
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "details": {
            "nullable": true
          }
        },
        "required": ["error", "message"]
      },
      "CoinbaseBuyQuoteRequest": {
        "type": "object",
        "properties": {
          "purchaseCurrency": {
            "type": "string",
            "minLength": 2,
            "description": "Asset symbol to purchase, e.g. `eth`.",
            "example": "eth"
          },
          "purchaseNetwork": {
            "type": "string",
            "description": "Network identifier for the asset, e.g. `base`.",
            "example": "base"
          },
          "paymentAmount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Fiat amount to pay.",
            "example": "50"
          },
          "paymentCurrency": {
            "type": "string",
            "minLength": 3,
            "description": "Fiat currency code, e.g. `usd`.",
            "example": "usd"
          },
          "paymentMethod": {
            "type": "string",
            "minLength": 1,
            "description": "Identifier of the selected funding payment method.",
            "example": "coinbase"
          },
          "country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "ISO 3166-1 alpha-2 country code.",
            "example": "US"
          },
          "subdivision": {
            "type": "string",
            "description": "ISO 3166-2 subdivision/state code; mandatory for US residents.",
            "example": "CA"
          },
          "destinationAddress": {
            "type": "string",
            "description": "Optional wallet address that will receive purchased assets. Enables one-click Coinbase checkout.",
            "example": "0x1234abcd..."
          }
        },
        "required": [
          "purchaseCurrency",
          "paymentAmount",
          "paymentCurrency",
          "paymentMethod",
          "country"
        ]
      },
      "TokenBalance": {
        "type": "object",
        "nullable": true,
        "properties": {
          "token": {
            "type": "string",
            "enum": ["eth", "sol", "usdc", "dreams"]
          },
          "symbol": {
            "type": "string"
          },
          "tokenType": {
            "type": "string",
            "enum": ["native", "erc20", "spl"]
          },
          "amount": {
            "type": "string"
          },
          "rawAmount": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "mint": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          },
          "usdValue": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "token",
          "symbol",
          "tokenType",
          "amount",
          "rawAmount",
          "decimals",
          "updatedAt"
        ]
      },
      "BaseBalances": {
        "type": "object",
        "nullable": true,
        "properties": {
          "eth": {
            "$ref": "#/components/schemas/TokenBalance"
          },
          "usdc": {
            "$ref": "#/components/schemas/TokenBalance"
          },
          "dreams": {
            "$ref": "#/components/schemas/TokenBalance"
          }
        },
        "required": ["eth", "usdc", "dreams"]
      },
      "SolanaBalances": {
        "type": "object",
        "nullable": true,
        "properties": {
          "sol": {
            "$ref": "#/components/schemas/TokenBalance"
          },
          "usdc": {
            "$ref": "#/components/schemas/TokenBalance"
          },
          "dreams": {
            "$ref": "#/components/schemas/TokenBalance"
          }
        },
        "required": ["sol", "usdc", "dreams"]
      },
      "OnchainBalancesResponse": {
        "type": "object",
        "properties": {
          "base": {
            "$ref": "#/components/schemas/BaseBalances"
          },
          "solana": {
            "$ref": "#/components/schemas/SolanaBalances"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["base", "solana", "warnings"]
      },
      "InvalidRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": ["invalid_request"]
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["error", "message"]
      },
      "InvokeResult": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["succeeded", "failed"]
          },
          "output": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "nullable": true
              }
            },
            "required": ["code", "message"]
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "number"
              },
              "completion_tokens": {
                "type": "number"
              },
              "total_tokens": {
                "type": "number"
              }
            }
          },
          "model": {
            "type": "string"
          },
          "timings": {
            "type": "object",
            "properties": {
              "total_ms": {
                "type": "number"
              }
            }
          }
        },
        "required": ["run_id", "status"]
      },
      "RunQueuedResponse": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["queued"]
          }
        },
        "required": ["run_id", "status"]
      },
      "ProxyError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "nullable": true
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["error"]
      },
      "InvokeRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "default": {},
            "example": {
              "prompt": "Hello from client"
            }
          },
          "session_id": {
            "type": "string",
            "example": "session-123"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "example": {
              "priority": "normal"
            }
          },
          "timeout_ms": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "example": 30000
          }
        }
      },
      "RunListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "nullable": true
              }
            }
          },
          "next_cursor": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["items", "next_cursor"]
      },
      "RunResponse": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "nullable": true
        }
      },
      "RunLedgerEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "runId": {
            "type": "string"
          },
          "agentRef": {
            "type": "string"
          },
          "debitedAccountId": {
            "type": "string",
            "nullable": true
          },
          "creditedAccountId": {
            "type": "string",
            "nullable": true
          },
          "pricingSnapshot": {
            "nullable": true
          },
          "amount": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "runId",
          "agentRef",
          "debitedAccountId",
          "creditedAccountId",
          "amount",
          "currency",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "RunLedgerResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunLedgerEntry"
            }
          }
        },
        "required": ["items"]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/v1/auth/privy": {
      "post": {
        "tags": ["auth"],
        "summary": "Exchange Privy token",
        "description": "Exchange a Privy token for an authenticated session.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivyExchangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSessionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/coinbase": {
      "post": {
        "tags": ["auth"],
        "summary": "Exchange Coinbase token",
        "description": "Exchange a Coinbase access token for an authenticated session.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinbaseExchangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSessionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/agents/{agentRef}/challenge": {
      "post": {
        "tags": ["auth"],
        "summary": "Create agent auth challenge",
        "description": "Create a challenge that an agent must sign to authenticate.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentChallengeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Challenge created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentChallengeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalError"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/agents/{agentRef}/exchange": {
      "post": {
        "tags": ["auth"],
        "summary": "Exchange agent challenge",
        "description": "Exchange a signed challenge for agent access tokens.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentExchangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access granted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentExchangeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalError"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/agents/{agentRef}/refresh": {
      "post": {
        "tags": ["auth"],
        "summary": "Refresh agent access token",
        "description": "Refresh an agent access token using a refresh token.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentExchangeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalError"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout",
        "description": "Invalidate the current session token and clear cookies.",
        "responses": {
          "200": {
            "description": "Logged out successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents": {
      "get": {
        "tags": ["agents"],
        "summary": "List agents",
        "description": "Retrieve up to 100 agents accessible to the current user.",
        "responses": {
          "200": {
            "description": "Agents retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["agents"],
        "summary": "Create agent",
        "description": "Create a new agent with the provided configuration.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "ref": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "base_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "billing_mode": {
                    "type": "string",
                    "enum": ["user", "agent"]
                  },
                  "billing_account_id": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/graph": {
      "get": {
        "tags": ["agents"],
        "summary": "Agent run graph",
        "description": "Fetch aggregate data about agent runs for visualization analytics.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "acc_123"
            },
            "required": false,
            "name": "account_id",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "example": "demo-agent"
            },
            "required": false,
            "name": "agent_ref",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "ISO timestamp inclusive lower bound.",
              "example": "2024-01-01T00:00:00.000Z"
            },
            "required": false,
            "description": "ISO timestamp inclusive lower bound.",
            "name": "from",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "ISO timestamp exclusive upper bound.",
              "example": "2024-01-31T23:59:59.999Z"
            },
            "required": false,
            "description": "ISO timestamp exclusive upper bound.",
            "name": "to",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "Filter by run status. Can be provided multiple times or as a comma-separated list.",
              "example": ["succeeded", "failed"]
            },
            "required": false,
            "description": "Filter by run status. Can be provided multiple times or as a comma-separated list.",
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["0", "1", "false", "true"],
              "description": "Include runs invoked by humans (1/true to enable).",
              "example": "0"
            },
            "required": false,
            "description": "Include runs invoked by humans (1/true to enable).",
            "name": "include_human_invokers",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Limit the number of edges returned.",
              "example": "100"
            },
            "required": false,
            "description": "Limit the number of edges returned.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Graph data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentGraph"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}": {
      "get": {
        "tags": ["agents"],
        "summary": "Get agent details",
        "description": "Fetch an agent along with its billing information.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentDetail"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["agents"],
        "summary": "Update agent",
        "description": "Update an existing agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "base_url": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["agents"],
        "summary": "Delete agent",
        "description": "Delete an agent and its cached entrypoints.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Agent deleted."
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/health": {
      "get": {
        "tags": ["agents"],
        "summary": "Check agent health",
        "description": "Proxy request to the agent's health endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Health response proxied from agent.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "ok"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/entrypoints": {
      "get": {
        "tags": ["agents"],
        "summary": "List agent entrypoints",
        "description": "List entrypoints for an agent, optionally refreshing from upstream.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Set to 1 to refresh cached entrypoints from upstream.",
              "example": "1"
            },
            "required": false,
            "description": "Set to 1 to refresh cached entrypoints from upstream.",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entrypoints listed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentEntrypointList"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/refresh-entrypoints": {
      "post": {
        "tags": ["agents"],
        "summary": "Refresh agent entrypoints",
        "description": "Force refresh an agent's entrypoints from upstream.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Entrypoints refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentEntrypointRefresh"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/credentials": {
      "get": {
        "tags": ["agents"],
        "summary": "List agent credentials",
        "description": "List credentials associated with an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Include revoked credentials (1/true/yes).",
              "example": "0"
            },
            "required": false,
            "description": "Include revoked credentials (1/true/yes).",
            "name": "include_revoked",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentCredentialListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["agents"],
        "summary": "Create agent credential",
        "description": "Create a new credential for an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCredentialCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credential created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentCredentialResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/credentials/{credentialId}": {
      "delete": {
        "tags": ["agents"],
        "summary": "Revoke agent credential",
        "description": "Revoke a credential from an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "cred_123"
            },
            "required": true,
            "name": "credentialId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Credential revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentCredentialResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/tokens": {
      "get": {
        "tags": ["agents"],
        "summary": "List agent tokens",
        "description": "List API tokens issued for an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentTokenList"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["agents"],
        "summary": "Create agent token",
        "description": "Issue a new API token for an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["wallet.sign", "wallet.send"]
                    },
                    "minItems": 1
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 200
                  },
                  "expires_in_minutes": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1440
                  }
                },
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Token issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentTokenIssueResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/runtime-credentials": {
      "post": {
        "tags": ["agents"],
        "summary": "Issue agent runtime credential",
        "description": "Generate a refresh token backed by a managed wallet credential for use with the agent runtime.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credential_id": {
                    "type": "string",
                    "minLength": 1
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["wallet.sign", "wallet.send"]
                    },
                    "minItems": 1
                  }
                },
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Runtime credential issued.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agentRef": {
                      "type": "string"
                    },
                    "credentialId": {
                      "type": "string"
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "accessExpiresAt": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string",
                          "format": "date"
                        }
                      ]
                    },
                    "refreshToken": {
                      "type": "string"
                    },
                    "refreshExpiresAt": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string",
                          "format": "date"
                        }
                      ]
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["wallet.sign", "wallet.send"]
                      }
                    }
                  },
                  "required": [
                    "agentRef",
                    "credentialId",
                    "accessToken",
                    "accessExpiresAt",
                    "refreshToken",
                    "refreshExpiresAt",
                    "scopes"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/tokens/{tokenId}": {
      "delete": {
        "tags": ["agents"],
        "summary": "Revoke agent token",
        "description": "Revoke an existing API token.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "token_123"
            },
            "required": true,
            "name": "tokenId",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Token revoked."
          },
          "403": {
            "description": "Not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "default": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/entrypoints/{key}/invoke": {
      "post": {
        "tags": ["agents"],
        "summary": "Invoke agent entrypoint",
        "description": "Trigger an agent entrypoint synchronously.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "default"
            },
            "required": true,
            "name": "key",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentInvokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invocation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentInvokeResponse"
                }
              }
            }
          },
          "default": {
            "description": "Proxy error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/entrypoints/{key}/stream": {
      "post": {
        "tags": ["agents"],
        "summary": "Stream agent entrypoint",
        "description": "Trigger an agent entrypoint and stream responses via SSE.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "default"
            },
            "required": true,
            "name": "key",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentInvokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-Sent Events stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream delivering run updates.",
                  "example": "event: message\ndata: {\"type\":\"token\",\"data\":{\"text\":\"Hello\"}}\n\n"
                }
              }
            }
          },
          "default": {
            "description": "Proxy error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/wallet/send-transaction": {
      "post": {
        "tags": ["agents"],
        "summary": "Send transaction with agent wallet",
        "description": "Send a transaction using the agent's managed wallet.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caip2": {
                    "type": "string",
                    "minLength": 1
                  },
                  "idempotency_key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "authorization_context": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "transaction": {
                        "type": "object",
                        "properties": {
                          "to": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$/i"
                          },
                          "from": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$/i"
                          },
                          "value": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "data": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]*$"
                          },
                          "gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gas_price": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gasPrice": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gas_limit": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gasLimit": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "max_fee_per_gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "maxFeePerGas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "max_priority_fee_per_gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "maxPriorityFeePerGas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "nonce": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "chainId": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "chain_id": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "type": {
                            "anyOf": [
                              {
                                "type": "number",
                                "enum": [0]
                              },
                              {
                                "type": "number",
                                "enum": [1]
                              },
                              {
                                "type": "number",
                                "enum": [2]
                              },
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        },
                        "additionalProperties": {
                          "nullable": true
                        }
                      }
                    },
                    "required": ["transaction"],
                    "additionalProperties": {
                      "nullable": true
                    }
                  }
                },
                "required": ["caip2", "params"],
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "default": {
            "description": "Service error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/wallet/sign-transaction": {
      "post": {
        "tags": ["agents"],
        "summary": "Sign transaction with agent wallet",
        "description": "Sign a transaction payload using the agent's managed wallet.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caip2": {
                    "type": "string",
                    "minLength": 1
                  },
                  "idempotency_key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "authorization_context": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "transaction": {
                        "type": "object",
                        "properties": {
                          "to": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$/i"
                          },
                          "from": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$/i"
                          },
                          "value": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "data": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]*$"
                          },
                          "gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gas_price": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gasPrice": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gas_limit": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "gasLimit": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "max_fee_per_gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "maxFeePerGas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "max_priority_fee_per_gas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "maxPriorityFeePerGas": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "nonce": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "chainId": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "chain_id": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "type": {
                            "anyOf": [
                              {
                                "type": "number",
                                "enum": [0]
                              },
                              {
                                "type": "number",
                                "enum": [1]
                              },
                              {
                                "type": "number",
                                "enum": [2]
                              },
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        },
                        "additionalProperties": {
                          "nullable": true
                        }
                      }
                    },
                    "required": ["transaction"],
                    "additionalProperties": {
                      "nullable": true
                    }
                  }
                },
                "required": ["caip2", "params"],
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction signed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletSignedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "default": {
            "description": "Service error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/wallet/sign-message": {
      "post": {
        "tags": ["agents"],
        "summary": "Sign message with agent wallet",
        "description": "Sign an arbitrary message using the agent's managed wallet.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "minLength": 1
                  },
                  "idempotency_key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "authorization_context": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  },
                  "encoding": {
                    "type": "string",
                    "enum": ["utf-8", "hex"]
                  }
                },
                "required": ["message"],
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message signed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletSignedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "default": {
            "description": "Service error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/wallet/sign-typed-data": {
      "post": {
        "tags": ["agents"],
        "summary": "Sign typed data with agent wallet",
        "description": "Sign typed structured data via the agent's managed wallet.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "typed_data": {
                    "type": "object",
                    "properties": {
                      "domain": {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      },
                      "primary_type": {
                        "type": "string",
                        "minLength": 1
                      },
                      "types": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": ["name", "type"]
                          }
                        }
                      },
                      "message": {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      }
                    },
                    "required": ["domain", "primary_type", "types", "message"]
                  },
                  "idempotency_key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "authorization_context": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  }
                },
                "required": ["typed_data"],
                "additionalProperties": {
                  "nullable": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typed data signed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletSignedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "default": {
            "description": "Service error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/a2a/card": {
      "get": {
        "tags": ["a2a"],
        "summary": "Get the A2A card for an agent",
        "description": "This endpoint is used to get the A2A card for an agent.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/A2ACard"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/a2a/rpc": {
      "post": {
        "tags": ["a2a"],
        "summary": "JSON-RPC endpoint for A2A tasks",
        "description": "This endpoint is used to send and subscribe to A2A tasks.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/A2ARpcRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/A2ARpcSuccessResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream",
                  "example": "event: message\ndata: {\"kind\":\"task\",\"id\":\"run-1\"}\n\n"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or upstream error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/A2ARpcErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/A2ARpcErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/a2a/registry": {
      "get": {
        "tags": ["registry"],
        "summary": "List agents in the A2A registry",
        "description": "Return a paginated list of agent cards, optionally filtering by skill, streaming capability, or payment requirements.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Full-text search across agents and skills.",
              "example": "analytics"
            },
            "required": false,
            "description": "Full-text search across agents and skills.",
            "in": "query",
            "name": "q"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter by skill identifier.",
              "example": "summarize"
            },
            "required": false,
            "description": "Filter by skill identifier.",
            "in": "query",
            "name": "skill"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "description": "Filter by streaming capability.",
              "example": "true"
            },
            "required": false,
            "description": "Filter by streaming capability.",
            "in": "query",
            "name": "streaming"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "description": "Filter by payment requirement.",
              "example": "false"
            },
            "required": false,
            "description": "Filter by payment requirement.",
            "in": "query",
            "name": "paid"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["cache", "live", "auto"],
              "description": "Select whether to use cached cards, live fetch, or automatic fallback.",
              "example": "auto"
            },
            "required": false,
            "description": "Select whether to use cached cards, live fetch, or automatic fallback.",
            "in": "query",
            "name": "mode"
          },
          {
            "schema": {
              "type": "string",
              "description": "Maximum number of results to return (1-100).",
              "example": "20"
            },
            "required": false,
            "description": "Maximum number of results to return (1-100).",
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "description": "Cursor for pagination.",
              "example": "20"
            },
            "required": false,
            "description": "Cursor for pagination.",
            "in": "query",
            "name": "cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Registry results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/me": {
      "get": {
        "tags": ["users"],
        "summary": "Get current user",
        "description": "Retrieve the authenticated user, session, and memberships.",
        "responses": {
          "200": {
            "description": "Current user details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/me/wallets": {
      "post": {
        "tags": ["users"],
        "summary": "Create user wallet",
        "description": "Create a managed wallet for the authenticated user on the specified chain.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing primary account.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NoPrimaryAccountError"
                    },
                    {
                      "$ref": "#/components/schemas/ServiceError"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/onramp/buy-options": {
      "get": {
        "tags": ["onramp"],
        "summary": "Fetch available Coinbase Onramp payment options.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "description": "ISO 3166-1 alpha-2 country code.",
              "example": "US"
            },
            "required": true,
            "description": "ISO 3166-1 alpha-2 country code.",
            "in": "query",
            "name": "country"
          },
          {
            "schema": {
              "type": "string",
              "description": "ISO 3166-2 subdivision/state code (required for some countries).",
              "example": "CA"
            },
            "required": false,
            "description": "ISO 3166-2 subdivision/state code (required for some countries).",
            "in": "query",
            "name": "subdivision"
          },
          {
            "schema": {
              "type": "string",
              "description": "Optional comma separated list of networks (CAIP-2 identifiers) to filter buy options.",
              "example": "base,base-sepolia"
            },
            "required": false,
            "description": "Optional comma separated list of networks (CAIP-2 identifiers) to filter buy options.",
            "in": "query",
            "name": "networks"
          }
        ],
        "responses": {
          "200": {
            "description": "Available buy options.",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or upstream validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinbaseOnrampError"
                }
              }
            }
          },
          "500": {
            "description": "Server misconfiguration or Coinbase failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinbaseOnrampError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/onramp/buy-quote": {
      "post": {
        "tags": ["onramp"],
        "summary": "Create a Coinbase Onramp buy quote.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinbaseBuyQuoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Buy quote created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinbaseOnrampError"
                }
              }
            }
          },
          "500": {
            "description": "Server misconfiguration or Coinbase failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinbaseOnrampError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/onramp/webhook": {
      "post": {
        "tags": ["onramp"],
        "summary": "Receive Coinbase Onramp webhook callbacks.",
        "description": "Validates the Coinbase webhook signature and acknowledges receipt. Actual balance reconciliation is handled externally.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "received": {
                      "type": "boolean",
                      "enum": [true]
                    }
                  },
                  "required": ["received"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinbaseOnrampError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/onchain/balances": {
      "get": {
        "summary": "Get embedded wallet balances",
        "description": "Returns cached onchain balances for the authenticated user's embedded Base and Solana wallets.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Comma separated list of networks to include (`base`, `solana`). Defaults to both.",
              "example": "base,solana"
            },
            "required": false,
            "description": "Comma separated list of networks to include (`base`, `solana`). Defaults to both.",
            "in": "query",
            "name": "networks"
          },
          {
            "schema": {
              "type": "string",
              "description": "Comma separated list of tokens to include (`eth`, `sol`, `usdc`, `dreams`). Defaults to all.",
              "example": "eth,usdc"
            },
            "required": false,
            "description": "Comma separated list of tokens to include (`eth`, `sol`, `usdc`, `dreams`). Defaults to all.",
            "in": "query",
            "name": "tokens"
          }
        ],
        "responses": {
          "200": {
            "description": "Balances retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnchainBalancesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The query parameters were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agentRef}/entrypoints/{key}/runs": {
      "post": {
        "tags": ["agent-runs"],
        "summary": "Invoke an agent entrypoint",
        "description": "Enqueue a run for an agent entrypoint or execute it synchronously when wait=1.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "demo-agent"
            },
            "required": true,
            "name": "agentRef",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "default"
            },
            "required": true,
            "name": "key",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["1"],
              "description": "Set to 1 to wait for the run to complete.",
              "example": "1"
            },
            "required": false,
            "description": "Set to 1 to wait for the run to complete.",
            "name": "wait",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Run completed successfully or proxied response from upstream.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeResult"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of run updates.",
                  "example": "event: message\ndata: {\"type\":\"token\",\"data\":{\"text\":\"Hi\"}}\n\n"
                }
              }
            }
          },
          "202": {
            "description": "Run enqueued for asynchronous processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunQueuedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Upstream rejected the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "404": {
            "description": "Agent or entrypoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runs": {
      "get": {
        "tags": ["runs"],
        "summary": "List runs",
        "description": "List recent runs with optional filtering.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Maximum number of runs to return (1-200).",
              "example": "50"
            },
            "required": false,
            "description": "Maximum number of runs to return (1-200).",
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter runs by agent reference.",
              "example": "demo-agent"
            },
            "required": false,
            "description": "Filter runs by agent reference.",
            "in": "query",
            "name": "agent_ref"
          }
        ],
        "responses": {
          "200": {
            "description": "Runs listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runs/{runId}": {
      "get": {
        "tags": ["runs"],
        "summary": "Get run detail",
        "description": "Fetch detailed information about a run.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "run_123"
            },
            "required": true,
            "in": "path",
            "name": "runId"
          }
        ],
        "responses": {
          "200": {
            "description": "Run details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunResponse"
                }
              }
            }
          },
          "404": {
            "description": "Run not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runs/{runId}/ledger": {
      "get": {
        "tags": ["runs"],
        "summary": "Run ledger entries",
        "description": "Retrieve ledger entries associated with the run.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "run_123"
            },
            "required": true,
            "in": "path",
            "name": "runId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ledger entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunLedgerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Run not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runs/{runId}/stream": {
      "get": {
        "tags": ["runs"],
        "summary": "Stream run updates",
        "description": "Stream updates for a run via Server-Sent Events until completion.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "run_123"
            },
            "required": true,
            "in": "path",
            "name": "runId"
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream of run events.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of run updates.",
                  "example": "event: update\ndata: {\"status\":\"succeeded\"}\n\n"
                }
              }
            }
          },
          "404": {
            "description": "Run not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    }
  }
}
