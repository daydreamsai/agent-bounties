import { ai } from '@ax-llm/ax';
import { privateKeyToAccount } from 'viem/accounts';
import { wrapFetchWithPayment, createSigner } from 'x402-fetch';
import { z } from 'zod';
import { paymentMiddleware } from 'x402-hono';
import { Hono } from 'hono';
import { streamSSE } from 'hono/streaming';
import { html } from 'hono/html';
import { readFileSync } from 'fs';
import { Buffer } from 'buffer';

// src/ap2.ts
var CONTACT_ADDRESS_DATA_KEY = "contact_picker.ContactAddress";
var PAYMENT_METHOD_DATA_KEY = "payment_request.PaymentMethodData";
var INTENT_MANDATE_DATA_KEY = "ap2.mandates.IntentMandate";
var CART_MANDATE_DATA_KEY = "ap2.mandates.CartMandate";
var PAYMENT_MANDATE_DATA_KEY = "ap2.mandates.PaymentMandate";
var AP2_EXTENSION_URI = "https://github.com/google-agentic-commerce/ap2/tree/v0.1";

// ../agent-kit-identity/src/utils.ts
var ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";
function normalizeDomain(domain) {
  return domain?.trim?.().toLowerCase?.() ?? "";
}
function normalizeAddress(value) {
  if (!value) {
    throw new Error("invalid hex address");
  }
  const trimmed = value.trim();
  if (!/^0x[0-9a-fA-F]{40}$/.test(trimmed)) {
    throw new Error(`invalid hex address: ${value}`);
  }
  return trimmed.toLowerCase();
}
function sanitizeAddress(value) {
  if (!value) return ZERO_ADDRESS;
  try {
    return normalizeAddress(value);
  } catch {
    return ZERO_ADDRESS;
  }
}
function toCaip10(params) {
  const namespace = params.namespace ?? "eip155";
  const chainRef = typeof params.chainId === "number" ? params.chainId.toString(10) : `${params.chainId ?? ""}`;
  if (!chainRef) throw new Error("chainId is required for CAIP-10");
  const address = params.address?.toLowerCase?.();
  if (!address || !address.startsWith("0x")) {
    throw new Error("address must be a hex string");
  }
  return `${namespace}:${chainRef}:${address}`;
}

// ../agent-kit-identity/src/identity.ts
function normalizeAgentId(agentId) {
  if (typeof agentId === "bigint") {
    if (agentId < 0n) {
      throw new Error("agentId must be non-negative");
    }
    return agentId.toString(10);
  }
  if (typeof agentId === "number") {
    if (!Number.isFinite(agentId) || !Number.isInteger(agentId) || agentId < 0) {
      throw new Error("agentId must be a non-negative integer");
    }
    if (!Number.isSafeInteger(agentId)) {
      throw new Error(
        "agentId number must be a safe integer; use string or bigint for larger values"
      );
    }
    return agentId.toString(10);
  }
  const normalized = `${agentId ?? ""}`.trim();
  if (!normalized) {
    throw new Error("agentId is required");
  }
  return normalized;
}
function createRegistrationEntry(params) {
  const entry = {
    agentId: normalizeAgentId(params.agentId),
    agentAddress: toCaip10({
      namespace: params.namespace,
      chainId: params.chainId,
      address: params.address
    })
  };
  if (params.signature) {
    entry.signature = params.signature;
  }
  return entry;
}
function createTrustConfig(params, overrides) {
  return {
    registrations: [createRegistrationEntry(params)],
    ...overrides
  };
}
var IDENTITY_REGISTRY_ABI = [
  {
    type: "function",
    name: "New",
    stateMutability: "nonpayable",
    inputs: [
      { name: "agentDomain", type: "string" },
      { name: "agentAddress", type: "address" }
    ],
    outputs: [{ name: "agentId", type: "uint256" }]
  },
  {
    type: "function",
    name: "Update",
    stateMutability: "nonpayable",
    inputs: [
      { name: "agentId", type: "uint256" },
      { name: "agentDomain", type: "string" },
      { name: "agentAddress", type: "address" }
    ],
    outputs: [{ name: "ok", type: "bool" }]
  },
  {
    type: "function",
    name: "Get",
    stateMutability: "view",
    inputs: [{ name: "agentId", type: "uint256" }],
    outputs: [
      { name: "agentId", type: "uint256" },
      { name: "agentDomain", type: "string" },
      { name: "agentAddress", type: "address" }
    ]
  },
  {
    type: "function",
    name: "ResolveByDomain",
    stateMutability: "view",
    inputs: [{ name: "agentDomain", type: "string" }],
    outputs: [
      { name: "agentId", type: "uint256" },
      { name: "agentDomain", type: "string" },
      { name: "agentAddress", type: "address" }
    ]
  },
  {
    type: "function",
    name: "ResolveByAddress",
    stateMutability: "view",
    inputs: [{ name: "agentAddress", type: "address" }],
    outputs: [
      { name: "agentId", type: "uint256" },
      { name: "agentDomain", type: "string" },
      { name: "agentAddress", type: "address" }
    ]
  }
];
function createIdentityRegistryClient(options) {
  const {
    address,
    chainId,
    publicClient,
    walletClient,
    namespace = "eip155"
  } = options;
  function ensureWalletClient() {
    if (!walletClient) {
      throw new Error(
        "identity registry client requires walletClient for writes"
      );
    }
    return walletClient;
  }
  async function readRecord(fn, args) {
    const result = await publicClient.readContract({
      address,
      abi: IDENTITY_REGISTRY_ABI,
      functionName: fn,
      args
    });
    if (!result) return null;
    const [agentId, agentDomain, agentAddress] = result;
    if (!agentDomain && (!agentAddress || agentAddress === ZERO_ADDRESS)) {
      return null;
    }
    return {
      agentId,
      agentDomain,
      agentAddress: normalizeAddress(agentAddress)
    };
  }
  return {
    address,
    chainId,
    async get(agentId) {
      const id = BigInt(agentId);
      return readRecord("Get", [id]);
    },
    resolveByDomain(domain) {
      const normalized = normalizeDomain(domain);
      return readRecord("ResolveByDomain", [normalized]);
    },
    resolveByAddress(rawAddress) {
      const normalized = normalizeAddress(rawAddress);
      return readRecord("ResolveByAddress", [normalized]);
    },
    async register(input) {
      const wallet = ensureWalletClient();
      const normalizedDomain = normalizeDomain(input.domain);
      const normalizedAddress = normalizeAddress(
        input.agentAddress ?? wallet.account?.address ?? ZERO_ADDRESS
      );
      if (!normalizedDomain) {
        throw new Error("agent domain is required");
      }
      if (!normalizedAddress || normalizedAddress === ZERO_ADDRESS) {
        throw new Error("agent address is required");
      }
      const txHash = await wallet.writeContract({
        address,
        abi: IDENTITY_REGISTRY_ABI,
        functionName: "New",
        args: [normalizedDomain, normalizedAddress]
      });
      let agentId;
      try {
        const record = await readRecord("ResolveByDomain", [normalizedDomain]);
        agentId = record?.agentId;
      } catch {
        agentId = void 0;
      }
      return {
        transactionHash: txHash,
        agentAddress: normalizedAddress,
        agentId
      };
    },
    async update(input) {
      const wallet = ensureWalletClient();
      const agentId = BigInt(input.agentId);
      const normalizedDomain = typeof input.domain === "string" ? normalizeDomain(input.domain) : "";
      const normalizedAddress = typeof input.agentAddress === "string" ? normalizeAddress(input.agentAddress) : ZERO_ADDRESS;
      if (!normalizedDomain && (!normalizedAddress || normalizedAddress === ZERO_ADDRESS)) {
        throw new Error("update requires domain and/or agentAddress");
      }
      const txHash = await wallet.writeContract({
        address,
        abi: IDENTITY_REGISTRY_ABI,
        functionName: "Update",
        args: [
          agentId,
          normalizedDomain,
          normalizedAddress && normalizedAddress !== ZERO_ADDRESS ? normalizedAddress : ZERO_ADDRESS
        ]
      });
      let resultingRecord = null;
      try {
        if (normalizedDomain) {
          resultingRecord = await readRecord("ResolveByDomain", [
            normalizedDomain
          ]);
        }
        if (!resultingRecord) {
          resultingRecord = await readRecord("Get", [agentId]);
        }
      } catch {
        resultingRecord = null;
      }
      return {
        transactionHash: txHash,
        agentId: resultingRecord?.agentId ?? agentId
      };
    },
    toRegistrationEntry(record, signature) {
      if (chainId == null) {
        throw new Error(
          "identity registry client needs chainId to build CAIP-10 registration entries"
        );
      }
      return createRegistrationEntry({
        agentId: record.agentId,
        address: record.agentAddress,
        chainId,
        namespace,
        signature
      });
    }
  };
}
async function signAgentDomainProof(options) {
  const { domain, address, chainId, nonce, signer } = options;
  const normalizedDomain = normalizeDomain(domain);
  if (!normalizedDomain) throw new Error("domain is required");
  const normalizedAddress = normalizeAddress(address);
  if (!normalizedAddress || normalizedAddress === ZERO_ADDRESS) {
    throw new Error("address must be a valid hex address");
  }
  const message = buildOwnershipMessage({
    domain: normalizedDomain,
    address: normalizedAddress,
    chainId,
    nonce
  });
  const signature = await invokeSignMessage(signer, message);
  return signature;
}
function buildTrustConfigFromIdentity(record, options) {
  const chainRef = options?.chainId;
  if (chainRef == null) {
    throw new Error(
      "chainId is required to generate trust config registration entry"
    );
  }
  return createTrustConfig(
    {
      agentId: record.agentId,
      address: record.agentAddress,
      chainId: chainRef,
      namespace: options?.namespace,
      signature: options?.signature
    },
    options?.trustOverrides
  );
}
function buildOwnershipMessage(params) {
  const lines = [
    "ERC-8004 Agent Ownership Proof",
    `Domain: ${params.domain}`,
    `Address: ${params.address.toLowerCase()}`,
    `ChainId: ${params.chainId}`
  ];
  if (params.nonce) {
    lines.push(`Nonce: ${params.nonce}`);
  }
  return lines.join("\n");
}
async function invokeSignMessage(signer, message) {
  const candidate = signer;
  if (typeof candidate.signMessage !== "function") {
    throw new Error("signer does not expose signMessage");
  }
  try {
    const result2 = await candidate.signMessage(message);
    if (typeof result2 === "string") return result2;
  } catch (_) {
  }
  const result = await candidate.signMessage({ message });
  if (typeof result === "string") return result;
  throw new Error("signMessage did not return a signature string");
}
async function bootstrapTrust(options) {
  const normalizedDomain = normalizeDomain(options.domain);
  if (!normalizedDomain) {
    throw new Error("domain is required to bootstrap trust state");
  }
  const shouldRegister = Boolean(
    options.registerIfMissing && !options.skipRegister
  );
  const client = createIdentityRegistryClient({
    address: options.registryAddress,
    chainId: options.chainId,
    publicClient: options.publicClient,
    walletClient: options.walletClient,
    namespace: options.namespace
  });
  let record = await client.resolveByDomain(normalizedDomain).catch(() => null);
  let transactionHash;
  let didRegister = false;
  if (!record && options.onMissing) {
    const handled = await options.onMissing({
      client,
      normalizedDomain
    });
    if (handled) {
      record = handled;
    }
  }
  if (!record && shouldRegister) {
    const registration = await client.register({ domain: normalizedDomain });
    transactionHash = registration.transactionHash;
    didRegister = true;
    record = await client.resolveByDomain(normalizedDomain).catch(() => null);
    if (!record && registration.agentId != null) {
      record = {
        agentId: registration.agentId,
        agentDomain: normalizedDomain,
        agentAddress: registration.agentAddress
      };
    }
  }
  if (!record) {
    return {
      trust: void 0,
      record: null,
      transactionHash,
      didRegister
    };
  }
  let signature;
  if (options.signer) {
    signature = await signAgentDomainProof({
      domain: record.agentDomain,
      address: record.agentAddress,
      chainId: options.chainId,
      signer: options.signer,
      nonce: options.signatureNonce
    });
  }
  const trust = buildTrustConfigFromIdentity(record, {
    chainId: options.chainId,
    namespace: options.namespace,
    signature,
    trustOverrides: options.trustOverrides
  });
  return {
    trust,
    record,
    transactionHash,
    signature,
    didRegister
  };
}
var DEFAULT_CHAIN_ID = 84532;
var DEFAULT_NAMESPACE = "eip155";
var DEFAULT_TRUST_MODELS = [
  "feedback",
  "inference-validation"
];
var defaultLogger = {
  info: typeof console !== "undefined" && typeof console.info === "function" ? console.info.bind(console) : () => {
  },
  warn: typeof console !== "undefined" && typeof console.warn === "function" ? console.warn.bind(console) : () => {
  }
};
function parsePositiveInteger(value) {
  if (!value) return void 0;
  const parsed = Number(value);
  if (!Number.isFinite(parsed) || parsed <= 0) return void 0;
  return Math.trunc(parsed);
}
function resolveTrustOverrides(domain, overrides, fallback) {
  const result = {};
  if (domain) {
    result.trustModels = DEFAULT_TRUST_MODELS;
    const origin = domain.startsWith("http") ? domain : `https://${domain}`;
    result.validationRequestsUri = `${origin}/validation/requests.json`;
    result.validationResponsesUri = `${origin}/validation/responses.json`;
    result.feedbackDataUri = `${origin}/feedback.json`;
  }
  if (fallback) {
    if (fallback.trustModels !== void 0) {
      result.trustModels = fallback.trustModels;
    }
    if (fallback.validationRequestsUri !== void 0) {
      result.validationRequestsUri = fallback.validationRequestsUri;
    }
    if (fallback.validationResponsesUri !== void 0) {
      result.validationResponsesUri = fallback.validationResponsesUri;
    }
    if (fallback.feedbackDataUri !== void 0) {
      result.feedbackDataUri = fallback.feedbackDataUri;
    }
  }
  if (overrides) {
    if (overrides.trustModels !== void 0) {
      result.trustModels = overrides.trustModels;
    }
    if (overrides.validationRequestsUri !== void 0) {
      result.validationRequestsUri = overrides.validationRequestsUri;
    }
    if (overrides.validationResponsesUri !== void 0) {
      result.validationResponsesUri = overrides.validationResponsesUri;
    }
    if (overrides.feedbackDataUri !== void 0) {
      result.feedbackDataUri = overrides.feedbackDataUri;
    }
  }
  return Object.keys(result).length > 0 ? result : void 0;
}
function synthesizeTrustConfig(params) {
  try {
    const trust = createTrustConfig(
      {
        agentId: params.fallbackAgentId ?? 0,
        address: params.address,
        chainId: params.chainId,
        namespace: params.namespace,
        signature: params.signature
      },
      params.overrides
    );
    return {
      trust,
      record: void 0,
      transactionHash: void 0,
      signature: params.signature,
      didRegister: void 0,
      synthetic: true
    };
  } catch (error) {
    params.warn(
      "[agent-kit] unable to synthesise CAIP-10 identity entry",
      error
    );
    return null;
  }
}
async function bootstrapIdentity(options = {}) {
  const env = options.env ?? (typeof process !== "undefined" && typeof process.env === "object" ? process.env : {});
  const logger = {
    info: options.logger?.info ?? defaultLogger.info,
    warn: options.logger?.warn ?? defaultLogger.warn
  };
  const resolvedChainId = options.chainId ?? parsePositiveInteger(env.CHAIN_ID) ?? DEFAULT_CHAIN_ID;
  const domain = options.domain ?? env.AGENT_DOMAIN;
  const namespace = options.namespace ?? options.fallback?.namespace ?? DEFAULT_NAMESPACE;
  const registryAddress = options.registryAddress ?? env.IDENTITY_REGISTRY_ADDRESS;
  const rpcUrl = options.rpcUrl ?? env.RPC_URL;
  let publicClient = options.publicClient;
  let walletClient = options.walletClient;
  let signer = options.signer;
  if (!publicClient && options.makeClients && rpcUrl) {
    const produced = await options.makeClients({
      chainId: resolvedChainId,
      rpcUrl,
      env
    });
    if (produced?.publicClient) {
      publicClient = produced.publicClient;
      walletClient = walletClient ?? produced.walletClient;
      signer = signer ?? produced.signer ?? produced.walletClient;
    }
  }
  if (!signer && walletClient) {
    signer = walletClient;
  }
  const fallbackOverrides = resolveTrustOverrides(domain, void 0, {
    trustModels: options.fallback?.trustModels ?? (domain ? void 0 : DEFAULT_TRUST_MODELS),
    validationRequestsUri: options.fallback?.validationRequestsUri,
    validationResponsesUri: options.fallback?.validationResponsesUri,
    feedbackDataUri: options.fallback?.feedbackDataUri
  });
  const resolvedOverrides = resolveTrustOverrides(
    domain,
    options.trustOverrides,
    fallbackOverrides
  );
  if (domain && registryAddress && publicClient) {
    try {
      const result = await bootstrapTrust({
        domain,
        chainId: resolvedChainId,
        registryAddress,
        namespace,
        publicClient,
        walletClient,
        signer,
        signatureNonce: options.signatureNonce ?? env.IDENTITY_SIGNATURE_NONCE,
        registerIfMissing: options.registerIfMissing ?? env.REGISTER_IDENTITY === "true",
        skipRegister: options.skipRegister,
        trustOverrides: resolvedOverrides
      });
      if (result.trust) {
        return result;
      }
      logger.warn(
        "[agent-kit] identity not found in registry; falling back to synthetic trust"
      );
    } catch (error) {
      logger.warn(
        "[agent-kit] failed to bootstrap ERC-8004 trust; falling back to synthetic trust",
        error
      );
    }
  }
  const fallbackAddress = options.fallback?.address ?? env.ADDRESS;
  if (!fallbackAddress) {
    logger.warn(
      "[agent-kit] unable to resolve fallback identity address; skipping trust metadata"
    );
    return {};
  }
  const fallbackSignature = options.fallback?.signature ?? env.IDENTITY_FALLBACK_SIGNATURE ?? "0xdeadbeef";
  const synthetic = synthesizeTrustConfig({
    address: fallbackAddress,
    chainId: resolvedChainId,
    namespace,
    fallbackAgentId: options.fallback?.agentId,
    signature: fallbackSignature,
    overrides: resolvedOverrides,
    warn: logger.warn
  });
  if (synthetic) {
    return synthetic;
  }
  return {};
}
async function importViemModules() {
  try {
    const viem = await import('viem');
    const accounts = await import('viem/accounts');
    const chains = await import('viem/chains').catch(() => ({}));
    const baseSepoliaChain = chains.baseSepolia ?? { id: DEFAULT_CHAIN_ID };
    return {
      createPublicClient: viem.createPublicClient,
      createWalletClient: viem.createWalletClient,
      http: viem.http,
      privateKeyToAccount: accounts.privateKeyToAccount,
      baseSepolia: baseSepoliaChain
    };
  } catch (error) {
    defaultLogger.warn(
      "[agent-kit] viem helpers unavailable; install viem to use makeViemClientsFromEnv",
      error
    );
    return null;
  }
}
function resolveEnvObject(env) {
  if (env) return env;
  if (typeof process !== "undefined" && typeof process.env === "object") {
    return process.env;
  }
  return {};
}
async function makeViemClientsFromEnv(options = {}) {
  const env = resolveEnvObject(options.env);
  const modules = await importViemModules();
  if (!modules) return void 0;
  return ({ chainId, rpcUrl, env: runtimeEnv }) => {
    const effectiveRpcUrl = options.rpcUrl ?? rpcUrl ?? env.RPC_URL;
    if (!effectiveRpcUrl) {
      defaultLogger.warn(
        "[agent-kit] RPC_URL missing for viem client factory; skipping"
      );
      return null;
    }
    const transport = modules.http(effectiveRpcUrl);
    const chain = { ...modules.baseSepolia, id: chainId };
    const publicClient = modules.createPublicClient({ chain, transport });
    const mergedEnv = {
      ...env,
      ...runtimeEnv
    };
    const privateKey = options.privateKey ?? mergedEnv.PRIVATE_KEY;
    let walletClient = void 0;
    if (privateKey) {
      try {
        const account = modules.privateKeyToAccount(
          privateKey
        );
        walletClient = modules.createWalletClient({
          chain,
          account,
          transport
        });
      } catch (error) {
        defaultLogger.warn(
          "[agent-kit] failed to configure viem wallet client from PRIVATE_KEY",
          error
        );
      }
    }
    return {
      publicClient,
      walletClient,
      signer: walletClient
    };
  };
}
var DEFAULT_MODEL = "gpt-5";
var DEFAULT_PROVIDER = "openai";
var DEFAULT_API_URL = "https://api-beta.daydreams.systems/v1";
var MAX_PAYMENT_BASE_UNITS = "10000000";
var createX402Fetch = ({
  account,
  fetchImpl
}) => {
  if (!account) {
    throw new Error("[agent-kit] createX402Fetch requires an account");
  }
  const accountAddress = typeof account === "object" && account && "address" in account ? account.address : void 0;
  console.info(
    "[agent-kit:x402] creating paid fetch",
    accountAddress ? `for ${accountAddress}` : "(account address unavailable)"
  );
  const paymentFetch = wrapFetchWithPayment(
    fetchImpl ?? fetch,
    account,
    BigInt(MAX_PAYMENT_BASE_UNITS)
  );
  console.info("[agent-kit:x402] wrapFetchWithPayment initialised");
  const describeInput = (input) => {
    if (typeof input === "string") return input;
    if (input instanceof URL) return input.toString();
    if (typeof input?.url === "string") {
      return input.url;
    }
    return "[object Request]";
  };
  const wrappedFetch = Object.assign(
    async (input, init) => {
      const requestUrl = describeInput(input);
      const requestMethod = init?.method ?? (input instanceof Request ? input.method : void 0) ?? "POST";
      console.info("[agent-kit:x402] fetch request", requestUrl, requestMethod);
      try {
        const response = await paymentFetch(input, init ?? {});
        const paymentHeader = response.headers.get("X-PAYMENT-RESPONSE");
        console.info(
          "[agent-kit:x402] fetch response",
          requestUrl,
          response.status,
          paymentHeader ? "(paid)" : "(no x402 header)"
        );
        return response;
      } catch (error) {
        console.warn(
          "[agent-kit:x402] fetch failed",
          requestUrl,
          error?.message ?? error
        );
        throw error;
      }
    },
    {
      preconnect: paymentFetch.preconnect ?? (async () => {
      })
    }
  );
  return wrappedFetch;
};
var accountFromPrivateKey = (privateKey) => {
  if (!privateKey || privateKey.trim().length === 0) {
    throw new Error(
      "[agent-kit] accountFromPrivateKey requires a non-empty private key"
    );
  }
  return privateKeyToAccount(privateKey);
};
var createX402LLM = (options = {}) => {
  if (options.account) {
    console.info("[agent-kit:x402] initialising LLM with provided account");
  } else if (options.privateKey) {
    console.info("[agent-kit:x402] deriving account from supplied private key");
  } else {
    console.info(
      "[agent-kit:x402] no explicit account/private key supplied; falling back to env or downstream defaults"
    );
  }
  const account = options.account ?? (options.privateKey ? accountFromPrivateKey(options.privateKey) : void 0);
  if (!account) {
    throw new Error(
      "[agent-kit] createX402LLM requires either an account or a private key"
    );
  }
  const paymentFetch = options.fetch ?? createX402Fetch({ account, fetchImpl: options.fetchImpl });
  console.info("[agent-kit:x402] payment-enabled fetch ready for LLM");
  const aiOverrides = options.ai ?? {};
  const {
    config: configOverridesRaw,
    options: optionOverridesRaw,
    apiKey: apiKeyOverrideRaw,
    apiURL: apiUrlOverrideRaw,
    name: nameOverrideRaw,
    ...restAiProps
  } = aiOverrides;
  const configOverrides = configOverridesRaw && typeof configOverridesRaw === "object" ? configOverridesRaw : void 0;
  const optionOverrides = optionOverridesRaw && typeof optionOverridesRaw === "object" ? optionOverridesRaw : void 0;
  const explicitApiKey = typeof apiKeyOverrideRaw === "string" && apiKeyOverrideRaw.trim().length > 0 ? apiKeyOverrideRaw : void 0;
  const nameOverride = typeof nameOverrideRaw === "string" && nameOverrideRaw.trim().length > 0 ? nameOverrideRaw : void 0;
  const apiUrlOverride = typeof apiUrlOverrideRaw === "string" && apiUrlOverrideRaw.trim().length > 0 ? apiUrlOverrideRaw : void 0;
  const apiKey = explicitApiKey ?? process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error(
      "[agent-kit] createX402LLM requires an OpenAI API key (set options.ai.apiKey or OPENAI_API_KEY)"
    );
  }
  const baseConfig = {
    stream: false
  };
  const finalConfig = {
    ...baseConfig,
    ...configOverrides ?? {}
  };
  const finalOptions = {
    ...optionOverrides ?? {},
    fetch: paymentFetch
  };
  const aiArgs = {
    ...restAiProps,
    name: nameOverride ?? DEFAULT_PROVIDER,
    apiKey,
    apiURL: apiUrlOverride ?? DEFAULT_API_URL,
    config: finalConfig,
    options: finalOptions
  };
  console.info(
    "[agent-kit:x402] creating Ax client",
    `provider=${aiArgs.name}`,
    `model=${finalConfig.model}`
    // `apiURL=${aiArgs}`
  );
  return ai(aiArgs);
};
var x402LLM = ({
  privateKey = process.env.PRIVATE_KEY,
  model = DEFAULT_MODEL,
  apiURL = DEFAULT_API_URL
}) => createX402LLM({
  privateKey,
  ai: { apiURL }
});

// src/utils/axllm.ts
var DEFAULT_PROVIDER2 = "openai";
var DEFAULT_MODEL2 = "gpt-5";
function createAxLLMClient(options = {}) {
  const resolved = resolveOptions(options);
  const logger = options.logger;
  const axInstance = (() => {
    if (options.client) return options.client;
    const fromFactory = options.clientFactory?.();
    if (fromFactory) return fromFactory;
    try {
      return createX402LLM(buildCreateOptions(resolved, options.x402));
    } catch (error) {
      logger?.warn?.(
        `[agent-kit] failed to initialise Ax LLM client: ${error.message}`,
        error
      );
      return null;
    }
  })();
  return {
    ax: axInstance,
    isConfigured() {
      return Boolean(axInstance);
    }
  };
}
function resolveOptions(options) {
  const env = readEnv(options.env);
  const provider = options.provider ?? env.AX_PROVIDER ?? env.AXLLM_PROVIDER ?? env.OPENAI_PROVIDER ?? DEFAULT_PROVIDER2;
  const model = options.model ?? env.AX_MODEL ?? env.AXLLM_MODEL ?? env.OPENAI_MODEL ?? DEFAULT_MODEL2;
  const apiKey = options.apiKey ?? env.OPENAI_API_KEY;
  const apiUrl = options.apiUrl ?? env.AX_API_URL ?? env.AXLLM_API_URL ?? env.OPENAI_API_URL;
  const temperature = options.temperature ?? parseNumber(
    env.AX_TEMPERATURE ?? env.AXLLM_TEMPERATURE ?? env.OPENAI_TEMPERATURE
  );
  const debug = options.debug ?? parseBoolean(env.AX_DEBUG ?? env.AXLLM_DEBUG) ?? false;
  return { provider, model, apiKey, apiUrl, temperature, debug };
}
function buildCreateOptions(resolved, overrides) {
  const x402 = overrides ? { ...overrides } : {};
  const aiOverrides = overrides?.ai ? { ...overrides.ai } : {};
  const aiConfigOverrides = aiOverrides.config && typeof aiOverrides.config === "object" ? { ...aiOverrides.config } : void 0;
  const aiOptionOverrides = aiOverrides.options && typeof aiOverrides.options === "object" ? { ...aiOverrides.options } : void 0;
  const finalTemperature = aiConfigOverrides && "temperature" in aiConfigOverrides ? aiConfigOverrides.temperature : resolved.temperature;
  const finalConfig = {
    stream: true,
    model: aiConfigOverrides?.model ?? x402.model ?? resolved.model,
    ...aiConfigOverrides ?? {},
    ...finalTemperature !== void 0 ? { temperature: finalTemperature } : {}
  };
  const finalOptions = {
    ...aiOptionOverrides ?? {},
    ...resolved.debug ? { debug: resolved.debug } : {}
  };
  const apiKey = aiOverrides.apiKey ?? resolved.apiKey ?? (typeof process !== "undefined" ? process.env.OPENAI_API_KEY : void 0);
  if (!apiKey) {
    throw new Error(
      "[agent-kit] createAxLLMClient requires an OpenAI API key (set apiKey or OPENAI_API_KEY)"
    );
  }
  const name = aiOverrides.name ?? resolved.provider;
  const apiURL = aiOverrides.apiURL ?? resolved.apiUrl;
  const finalAi = {
    ...aiOverrides,
    name,
    apiKey,
    ...apiURL ? { apiURL } : {},
    config: finalConfig,
    options: finalOptions
  };
  const createOptions = {
    ...x402,
    model: x402.model ?? resolved.model,
    ai: finalAi
  };
  if (!createOptions.account && !createOptions.privateKey) {
    const envPrivateKey = typeof process !== "undefined" ? process.env.PRIVATE_KEY : void 0;
    if (envPrivateKey) {
      createOptions.privateKey = envPrivateKey;
    }
  }
  return createOptions;
}
function readEnv(env) {
  if (env) return env;
  if (typeof process !== "undefined" && process?.env) {
    return process.env;
  }
  return {};
}
function parseBoolean(value) {
  if (value === void 0) return void 0;
  if (value.trim() === "") return void 0;
  return ["1", "true", "yes", "on"].includes(value.toLowerCase());
}
function parseNumber(value) {
  if (value === void 0) return void 0;
  const numeric = Number.parseFloat(value);
  return Number.isFinite(numeric) ? numeric : void 0;
}

// src/config.ts
var DEFAULT_FACILITATOR_URL = "https://facilitator.daydreams.systems";
var DEFAULT_PAYMENT_WALLET_ADDRESS = "0xb308ed39d67D0d4BAe5BC2FAEF60c66BBb6AE429";
var DEFAULT_NETWORK = "base-sepolia";
var DEFAULT_WALLET_API_URL = "http://localhost:8787";
var defaultConfig = {
  payments: {
    facilitatorUrl: DEFAULT_FACILITATOR_URL,
    payTo: DEFAULT_PAYMENT_WALLET_ADDRESS,
    network: DEFAULT_NETWORK,
    defaultPrice: void 0
  },
  wallet: {
    walletApiUrl: DEFAULT_WALLET_API_URL,
    maxPaymentBaseUnits: void 0,
    maxPaymentUsd: void 0
  }
};
function parseBigIntEnv(value) {
  if (!value) return void 0;
  try {
    const parsed = BigInt(value);
    return parsed > 0n ? parsed : void 0;
  } catch {
    return void 0;
  }
}
function parseNumberEnv(value) {
  if (!value) return void 0;
  const numeric = Number(value);
  if (!Number.isFinite(numeric) || numeric <= 0) return void 0;
  return numeric;
}
var environmentConfig = {
  payments: {
    facilitatorUrl: process.env.FACILITATOR_URL,
    payTo: process.env.ADDRESS,
    network: process.env.NETWORK,
    defaultPrice: process.env.DEFAULT_PRICE ?? void 0
  },
  wallet: {
    walletApiUrl: process.env.LUCID_API_URL ?? process.env.VITE_API_URL ?? void 0,
    maxPaymentBaseUnits: parseBigIntEnv(
      process.env.AGENT_WALLET_MAX_PAYMENT_BASE_UNITS
    ),
    maxPaymentUsd: parseNumberEnv(process.env.AGENT_WALLET_MAX_PAYMENT_USDC)
  }
};
var runtimeOverrides = {};
function assignDefined(target, source) {
  if (!source) return;
  for (const [key, value] of Object.entries(source)) {
    if (value !== void 0) {
      target[key] = value;
    }
  }
}
function applyOverrides(base, overrides) {
  if (!overrides) return base;
  const next = {
    payments: { ...base.payments },
    wallet: { ...base.wallet }
  };
  assignDefined(next.payments, overrides.payments);
  assignDefined(next.wallet, overrides.wallet);
  return next;
}
function mergeRuntimeOverrides(current, overrides) {
  const merged = {
    payments: { ...current.payments ?? {} },
    wallet: { ...current.wallet ?? {} }
  };
  assignDefined(merged.payments, overrides.payments);
  assignDefined(merged.wallet, overrides.wallet);
  if (merged.payments && Object.keys(merged.payments).length === 0) {
    delete merged.payments;
  }
  if (merged.wallet && Object.keys(merged.wallet).length === 0) {
    delete merged.wallet;
  }
  return merged;
}
function configureAgentKit(overrides) {
  runtimeOverrides = mergeRuntimeOverrides(runtimeOverrides, overrides);
}
function resetAgentKitConfigForTesting() {
  runtimeOverrides = {};
}
function getAgentKitConfig() {
  const withEnv = applyOverrides(defaultConfig, environmentConfig);
  return applyOverrides(withEnv, runtimeOverrides);
}

// src/utils/utils.ts
function toJsonSchemaOrUndefined(s) {
  if (!s) return void 0;
  try {
    return z.toJSONSchema(s);
  } catch {
    return void 0;
  }
}
function paymentsFromEnv(params) {
  const { payments } = getAgentKitConfig();
  return {
    payTo: payments.payTo,
    facilitatorUrl: payments.facilitatorUrl,
    network: payments.network,
    defaultPrice: params?.defaultPrice ?? payments.defaultPrice
  };
}

// src/pricing.ts
function resolveEntrypointPrice(entrypoint, payments, which) {
  if (typeof entrypoint.price === "string") return entrypoint.price;
  if (typeof entrypoint.price === "object" && entrypoint.price) {
    const value = entrypoint.price[which];
    if (value) return value;
  }
  return payments?.defaultPrice;
}
function withPayments({
  app,
  path,
  entrypoint,
  kind,
  payments,
  facilitator,
  middlewareFactory = paymentMiddleware
}) {
  if (!payments) return false;
  const network = entrypoint.network ?? payments.network;
  if (!network) return false;
  const price = resolveEntrypointPrice(entrypoint, payments, kind);
  if (!price) return false;
  const requestSchema = toJsonSchemaOrUndefined(entrypoint.input);
  const responseSchema = toJsonSchemaOrUndefined(entrypoint.output);
  const description = entrypoint.description ?? `${entrypoint.key}${kind === "stream" ? " (stream)" : ""}`;
  const postMimeType = kind === "stream" ? "text/event-stream" : "application/json";
  const inputSchema = {
    bodyType: "json",
    ...requestSchema ? { bodyFields: { input: requestSchema } } : {}
  };
  const outputSchema = kind === "invoke" && responseSchema ? { output: responseSchema } : void 0;
  const resolvedFacilitator = facilitator ?? { url: payments.facilitatorUrl };
  const postRoute = {
    price,
    network,
    config: {
      description,
      mimeType: postMimeType,
      discoverable: true,
      inputSchema,
      outputSchema
    }
  };
  const getRoute = {
    price,
    network,
    config: {
      description,
      mimeType: "application/json",
      discoverable: true,
      inputSchema,
      outputSchema
    }
  };
  app.use(
    path,
    middlewareFactory(
      payments.payTo,
      {
        [`POST ${path}`]: postRoute,
        [`GET ${path}`]: getRoute
      },
      resolvedFacilitator
    )
  );
  return true;
}

// src/manifest.ts
function buildManifest({
  meta,
  registry,
  origin,
  payments,
  ap2,
  trust
}) {
  const entrypoints = {};
  const entrypointList = Array.from(registry);
  const anyStreaming = entrypointList.some((e) => Boolean(e.stream));
  for (const e of entrypointList) {
    const manifestEntry = {
      description: e.description,
      streaming: Boolean(e.stream),
      input_schema: toJsonSchemaOrUndefined(e.input),
      output_schema: toJsonSchemaOrUndefined(e.output)
    };
    const invP = resolveEntrypointPrice(e, payments, "invoke");
    const strP = e.stream ? resolveEntrypointPrice(e, payments, "stream") : void 0;
    if (invP || strP) {
      const pricing = {};
      if (invP) pricing.invoke = invP;
      if (strP) pricing.stream = strP;
      manifestEntry.pricing = pricing;
    }
    entrypoints[e.key] = manifestEntry;
  }
  const defaultInputModes = ["application/json"];
  const defaultOutputModes = ["application/json", "text/plain"];
  const skills = entrypointList.map((e) => ({
    id: e.key,
    name: e.key,
    description: e.description,
    inputModes: defaultInputModes,
    outputModes: defaultOutputModes,
    streaming: Boolean(e.stream),
    x_input_schema: toJsonSchemaOrUndefined(e.input),
    x_output_schema: toJsonSchemaOrUndefined(e.output)
  }));
  const capabilities = {
    streaming: anyStreaming,
    pushNotifications: false,
    stateTransitionHistory: true
  };
  const resolvedAp2Config = ap2 ?? (payments ? { roles: ["merchant"], required: true } : void 0);
  if (resolvedAp2Config?.roles?.length) {
    const [firstRole, ...restRoles] = resolvedAp2Config.roles;
    if (!firstRole) {
      throw new Error("AP2 roles must contain at least one entry");
    }
    const roles = [firstRole, ...restRoles];
    const extension = {
      uri: AP2_EXTENSION_URI,
      description: resolvedAp2Config.description ?? "Agent Payments Protocol (AP2)",
      required: resolvedAp2Config.required ?? roles.includes("merchant"),
      params: { roles }
    };
    const existing = capabilities.extensions ?? [];
    const withoutAp2 = existing.filter(
      (ext) => !("uri" in ext && ext.uri === AP2_EXTENSION_URI)
    );
    capabilities.extensions = [...withoutAp2, extension];
  }
  const card = {
    name: meta.name,
    description: meta.description,
    url: origin.endsWith("/") ? origin : `${origin}/`,
    version: meta.version,
    provider: void 0,
    capabilities,
    defaultInputModes,
    defaultOutputModes,
    skills,
    supportsAuthenticatedExtendedCard: false,
    entrypoints
  };
  if (payments) {
    const pm = payments;
    const paymentMethod = {
      method: "x402",
      payee: pm.payTo,
      network: pm.network,
      endpoint: pm.facilitatorUrl,
      priceModel: pm.defaultPrice ? { default: pm.defaultPrice } : void 0,
      extensions: {
        x402: { facilitatorUrl: pm.facilitatorUrl }
      }
    };
    card.payments = [paymentMethod];
  }
  if (trust) {
    if (trust.registrations?.length) {
      card.registrations = trust.registrations;
    }
    if (trust.trustModels?.length) {
      const unique = Array.from(new Set(trust.trustModels));
      card.trustModels = unique;
    }
    if (trust.validationRequestsUri) {
      card.ValidationRequestsURI = trust.validationRequestsUri;
    }
    if (trust.validationResponsesUri) {
      card.ValidationResponsesURI = trust.validationResponsesUri;
    }
    if (trust.feedbackDataUri) {
      card.FeedbackDataURI = trust.feedbackDataUri;
    }
  }
  return card;
}
var sampleFromJsonSchema = (schema, root, stack) => {
  if (!schema || typeof schema !== "object") return void 0;
  if (stack.has(schema)) {
    return void 0;
  }
  stack.add(schema);
  const { type } = schema;
  let result;
  if (schema.const !== void 0) {
    result = schema.const;
  } else if (Array.isArray(schema.enum) && schema.enum.length > 0) {
    result = schema.enum[0];
  } else if (Array.isArray(schema.anyOf) && schema.anyOf.length > 0) {
    const resolved = schema.anyOf.find((item) => item !== schema);
    result = resolved ? sampleFromJsonSchema(resolved, root, stack) : sampleFromJsonSchema(schema.anyOf[0], root, stack);
  } else if (Array.isArray(schema.oneOf) && schema.oneOf.length > 0) {
    const part = schema.oneOf.find((item) => item !== schema);
    result = part ? sampleFromJsonSchema(part, root, stack) : sampleFromJsonSchema(schema.oneOf[0], root, stack);
  } else if (Array.isArray(schema.allOf) && schema.allOf.length > 0) {
    const composite = schema.allOf.reduce((acc, current) => {
      if (current && typeof current === "object") {
        Object.assign(acc, current);
      }
      return acc;
    }, {});
    result = sampleFromJsonSchema(composite, root, stack);
  } else if (schema.$ref && typeof schema.$ref === "string") {
    const refPath = schema.$ref.replace(/^#\//, "").split("/");
    let resolved = root;
    for (const segment of refPath) {
      if (!resolved || typeof resolved !== "object") break;
      resolved = resolved[segment];
    }
    result = sampleFromJsonSchema(resolved, root, stack);
  } else if (Array.isArray(schema.type)) {
    result = sampleFromJsonSchema(
      { ...schema, type: schema.type[0] },
      root,
      stack
    );
  } else if (schema.properties && typeof schema.properties === "object") {
    const obj = {};
    for (const [key, propSchema] of Object.entries(schema.properties)) {
      if (propSchema && typeof propSchema === "object") {
        const optional = Array.isArray(schema.required) ? !schema.required.includes(key) : false;
        if (optional) continue;
        obj[key] = sampleFromJsonSchema(propSchema, root, stack);
      }
    }
    if (schema.additionalProperties === true && schema.patternProperties === void 0) {
      obj.example = "value";
    } else if (schema.additionalProperties && typeof schema.additionalProperties === "object") {
      obj.example = sampleFromJsonSchema(
        schema.additionalProperties,
        root,
        stack
      );
    }
    result = obj;
  } else if (schema.items) {
    const itemsSchema = Array.isArray(schema.items) ? schema.items[0] : schema.items;
    result = [sampleFromJsonSchema(itemsSchema ?? {}, root, stack) ?? "value"];
  } else {
    switch (type) {
      case "array": {
        result = ["example"];
        break;
      }
      case "object": {
        result = {};
        break;
      }
      case "string": {
        if (Array.isArray(schema.examples) && schema.examples.length) {
          result = schema.examples[0];
          break;
        }
        if (schema.format === "email") {
          result = "agent@example.com";
        } else if (schema.format === "uri" || schema.format === "url") {
          result = "https://example.com";
        } else {
          result = schema.description ? `<${schema.description}>` : "string";
        }
        break;
      }
      case "integer":
      case "number": {
        if (typeof schema.minimum === "number") {
          result = schema.minimum;
        } else if (typeof schema.maximum === "number") {
          result = schema.maximum;
        } else if (Array.isArray(schema.examples) && schema.examples.length) {
          result = schema.examples[0];
        } else {
          result = 0;
        }
        break;
      }
      case "boolean":
        result = true;
        break;
      case "null":
        result = null;
        break;
      default:
        result = schema.description ? `<${schema.description}>` : schema.type === "null" ? null : "value";
    }
  }
  stack.delete(schema);
  return result;
};
var buildExampleFromJsonSchema = (schema) => {
  if (!schema || typeof schema !== "object") return void 0;
  return sampleFromJsonSchema(schema, schema, /* @__PURE__ */ new Set());
};
var renderLandingPage = ({
  meta,
  origin,
  entrypoints,
  activePayments,
  manifestPath,
  faviconDataUrl,
  x402ClientExample
}) => {
  const entrypointCount = entrypoints.length;
  const entrypointLabel = entrypointCount === 1 ? "Entrypoint" : "Entrypoints";
  const hasPayments = Boolean(activePayments);
  const defaultNetwork = activePayments?.network;
  return html`<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no"
        />
        <meta name="theme-color" content="#0c2713" />
        <link rel="icon" type="image/svg+xml" href="${faviconDataUrl}" />
        <title>${meta.name}</title>
        <style>
          :root {
            color-scheme: light dark;
            font-family: "JetBrains Mono", "Fira Code", "Roboto Mono",
              "SFMono-Regular", Menlo, Monaco, Consolas, "Liberation Mono",
              "Courier New", monospace;
            background-color: #0c2713;
            color: #e6f4ea;
            --surface: rgba(10, 31, 17, 0.95);
            --surface-subtle: rgba(10, 31, 17, 0.85);
            --border: rgba(118, 173, 139, 0.3);
            --border-soft: rgba(118, 173, 139, 0.18);
            --accent: #6de8a5;
            --accent-soft: rgba(109, 232, 165, 0.18);
            --muted: rgba(211, 237, 221, 0.72);
            --muted-strong: rgba(211, 237, 221, 0.87);
          }
          body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            align-items: flex-start;
            justify-content: center;
            padding: 3rem 1.5rem 4rem;
            background: radial-gradient(circle at top, #154725 0%, #0c2713 60%);
          }
          main {
            width: 100%;
            max-width: 1000px;
            display: flex;
            flex-direction: column;
            gap: 2.75rem;
          }
          section {
            border-radius: 0;
            border: 1px solid var(--border);
            background: var(--surface);
            box-shadow: 0 34px 60px rgba(6, 18, 11, 0.35);
            padding: clamp(1.75rem, 4vw, 2.75rem);
          }
          .hero {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            background: linear-gradient(135deg, rgba(17, 51, 29, 0.92), #0c2713),
              radial-gradient(
                circle at top right,
                rgba(109, 232, 165, 0.22),
                transparent 45%
              );
            border: 1px solid var(--border);
          }
          .hero-header {
            display: flex;
            align-items: flex-start;
            gap: 1.5rem;
            flex-wrap: wrap;
            justify-content: space-between;
          }
          .hero-logo {
            flex: 0 0 auto;
            width: 84px;
            height: 84px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            font-size: 0.65rem;
            color: var(--accent);
          }
          .hero-logo span {
            pointer-events: none;
          }
          .hero-meta {
            display: grid;
            gap: 0.85rem;
          }
          h1 {
            margin: 0;
            font-size: clamp(2rem, 5vw, 2.85rem);
            letter-spacing: -0.03em;
            font-weight: 600;
          }
          .hero p {
            margin: 0;
            color: var(--muted-strong);
            line-height: 1.7;
            max-width: 60ch;
          }
          .hero-links {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
          }
          .hero-domain {
            display: inline-flex;
            align-items: center;
            padding: 0.45rem 0.75rem;
            border: 1px solid rgba(109, 232, 165, 0.4);
            background: rgba(12, 39, 19, 0.55);
            color: var(--accent);
            font-size: 0.85rem;
            text-decoration: none;
            letter-spacing: 0.08em;
            text-transform: uppercase;
          }
          .hero-domain:hover,
          .hero-domain:focus-visible {
            border-color: rgba(109, 232, 165, 0.7);
          }
          .hero-stats {
            margin: 0;
            padding: 0;
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            list-style: none;
          }
          .hero-stats li {
            min-width: 160px;
            padding: 0.9rem 1rem;
            border-radius: 0;
            border: 1px solid var(--border-soft);
            background: rgba(23, 63, 36, 0.6);
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
          }
          .hero-stats .stat-value {
            font-size: 1.35rem;
            font-weight: 600;
          }
          .hero-stats .stat-label {
            font-size: 0.82rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            color: var(--muted);
          }
          .hero-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.8rem;
          }
          .button {
            display: inline-flex;
            align-items: center;
            gap: 0.45rem;
            padding: 0.75rem 1.15rem;
            border-radius: 0;
            font-weight: 500;
            text-decoration: none;
            font-size: 0.95rem;
            transition: transform 150ms ease, box-shadow 150ms ease;
            border: 1px solid rgba(109, 232, 165, 0.4);
            background: rgba(12, 39, 19, 0.75);
            color: #cff9dd;
          }
          .button:hover,
          .button:focus-visible {
            transform: translateY(-1px);
            box-shadow: 0 16px 32px rgba(6, 18, 11, 0.35);
            border-color: rgba(109, 232, 165, 0.7);
          }
          .button--outline {
            background: transparent;
            border-color: rgba(109, 232, 165, 0.32);
            color: var(--muted-strong);
          }
          .button--outline:hover,
          .button--outline:focus-visible {
            background: rgba(12, 39, 19, 0.65);
          }
          .button--small {
            padding: 0.55rem 0.9rem;
            font-size: 0.85rem;
          }
          .entrypoints header {
            display: flex;
            flex-direction: column;
            gap: 0.35rem;
            margin-bottom: 1.5rem;
          }
          .entrypoints h2 {
            margin: 0;
            font-size: clamp(1.5rem, 3vw, 1.9rem);
            letter-spacing: -0.02em;
          }
          .entrypoints p {
            margin: 0;
            color: var(--muted);
            line-height: 1.6;
          }
          .entrypoint-grid {
            display: grid;
            gap: 1.5rem;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
          }
          .entrypoint-card {
            border-radius: 0;
            border: 1px solid var(--border);
            background: var(--surface-subtle);
            display: flex;
            flex-direction: column;
            gap: 1rem;
            padding: 1.4rem 1.5rem 1.6rem;
            position: relative;
            overflow: hidden;
          }
          .entrypoint-card::after {
            content: "";
            position: absolute;
            inset: 0;
            pointer-events: none;
            border-radius: inherit;
            border: 1px solid transparent;
            background: linear-gradient(
                120deg,
                rgba(109, 232, 165, 0.3),
                rgba(109, 232, 165, 0)
              )
              border-box;
            mask: linear-gradient(#fff, #fff) padding-box,
              linear-gradient(#fff, #fff);
            mask-composite: exclude;
            opacity: 0;
            transition: opacity 200ms ease;
          }
          .entrypoint-card:hover::after,
          .entrypoint-card:focus-within::after {
            opacity: 1;
          }
          .entrypoint-card header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 1rem;
          }
          .entrypoint-card h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
            letter-spacing: -0.01em;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #f8fafc;
          }
          .entrypoint-card p {
            margin: 0;
            color: var(--muted);
            line-height: 1.6;
          }
          .badge {
            font-size: 0.75rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            padding: 0.35rem 0.7rem;
            border-radius: 0;
            border: 1px solid rgba(148, 163, 184, 0.3);
            background: rgba(148, 163, 184, 0.12);
            color: var(--muted-strong);
            white-space: nowrap;
          }
          .badge--streaming {
            border-color: rgba(109, 232, 165, 0.4);
            background: var(--accent-soft);
            color: var(--accent);
          }
          .card-meta {
            margin-top: auto;
            display: grid;
            gap: 0.75rem;
          }
          .card-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.6rem;
            margin-top: 1rem;
          }
          .schema-section {
            margin-top: 1rem;
            display: grid;
            gap: 0.75rem;
          }
          .schema-block {
            border: 1px solid var(--border);
            background: rgba(12, 39, 19, 0.7);
            padding: 0.9rem 1rem 1rem;
          }
          .schema-block summary {
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            gap: 1rem;
            font-size: 0.85rem;
            color: var(--muted-strong);
            text-transform: uppercase;
            letter-spacing: 0.08em;
          }
          .schema-block summary::-webkit-details-marker {
            display: none;
          }
          .schema-block summary::after {
            content: "⌄";
            font-size: 0.75rem;
            transform: rotate(-90deg);
            transition: transform 200ms ease;
            opacity: 0.6;
          }
          .schema-block[open] summary::after {
            transform: rotate(0deg);
          }
          .schema-block pre {
            margin: 0.9rem 0 0;
            padding: 0.85rem 0.75rem;
            background: rgba(7, 21, 12, 0.9);
            border: 1px solid rgba(118, 173, 139, 0.28);
            max-height: 220px;
            overflow: auto;
            font-size: 0.75rem;
            line-height: 1.55;
          }
          .schema-note {
            margin: 0;
            font-size: 0.8rem;
            color: var(--muted);
          }
          .example-section {
            display: grid;
            gap: 1.25rem;
          }
          .example-section h2 {
            margin: 0;
            font-size: clamp(1.4rem, 3vw, 1.8rem);
            letter-spacing: -0.02em;
            color: var(--muted-strong);
          }
          .example-section p {
            margin: 0;
            color: var(--muted);
            line-height: 1.6;
          }
          .example-section pre {
            margin: 0;
            padding: 1.35rem;
            border: 1px solid rgba(118, 173, 139, 0.35);
            background: rgba(7, 21, 12, 0.88);
            font-size: 0.78rem;
            line-height: 1.6;
            overflow-x: auto;
          }
          .meta-item {
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
          }
          .meta-label {
            font-size: 0.75rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            color: var(--muted);
          }
          .meta-value {
            font-size: 0.9rem;
            color: var(--muted-strong);
          }
          .meta-value code {
            font-family: "JetBrains Mono", "Fira Code", ui-monospace,
              SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
              "Courier New", monospace;
            font-size: 0.82rem;
            padding: 0.25rem 0.45rem;
            border-radius: 0;
            background: rgba(30, 41, 59, 0.7);
            border: 1px solid rgba(148, 163, 184, 0.2);
            color: #e2e8f0;
          }
          .empty-state {
            margin: 0;
            padding: 1.5rem;
            border-radius: 0;
            border: 1px dashed rgba(118, 173, 139, 0.4);
            background: rgba(12, 39, 19, 0.55);
            color: var(--muted);
            text-align: center;
          }
          .manifest {
            display: grid;
            gap: 0.75rem;
          }
          .manifest header {
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          .manifest h2 {
            margin: 0;
            font-size: clamp(1.4rem, 3vw, 1.8rem);
            letter-spacing: -0.02em;
          }
          .manifest-status {
            font-size: 0.75rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            color: var(--muted);
          }
          .manifest pre {
            margin: 1.2rem 0 0;
            padding: 1.25rem;
            border-radius: 0;
            border: 1px solid rgba(118, 173, 139, 0.3);
            background: rgba(7, 21, 12, 0.86);
            overflow-x: auto;
            max-height: 420px;
            color: #e2e8f0;
            font-size: 0.8rem;
            line-height: 1.6;
          }
          a {
            color: var(--accent);
          }
          .footer {
            margin-top: 2rem;
            padding: 1.5rem 2rem;
            border: 1px solid var(--border);
            background: rgba(10, 31, 17, 0.65);
            display: flex;
            flex-wrap: wrap;
            gap: 1.25rem;
            justify-content: space-between;
            align-items: center;
          }
          .footer span {
            font-size: 0.85rem;
            color: var(--muted);
          }
          .footer-links {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
          }
          .footer-links a {
            font-size: 0.85rem;
            text-decoration: none;
            border-bottom: 1px solid transparent;
          }
          .footer-links a:hover,
          .footer-links a:focus-visible {
            border-color: var(--accent);
          }
          @media (max-width: 640px) {
            body {
              padding: 2.5rem 1rem 3rem;
            }
            .hero-stats li {
              min-width: 45%;
            }
          }
          @media (prefers-reduced-motion: reduce) {
            *,
            *::before,
            *::after {
              transition-duration: 0.01ms !important;
              animation-duration: 0.01ms !important;
            }
          }
        </style>
      </head>
      <body>
        <main>
          <section class="hero">
            <div class="hero-header">
              <div class="hero-logo" aria-hidden="true">
                <svg
                  width="80"
                  height="80"
                  viewBox="0 0 294 302"
                  stroke="currentColor"
                  fill="currentColor"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M167.63 6.6469C147.542 15.7516 142.769 24.9276 140.353 59.1117L138.285 88.3614H153.507C165.408 88.3614 170.501 90.2428 176.847 96.9839C197.359 118.779 173.723 163.073 141.581 163.073C124.498 163.073 123.705 157.684 131.01 90.9899L137.716 29.7533L129.932 24.6627C122.943 20.0917 120.497 20.1901 106.054 25.6305C84.6874 33.6791 38.6401 82.5509 27.984 108.496C25.2451 115.166 18.4064 127.857 12.7858 136.697C0.176684 156.529 -3.85169 186.866 4.07236 202.345C6.87929 207.829 8.51582 216.9 7.70946 222.503C5.82117 235.595 29.8961 286.002 41.7329 293.741C55.9887 303.067 71.4319 303.427 86.2049 294.784C104.792 283.906 110.494 270.801 115.496 227.458C119.044 196.711 119.027 187.392 115.411 176.454C109.838 159.599 100.001 157.687 103.346 174.11C109.596 204.79 109.531 205.683 100.165 216.791C89.0696 229.958 78.6653 230.606 67.5873 218.825C60.3131 211.086 59.34 206.923 59.34 183.541V157.032L77.3486 138.028C93.2511 121.245 94.9046 118.182 91.4921 111.818C87.246 103.895 91.6928 96.0669 98.1709 100.064C106.394 105.138 101.965 122.369 88.7158 136.829C64.7667 162.972 59.8673 179.53 69.3735 202.236C73.4869 212.064 76.0387 214.013 84.7929 214.013C99.0385 214.013 102.451 204.199 95.6226 182.879C90.7708 167.743 90.8423 166.211 96.6739 159.776C105.333 150.226 114.281 151.167 119.572 162.184C130.833 185.64 168.661 171.068 195.002 133.131L204.086 120.049L196.4 104.357C188.874 88.9897 176.605 80.3774 158.008 77.4059C151.996 76.4449 151.203 73.6907 151.203 53.746C151.203 34.5994 152.442 29.8586 159.359 22.5096C169.409 11.8326 187.7 5.4617 199.683 8.46376C204.627 9.7033 213.786 15.198 220.033 20.6724C226.283 26.1501 233.526 30.6294 236.132 30.6294C243.189 30.6294 253.896 45.8979 256.478 59.6449C257.73 66.2976 261.021 72.6074 263.793 73.6703C271.313 76.5501 278.791 93.1871 278.791 107.039C278.791 122.267 272.609 134.299 257.179 149.099C245.958 159.864 245.319 161.62 247.112 176.725C252.362 220.982 198.622 278.87 156.671 274.153C134.27 271.633 127.768 262.389 130.122 236.417C131.214 224.368 134.552 212.852 138.489 207.551C147.797 195.016 169.729 183.225 181.797 184.268C197.261 185.602 196.761 195.21 180.419 210.726C172.771 217.987 166.514 224.755 166.514 225.764C166.514 230.233 180.011 226.966 188.238 220.507C205.906 206.634 210.523 187.548 201.742 164.703C200.738 162.095 206.648 152.797 215.075 143.72C236.65 120.477 239.974 113.19 232.682 105.144C229.477 101.613 223.983 97.8125 220.465 96.6986C216.95 95.5847 211.857 90.3956 209.148 85.1692C206.151 79.3858 196.519 71.7584 184.519 65.6728C163.217 54.8667 158.423 45.9895 168.916 36.7864C180.164 26.921 188.874 26.4524 199.299 35.1529C204.657 39.6254 212.35 44.3153 216.392 45.5786C225.99 48.5739 229.852 53.6679 232.737 67.1364C235.717 81.0431 231.097 81.3419 223.064 67.7647C219.675 62.0424 212.84 55.6342 207.869 53.5253C202.902 51.4164 196.271 47.5619 193.134 44.9572C186.138 39.1432 175.02 40.7937 175.02 47.64C175.02 50.5334 180.804 54.4965 188.629 56.9586C196.301 59.3766 207.434 66.9191 214.146 74.2578C220.696 81.4166 231.049 89.2376 237.157 91.642C257.931 99.8229 253.91 122.128 227.889 143L214.429 153.796L216.467 180.172L218.505 206.546L202.385 222.184C184.447 239.585 173.454 243.881 161.158 238.288C149.897 233.167 150.727 222.615 163.111 213.477C173.761 205.618 176.663 197.033 168.674 197.033C160.845 197.033 145.531 211.144 140.618 222.884C132.803 241.555 143.136 258.161 162.564 258.161C189.258 258.161 218.335 235.065 229.988 204.606C234.68 192.344 234.911 187.82 231.434 176.243L227.3 162.466L246.241 142.646C262.875 125.242 265.182 121.14 265.182 108.999C265.182 97.9687 262.776 92.5147 253.273 82.0177C245.288 73.1949 241.365 65.5335 241.365 58.7619C241.365 48.2683 232.536 37.4214 223.993 37.4214C221.281 37.4214 215.035 32.8368 210.108 27.2334C199.084 14.6954 185.822 13.8974 169.569 24.7985C159.542 31.5226 157.872 34.6741 156.974 48.5331L155.936 64.5113L174.55 72.7296C185.71 77.6538 195.542 84.8126 199.095 90.596C202.357 95.9039 208.873 103.572 213.578 107.637L222.135 115.027L202.385 139.121C177.687 169.254 166.384 178.8 149.403 183.881C129.483 189.837 125.798 195.984 121.429 230.542C116.727 267.724 119.344 277.804 135.93 286.362C168.405 303.124 228.457 271.603 251.28 225.814C256.172 216.003 260.337 200.165 261.579 186.669C263.327 167.617 265.393 162.034 274.538 151.639C289.593 134.52 297.654 106.082 292.24 89.1731C290.005 82.1909 284.714 72.6549 280.479 67.9854C276.246 63.3159 269.608 52.1906 265.726 43.2626C260.303 30.7857 255.679 25.6815 245.724 21.1886C238.603 17.976 229.348 11.9107 225.163 7.70645C215.365 -2.12496 188.095 -2.62757 167.63 6.6469ZM125.077 40.0058C126.091 47.1442 125.539 47.3989 117.193 43.6022C109.681 40.1858 106.296 40.5526 96.4561 45.8401C89.9883 49.3176 81.7716 56.8669 78.1958 62.6198C74.6233 68.3726 66.2093 78.3738 59.4999 84.8466C52.7905 91.3193 45.768 102.288 43.9002 109.223C42.0289 116.158 35.1664 129.738 28.6543 139.396C15.79 158.479 13.4322 174.297 21.8054 185.348C24.5545 188.971 26.9327 198.816 27.0926 207.221C27.3069 218.32 30.8692 228.538 40.1134 244.55C55.6723 271.497 65.0015 276.174 83.9763 266.536C91.009 262.96 97.9123 259.486 99.3175 258.817C105.738 255.743 100.828 265.164 91.0158 274.737C82.9216 282.636 77.0866 285.309 68.05 285.255C51.7494 285.153 43.6994 277.838 28.8992 249.671C19.0835 230.99 16.8516 223.526 18.4745 214.818C19.8456 207.459 18.7705 201.221 15.2729 196.235C5.45031 182.237 9.66241 149.588 23.2752 134.207C26.5822 130.472 31.8219 120.528 34.9214 112.11C38.0209 103.691 47.0813 89.6213 55.053 80.8427C63.0247 72.0606 74.0993 59.2475 79.6588 52.3672C96.6296 31.3698 122.834 24.2382 125.077 40.0058ZM114.72 56.293C119.32 59.5056 122.283 65.126 122.283 70.6309V79.6847L116.986 72.1387C107.054 57.9808 94.0915 61.9745 74.773 85.142C65.3485 96.4439 57.598 109.053 57.5504 113.159C57.5027 117.265 52.144 128.957 45.6422 139.145C39.1403 149.33 33.7986 160.791 33.7714 164.615C33.7408 168.436 32.2335 173.856 30.4201 176.657C27.9738 180.437 27.1096 178.41 27.0688 168.792C27.0143 155.018 30.8828 145.234 40.7496 134.207C44.0907 130.472 48.4559 121.303 50.4497 113.831C55.8628 93.5573 92.2542 52.0039 105.363 51.1243C106.354 51.0598 110.562 53.386 114.72 56.293ZM109.582 80.7204C124.546 97.2963 120.824 122.878 100.049 146.226C82.0608 166.442 78.6176 176.926 86.1844 188.448C92.9891 198.82 93.1524 203.825 86.6778 203.825C74.6709 203.825 70.435 174.185 80.3562 159.586C83.4932 154.967 90.9886 145.628 97.0141 138.833C110.338 123.805 114.206 108.948 108.068 96.3726C101.669 83.2708 96.5616 82.9482 84.6058 94.8817C75.9604 103.511 74.5008 107.118 76.3143 115.363C78.1889 123.88 76.4129 127.646 64.3618 140.694C50.8341 155.341 50.1264 157.192 48.3913 182.492C46.5982 208.576 46.7445 209.191 58.2104 224.225C71.7687 241.996 81.7342 244.764 95.5273 234.583C102.948 229.109 105.272 228.562 105.272 232.287C105.272 240.631 85.2828 254.765 73.4835 254.765C64.1679 254.765 60.9561 252.246 50.7797 236.936C39.1811 219.488 38.9464 218.452 39.8684 188.543C40.7224 160.734 41.7329 156.686 51.0893 143.614C56.7406 135.712 63.6065 121.72 66.3454 112.521C69.6185 101.521 75.4263 92.1955 83.3129 85.2847C97.0515 73.2458 102.05 72.3765 109.582 80.7204ZM147.171 98.6038C139.618 101.609 132.49 111.655 132.49 119.296C132.49 121.731 135.808 120.396 140.363 116.12C151.271 105.895 162.407 106.452 165.149 117.363C167.545 126.879 159.049 139.301 150.148 139.301C145.933 139.301 146.096 138.143 151.088 132.635C154.711 128.641 156.228 123.625 154.881 120.114C152.87 114.884 151.724 115.163 144.14 122.732C139.472 127.395 135.324 135.702 134.923 141.193C134.328 149.303 135.668 151.391 142.044 152.294C156.953 154.41 176.721 132.917 176.721 114.589C176.721 102.278 160.284 93.3875 147.171 98.6038Z"
                  />
                </svg>
              </div>
              <div class="hero-meta">
                <h1>${meta.name}</h1>
                ${meta.description ? html`<p>${meta.description}</p>` : html`<p>No description provided yet.</p>`}
                <ul class="hero-stats">
                  <li>
                    <span class="stat-value">${entrypointCount}</span>
                    <span class="stat-label">${entrypointLabel}</span>
                  </li>
                  <li>
                    <span class="stat-value">v${meta.version ?? "0.0.0"}</span>
                    <span class="stat-label">Version</span>
                  </li>
                  <li>
                    <span class="stat-value"
                      >${hasPayments ? "Enabled" : "None"}</span
                    >
                    <span class="stat-label">Payments</span>
                  </li>
                </ul>
              </div>
              <a class="hero-domain" href="${origin}" target="_blank"
                >${origin.replace(/^https?:\/\//, "")}</a
              >
            </div>
            <div class="hero-actions">
              <a class="button" href="/.well-known/agent.json">
                <span>View Manifest</span>
              </a>
              <a class="button button--outline" href="/entrypoints">
                <span>List Entrypoints</span>
              </a>
            </div>
          </section>

          <section class="entrypoints">
            <header>
              <h2>Entrypoints</h2>
              <p>
                Explore the capabilities exposed by this agent. Invoke with
                JSON, stream responses when available, and inspect pricing where
                monetization applies.
              </p>
            </header>
            <div class="entrypoint-grid">
              ${entrypoints.length ? entrypoints.map((entrypoint) => {
    const streaming = Boolean(
      entrypoint.stream ?? entrypoint.streaming
    );
    const description = entrypoint.description ?? "No description provided yet.";
    const invokePrice = resolveEntrypointPrice(
      entrypoint,
      activePayments,
      "invoke"
    );
    const streamPrice = streaming ? resolveEntrypointPrice(
      entrypoint,
      activePayments,
      "stream"
    ) : void 0;
    const hasPricing = Boolean(invokePrice || streamPrice);
    const network = entrypoint.network ?? defaultNetwork;
    const priceLabel = hasPricing ? `Invoke: ${invokePrice ?? "\u2014"}${streamPrice && streamPrice !== invokePrice ? ` \xB7 Stream: ${streamPrice}` : streamPrice && !invokePrice ? ` \xB7 Stream: ${streamPrice}` : ""}` : "Free";
    const invokePath = `/entrypoints/${entrypoint.key}/invoke`;
    const streamPath = `/entrypoints/${entrypoint.key}/stream`;
    const inputSchema = toJsonSchemaOrUndefined(
      entrypoint.input
    );
    const outputSchema = toJsonSchemaOrUndefined(
      entrypoint.output
    );
    const exampleInputValue = inputSchema ? buildExampleFromJsonSchema(inputSchema) : void 0;
    const exampleInputPayload = JSON.stringify(
      { input: exampleInputValue ?? {} },
      null,
      2
    );
    const payloadIndented = exampleInputPayload.split("\n").map((line) => `    ${line}`).join("\n");
    const inputSchemaJson = inputSchema ? JSON.stringify(inputSchema, null, 2) : void 0;
    const outputSchemaJson = outputSchema ? JSON.stringify(outputSchema, null, 2) : void 0;
    const invokeCurl = [
      "curl -s -X POST \\",
      `  '${origin}${invokePath}' \\`,
      "  -H 'Content-Type: application/json' \\",
      "  -d '",
      payloadIndented,
      "  '"
    ].join("\n");
    const streamCurl = streaming ? [
      "curl -sN -X POST \\",
      `  '${origin}${streamPath}' \\`,
      "  -H 'Content-Type: application/json' \\",
      "  -H 'X-Payment: {{paymentHeader}}' \\",
      "  -H 'Accept: text/event-stream' \\",
      "  -d '",
      payloadIndented,
      "  '"
    ].join("\n") : void 0;
    return html`<article class="entrypoint-card">
                      <header>
                        <h3>${entrypoint.key}</h3>
                        <span
                          class="badge ${streaming ? "badge--streaming" : ""}"
                          >${streaming ? "Streaming" : "Invoke"}</span
                        >
                      </header>
                      <p>${description}</p>
                      <div class="card-meta">
                        <div class="meta-item">
                          <span class="meta-label">Pricing</span>
                          <span class="meta-value">${priceLabel}</span>
                        </div>
                        ${network ? html`<div class="meta-item">
                              <span class="meta-label">Network</span>
                              <span class="meta-value">${network}</span>
                            </div>` : ""}
                        <div class="meta-item">
                          <span class="meta-label">Invoke Endpoint</span>
                          <span class="meta-value"
                            ><code>POST ${invokePath}</code></span
                          >
                        </div>
                        ${streaming ? html`<div class="meta-item">
                              <span class="meta-label">Stream Endpoint</span>
                              <span class="meta-value"
                                ><code>POST ${streamPath}</code></span
                              >
                            </div>` : ""}
                      </div>
                      <div class="card-actions">
                        <a class="button button--small" href="${invokePath}">
                          Invoke
                        </a>
                        ${streaming ? html`<a
                              class="button button--small button--outline"
                              href="${streamPath}"
                            >
                              Stream
                            </a>` : ""}
                      </div>
                      <div class="schema-section">
                        ${inputSchemaJson ? html`<details class="schema-block" open>
                              <summary>Input Schema</summary>
                              <pre>${inputSchemaJson}</pre>
                            </details>` : html`<p class="schema-note">
                              No input schema provided. Expect bare JSON
                              payload.
                            </p>`}
                        ${outputSchemaJson ? html`<details class="schema-block">
                              <summary>Output Schema</summary>
                              <pre>${outputSchemaJson}</pre>
                            </details>` : ""}
                        <details class="schema-block" open>
                          <summary>Invoke with curl</summary>
                          <pre>${invokeCurl}</pre>
                        </details>
                        ${streamCurl ? html`<details class="schema-block">
                              <summary>Stream with curl</summary>
                              <pre>${streamCurl}</pre>
                            </details>` : ""}
                      </div>
                    </article>`;
  }) : html`<p class="empty-state">
                    No entrypoints registered yet. Call
                    <code>addEntrypoint()</code> to get started.
                  </p>`}
            </div>
          </section>

          <section class="example-section">
            <h2>Client Example: x402-fetch</h2>
            <p>
              Use the <code>x402-fetch</code> helpers to wrap a standard
              <code>fetch</code> call and automatically attach payments. This
              script loads configuration from <code>.env</code>, pays the
              facilitator, and logs both the response body and the decoded
              payment receipt.
            </p>
            <pre>${x402ClientExample}</pre>
          </section>

          <section class="manifest">
            <header>
              <h2>Manifest</h2>
              <span class="manifest-status" id="manifest-status">Loading…</span>
            </header>
            <pre id="agent-manifest">Fetching agent card…</pre>
          </section>

          <footer class="footer">
            <span>Powered by @lucid/agent-kit</span>
            <div class="footer-links">
              <a
                href="https://github.com/daydreamsai/lucid-fullstack"
                target="_blank"
                rel="noopener noreferrer"
              >
                GitHub
              </a>
              <a
                href="https://router.daydreams.systems"
                target="_blank"
                rel="noopener noreferrer"
              >
                router.daydreams.systems
              </a>
            </div>
          </footer>
        </main>
        <script>
          const manifestUrl = ${JSON.stringify(manifestPath)};
          document.addEventListener("DOMContentLoaded", () => {
            const pre = document.getElementById("agent-manifest");
            const status = document.getElementById("manifest-status");
            if (!pre || !status) return;
            fetch(manifestUrl)
              .then((res) => {
                if (!res.ok) throw new Error("HTTP " + res.status);
                return res.json();
              })
              .then((card) => {
                pre.textContent = JSON.stringify(card, null, 2);
                status.textContent = "Loaded";
              })
              .catch((error) => {
                console.error("[agent-kit] failed to load agent card", error);
                pre.textContent =
                  "Unable to load the agent card manifest. Check the console for details.";
                status.textContent = "Unavailable";
              });
          });
        </script>
      </body>
    </html>`;
};
function createAgentApp(meta, opts) {
  if (opts?.config) {
    configureAgentKit(opts.config);
  }
  const resolvedConfig = getAgentKitConfig();
  const paymentsOption = opts?.payments;
  const shouldUseConfiguredPayments = paymentsOption === void 0 && (opts?.useConfigPayments || Boolean(opts?.config?.payments));
  const resolvedPayments = paymentsOption === false ? void 0 : paymentsOption ?? (shouldUseConfiguredPayments ? {
    payTo: resolvedConfig.payments.payTo,
    facilitatorUrl: resolvedConfig.payments.facilitatorUrl,
    network: resolvedConfig.payments.network,
    defaultPrice: resolvedConfig.payments.defaultPrice
  } : void 0);
  let activePayments = resolvedPayments;
  const app = new Hono();
  const registry = /* @__PURE__ */ new Map();
  const entrypointHasExplicitPrice = (entrypoint) => {
    const { price } = entrypoint;
    if (typeof price === "string") {
      return price.trim().length > 0;
    }
    if (price && typeof price === "object") {
      const hasInvoke = price.invoke;
      const hasStream = price.stream;
      const invokeDefined = typeof hasInvoke === "string" ? hasInvoke.trim().length > 0 : hasInvoke !== void 0;
      const streamDefined = typeof hasStream === "string" ? hasStream.trim().length > 0 : hasStream !== void 0;
      return invokeDefined || streamDefined;
    }
    return false;
  };
  const ensureActivePaymentsForEntrypoint = (entrypoint) => {
    if (activePayments || paymentsOption === false) return;
    if (!entrypointHasExplicitPrice(entrypoint)) return;
    activePayments = {
      payTo: resolvedConfig.payments.payTo,
      facilitatorUrl: resolvedConfig.payments.facilitatorUrl,
      network: resolvedConfig.payments.network,
      defaultPrice: resolvedConfig.payments.defaultPrice
    };
  };
  const defaultFaviconSvg = `
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
       
        <path fill-rule="evenodd" clip-rule="evenodd" d="M190.172 87.9213C175.564 99.6095 149.992 119.93 148.083 121.365C147.121 122.089 146.334 122.867 146.334 123.096C146.334 123.556 158.5 135.45 159.278 135.75C159.547 135.854 163.56 132.818 168.197 129.004L176.626 122.071L180.274 125.648C182.281 127.616 186.595 131.882 189.86 135.129L195.798 141.032L206.977 141.007C227.117 140.962 230.707 140.265 235.701 135.435C240.683 130.617 240.151 127.577 234.041 125.949C232.998 125.671 227.163 125.233 221.074 124.977C210.495 124.531 209.886 124.442 207.355 122.967C204.531 121.321 192.95 110.815 192.754 109.721C192.609 108.916 202.942 100.385 206.449 98.4141C208.856 97.0614 209.588 96.9633 218.553 96.7939L228.096 96.6137L227.749 106.441L227.402 116.267H237.172H246.94V111.466C246.94 108.824 247.1 100.789 247.295 93.6119L247.649 80.5605L223.489 80.5784L199.327 80.5962L190.172 87.9213ZM266.435 98.2701L266.577 115.98H275.185H283.793L283.592 106.333L283.391 96.6864H293.046C300.247 96.6864 303.306 96.9074 305.082 97.5563C307.895 98.5831 320.377 108.488 320.377 109.693C320.377 110.867 308.501 121.804 305.582 123.318C303.405 124.448 301.936 124.617 291.056 124.987C279.179 125.391 275.964 125.872 273.471 127.621C271.433 129.05 271.886 130.947 275.14 134.596C276.743 136.393 279.037 138.642 280.239 139.592C281.44 140.543 282.428 141.584 282.435 141.906C282.442 142.228 279.785 145.334 276.53 148.807C273.275 152.28 270.612 155.269 270.612 155.447C270.612 155.626 274.849 159.602 280.027 164.283C285.205 168.964 289.442 173.002 289.442 173.257C289.442 173.512 287.935 175.113 286.093 176.814C284.252 178.515 280.431 182.14 277.604 184.87C267.627 194.5 267.28 195.269 267.5 207.263L267.653 215.613L287.575 215.764L307.498 215.915L315.82 207.575C320.398 202.988 324.388 199.227 324.688 199.217C324.988 199.208 328.861 202.433 333.296 206.385C337.73 210.336 341.647 213.511 341.998 213.44C342.35 213.369 353.04 202.36 365.755 188.977C378.469 175.594 389.109 164.644 389.4 164.644C390.014 164.644 390.019 164.672 392.222 180.395L393.904 192.403L389.152 197.673C386.538 200.571 381.691 205.924 378.381 209.566C370.342 218.413 364.224 226.181 364.224 227.542C364.224 228.187 366.196 230.664 368.933 233.457C373.002 237.608 391.12 254.028 400.401 261.975C402.066 263.4 403.67 265.214 403.966 266.006C404.506 267.448 408.34 294.184 408.34 296.506C408.34 298.035 407.894 297.783 403.697 293.88C398.069 288.646 381.91 273.932 373.907 266.753C369.617 262.904 361.264 255.33 355.346 249.923C349.429 244.515 344.333 240.09 344.023 240.09C343.713 240.09 340.223 243.589 336.268 247.865C332.312 252.141 328.849 255.64 328.572 255.64C328.165 255.64 316.763 245.346 315.804 244.112C315.656 243.922 313.894 242.288 311.888 240.481L308.242 237.197L288.216 237.347L268.191 237.498L268.027 245.273C267.832 254.453 268.528 259.028 270.606 262.234C272.199 264.692 278.485 271.358 287.715 280.379C290.759 283.354 293.18 286.116 293.095 286.517C293.009 286.918 288.157 292.425 282.313 298.756C276.469 305.086 271.688 310.641 271.688 311.099C271.688 311.557 274.748 315.01 278.49 318.773C286.8 327.13 287.332 327.63 287.933 327.63C288.962 327.63 308.786 308.557 315.555 301.056C322.38 293.491 326.563 288.383 326.563 287.615C326.563 287.254 324.567 285.033 322.125 282.679C311.871 272.792 301.663 262.245 301.126 260.983C300.665 259.902 300.735 259.43 301.47 258.642C302.274 257.78 303.94 257.631 314.612 257.467L326.833 257.278L332.533 262.074C345.616 273.082 365.581 290.358 365.739 290.809C365.834 291.077 363.413 294.208 360.36 297.767C357.306 301.327 353.658 305.586 352.253 307.232C350.848 308.879 349.697 310.623 349.697 311.108C349.697 311.594 352.905 314.951 356.826 318.57C360.747 322.189 365.044 326.218 366.375 327.523L368.796 329.897L370.703 327.756C371.752 326.578 375.824 321.597 379.752 316.687C383.68 311.777 387.095 307.683 387.341 307.588C387.587 307.493 393.779 312.999 401.101 319.826C408.424 326.652 414.606 332.237 414.84 332.237C415.229 332.237 423.302 321.985 429.386 313.767L431.871 310.409L431.18 305.917C430.548 301.808 427.711 284.096 424.928 266.87C424.314 263.069 423.538 258.157 423.204 255.954L422.596 251.949L418.248 248.179C415.857 246.106 409.623 240.782 404.395 236.349C399.167 231.915 394.89 228.106 394.89 227.883C394.89 227.661 395.521 226.753 396.294 225.866C397.066 224.978 399.427 222.2 401.539 219.69C403.652 217.181 407.158 213.035 409.329 210.476C411.501 207.917 413.612 205.298 414.02 204.656C414.668 203.636 414.362 200.978 411.6 183.634C407.336 156.855 407.243 156.314 406.823 155.687C406.071 154.564 394.231 144.769 390.926 142.535C388.734 141.054 386.059 141.216 383.698 142.973C382.604 143.788 379.171 147.183 376.069 150.518C372.968 153.853 370.138 156.582 369.781 156.582C369.424 156.582 364.78 153.083 359.46 148.807C354.14 144.531 349.626 141.032 349.43 141.032C348.957 141.032 335.728 154.456 335.718 154.946C335.713 155.155 337.706 157.094 340.148 159.254C351.873 169.628 352.325 170.782 346.873 176.427C345.024 178.342 338.911 183.857 333.289 188.684L323.067 197.462L308.56 197.467C296.327 197.472 294.177 197.35 294.841 196.692C295.274 196.262 300.592 191.034 306.658 185.072C312.723 179.111 317.873 173.904 318.101 173.501C318.386 172.996 314.292 169.109 304.92 160.986C287.059 145.505 284.328 142.506 287.065 141.381C287.533 141.189 294.13 141.022 301.725 141.008L315.535 140.985L317.197 139.425C318.111 138.566 322.527 134.301 327.008 129.946C331.49 125.591 335.463 122.033 335.837 122.041C336.211 122.049 340.39 125.149 345.124 128.931C349.859 132.712 353.917 135.816 354.141 135.828C354.365 135.839 357.241 133.201 360.531 129.965L366.514 124.082L364.723 122.622C363.739 121.82 359.168 118.041 354.567 114.225C349.965 110.409 344.022 105.504 341.358 103.325C333.285 96.7204 322.777 88.0301 318.224 84.194L313.921 80.5669L290.107 80.564L266.292 80.5605L266.435 98.2701ZM114.985 147.709L104.463 156.115L103.833 159.948C100.638 179.383 97.3859 200.332 97.3829 201.503C97.3786 202.998 99.5806 205.742 112.567 220.42C116.04 224.345 118.759 227.766 118.612 228.023C118.327 228.516 110.141 235.717 104.894 240.09C99.8889 244.261 88.7683 253.963 88.7683 254.158C88.7683 254.256 88.4161 256.509 87.9857 259.164C87.5552 261.818 86.4777 268.526 85.5906 274.069C84.7039 279.612 83.1124 289.556 82.0542 296.167L80.1309 308.186L81.5996 310.277C82.4077 311.427 85.0256 314.83 87.4164 317.839C89.808 320.848 93.285 325.318 95.143 327.774C97.0015 330.228 98.7391 332.237 99.0061 332.237C99.2723 332.237 103.7 328.285 108.847 323.454C123.995 309.235 126.009 307.484 126.699 307.925C127.306 308.312 129.991 311.553 140.09 324.087C142.425 326.985 144.62 329.357 144.967 329.357C145.498 329.357 156.77 319.039 162.932 312.912L164.733 311.12L159.119 304.545C156.031 300.929 152.255 296.508 150.727 294.722C149.198 292.935 147.948 291.24 147.948 290.956C147.948 290.361 151.872 286.787 160.322 279.686C162.342 277.989 164.861 275.799 171.091 270.326C173.253 268.425 177.584 264.706 180.714 262.06L186.405 257.25L198.899 257.453C209.683 257.628 211.517 257.787 212.291 258.616C213.981 260.425 212.568 262.127 195.415 278.947C190.601 283.668 186.727 287.72 186.807 287.952C186.953 288.372 191.687 293.678 206.55 310.077C210.862 314.836 216.512 321.186 219.104 324.187L223.817 329.645L204.883 329.797L185.949 329.948L182.412 333.54C180.467 335.515 174.191 341.927 168.465 347.787C162.739 353.647 157.777 358.511 157.44 358.596C156.894 358.735 149.042 349.84 141.712 340.779C140.259 338.983 138.925 337.493 138.746 337.467C138.446 337.424 135.843 339.786 123.066 351.703C120.477 354.118 118.358 356.332 118.358 356.624C118.358 356.916 120.327 359.648 122.733 362.693C125.139 365.74 138.374 382.55 152.146 400.051L177.184 431.871H210.411C241.6 431.871 243.656 431.809 243.898 430.863C244.04 430.309 244.239 415.86 244.338 398.755L244.519 367.656L232.451 367.5C225.814 367.415 220.206 367.545 219.988 367.788C219.77 368.032 219.443 374.063 219.263 381.19C219.082 388.317 218.799 395.781 218.634 397.778L218.335 401.407L206.41 401.233C192.339 401.028 192.219 400.989 186.403 394.747C181.607 389.599 173.772 379.589 173.772 378.609C173.772 378.199 178.147 373.309 183.494 367.742C196.373 354.336 196.002 354.531 209.549 354.036C220.995 353.619 224.287 353.265 228.809 351.969C233.002 350.767 235.104 348.649 235.104 345.626C235.104 342.895 233.587 340.304 228.397 334.17L224.74 329.847L233.419 320.582C238.192 315.486 242.098 311.027 242.098 310.672C242.098 310.317 237.127 304.729 231.052 298.254L220.007 286.481L226.883 279.586C237.122 269.319 242.534 263.298 243.654 260.927C245.254 257.54 245.864 253.23 245.864 245.306C245.864 239.093 245.728 237.854 245.013 237.56C244.545 237.367 235.479 237.21 224.866 237.21H205.57L202.179 240.229C200.315 241.89 195.806 246.036 192.161 249.444C188.517 252.852 185.251 255.64 184.906 255.64C184.56 255.64 180.96 252.096 176.906 247.764C170.182 240.58 169.451 239.961 168.575 240.709C167.349 241.757 135.4 270.773 132.857 273.149C131.806 274.13 129.627 276.128 128.015 277.589C126.402 279.05 120.768 284.193 115.494 289.018C110.221 293.843 105.757 297.63 105.574 297.434C105.392 297.239 106.301 289.423 107.596 280.066L109.951 263.053L130.326 244.904L150.703 226.757L148.653 224.301C147.526 222.949 140.593 215.388 133.248 207.498L119.893 193.153L120.163 189.985C120.522 185.77 123.23 166.725 123.514 166.421C123.809 166.104 128.49 170.873 146.892 190.241C155.336 199.128 164.098 208.321 166.363 210.671L170.482 214.942L173.015 212.687C174.409 211.445 178.325 208.007 181.72 205.045L187.891 199.66L191.188 203.095C193.001 204.984 196.527 208.638 199.022 211.216L203.561 215.901H224.673H245.786L246.165 212.655C246.611 208.837 246.11 201.293 245.229 198.542C244.221 195.398 242.325 193.156 232.687 183.712C227.654 178.78 223.537 174.445 223.537 174.076C223.537 173.708 227.977 169.327 233.404 164.342C242.88 155.635 243.231 155.237 242.28 154.278C238.789 150.755 230.144 142.76 229.827 142.76C229.464 142.76 226.963 144.901 211.458 158.487C207.775 161.715 202.691 166.146 200.16 168.335C197.631 170.523 195.561 172.617 195.561 172.989C195.561 173.361 199.744 177.882 204.857 183.037C209.97 188.192 214.491 193.11 214.905 193.967C216.385 197.031 215.833 197.184 203.246 197.184H191.795L188.627 195.468C185.674 193.868 176.684 186.476 166.438 177.225C161.77 173.009 160.379 170.715 161.333 168.807C161.815 167.843 172.87 157.958 176.559 155.191L177.788 154.27L176.446 152.978C175.708 152.267 173.049 149.743 170.537 147.367C168.026 144.991 165.889 142.85 165.79 142.61C165.69 142.368 165.129 141.897 164.544 141.561C163.66 141.054 163.006 141.339 160.69 143.239C159.156 144.498 154.878 148.022 151.183 151.071C147.487 154.119 144.179 156.542 143.829 156.453C143.48 156.366 141.408 154.48 139.225 152.262C128.077 140.94 126.404 139.304 125.973 139.304C125.716 139.304 120.772 143.086 114.985 147.709ZM292.939 330.745C291.163 331.129 288.956 331.87 288.034 332.391C285.896 333.599 279.613 340.84 278.475 343.408C274.887 351.502 281.785 354.071 307.201 354.107L317.696 354.122L329.238 366.488L340.781 378.855L339.394 380.454C338.631 381.334 337.43 382.809 336.724 383.732C328.887 393.985 324.193 398.832 320.773 400.202C318.106 401.27 316.802 401.354 305.133 401.213L292.401 401.059L292.43 398.179C292.446 396.596 292.567 389.08 292.699 381.478L292.939 367.656L281.174 367.5L269.41 367.345L269.781 398.6C269.986 415.79 270.272 430.309 270.419 430.863C270.668 431.808 272.707 431.87 303.6 431.862C321.704 431.857 336.767 431.663 337.074 431.43C337.38 431.197 344.205 422.584 352.242 412.289C360.278 401.995 373.166 385.538 380.882 375.719L394.912 357.865L391.807 354.732C385.881 348.75 374.734 338.572 374.109 338.572C373.764 338.572 372.79 339.449 371.946 340.52C361.32 354.001 357.431 358.726 356.971 358.713C356.417 358.696 354.576 356.957 346.739 349.047C341.842 344.105 335.177 337.399 330.746 332.957L327.73 329.933L311.948 329.989C301.918 330.025 294.99 330.301 292.939 330.745Z" fill="#E8E84D"/>
        <defs>
        </defs>
        </svg>
        
  `;
  const resolveFaviconSvg = () => {
    const candidateUrls = [
      () => new URL("./logo.svg", import.meta.url),
      () => new URL("../src/logo.svg", import.meta.url)
    ];
    for (const getUrl of candidateUrls) {
      try {
        const svg = readFileSync(getUrl(), "utf8");
        if (svg) return svg;
      } catch {
      }
    }
    return defaultFaviconSvg;
  };
  const faviconSvg = resolveFaviconSvg();
  const faviconDataUrl = `data:image/svg+xml;base64,${Buffer.from(
    faviconSvg
  ).toString("base64")}`;
  const extractInput = (payload) => {
    if (payload && typeof payload === "object" && "input" in payload) {
      const { input } = payload;
      return input ?? {};
    }
    return {};
  };
  const listEntrypoints = () => Array.from(registry.values()).map((e) => ({
    key: e.key,
    description: e.description,
    streaming: Boolean(e.stream)
  }));
  const buildManifestForOrigin = (origin) => buildManifest({
    meta,
    registry: registry.values(),
    origin,
    payments: activePayments,
    ap2: opts?.ap2,
    trust: opts?.trust
  });
  app.get("/health", (c) => c.json({ ok: true, version: meta.version }));
  app.get("/entrypoints", (c) => c.json({ items: listEntrypoints() }));
  app.get("/.well-known/agent.json", (c) => {
    const origin = new URL(c.req.url).origin;
    return c.json(buildManifestForOrigin(origin));
  });
  app.get("/.well-known/agent-card.json", (c) => {
    const origin = new URL(c.req.url).origin;
    return c.json(buildManifestForOrigin(origin));
  });
  const registerEntrypointRoutes = (ep) => {
    const invokePath = `/entrypoints/${ep.key}/invoke`;
    const streamPath = `/entrypoints/${ep.key}/stream`;
    withPayments({
      app,
      path: invokePath,
      entrypoint: ep,
      kind: "invoke",
      payments: activePayments
    });
    if (ep.stream) {
      withPayments({
        app,
        path: streamPath,
        entrypoint: ep,
        kind: "stream",
        payments: activePayments
      });
    }
    app.post(invokePath, async (c) => {
      const rawBody = await c.req.json().catch(() => void 0);
      const input = extractInput(rawBody);
      if (ep.input) {
        const parsed = ep.input.safeParse(input);
        if (!parsed.success) {
          return c.json(
            { error: { code: "invalid_input", issues: parsed.error.issues } },
            400
          );
        }
      }
      const runId = crypto.randomUUID();
      console.info(
        "[agent-kit:entrypoint] invoke",
        `key=${ep.key}`,
        `runId=${runId}`
      );
      try {
        if (!ep.handler)
          return c.json({ error: { code: "not_implemented" } }, 501);
        const res = await ep.handler({
          key: ep.key,
          input,
          signal: c.req.raw.signal,
          headers: c.req.raw.headers,
          runId
        });
        return c.json({
          run_id: runId,
          status: "succeeded",
          output: res.output,
          usage: res.usage,
          model: res.model
        });
      } catch (err) {
        return c.json(
          {
            error: {
              code: "internal_error",
              message: err?.message || "error"
            }
          },
          500
        );
      }
    });
    app.post(streamPath, async (c) => {
      if (!ep.stream)
        return c.json(
          { error: { code: "stream_not_supported", key: ep.key } },
          400
        );
      const rawBody = await c.req.json().catch(() => void 0);
      const input = extractInput(rawBody);
      if (ep.input) {
        const parsed = ep.input.safeParse(input);
        if (!parsed.success) {
          return c.json(
            { error: { code: "invalid_input", issues: parsed.error.issues } },
            400
          );
        }
      }
      const runId = crypto.randomUUID();
      console.info(
        "[agent-kit:entrypoint] stream",
        `key=${ep.key}`,
        `runId=${runId}`
      );
      let seq = 0;
      const nowIso = () => (/* @__PURE__ */ new Date()).toISOString();
      const allocateSequence = () => seq++;
      return streamSSE(
        c,
        async (s) => {
          s.onAbort(() => {
          });
          const sendEnvelope = async (payload) => {
            const sequence = payload.sequence != null ? payload.sequence : allocateSequence();
            const createdAt = payload.createdAt ?? nowIso();
            const envelope = {
              ...payload,
              runId,
              sequence,
              createdAt
            };
            await s.writeSSE({
              event: envelope.kind,
              data: JSON.stringify(envelope),
              id: String(sequence)
            });
          };
          await sendEnvelope({ kind: "run-start", runId });
          const emit = async (chunk) => {
            await sendEnvelope(chunk);
          };
          try {
            const res = await ep.stream(
              {
                key: ep.key,
                input,
                signal: c.req.raw.signal,
                headers: c.req.raw.headers,
                runId
              },
              emit
            );
            await sendEnvelope({
              kind: "run-end",
              runId,
              status: res.status ?? "succeeded",
              output: res.output,
              usage: res.usage,
              model: res.model,
              error: res.error,
              metadata: res.metadata
            });
          } catch (err) {
            const message = err?.message || "error";
            await sendEnvelope({
              kind: "error",
              code: "internal_error",
              message
            });
            await sendEnvelope({
              kind: "run-end",
              runId,
              status: "failed",
              error: { code: "internal_error", message }
            });
          }
        },
        async (err, s) => {
          const message = err?.message || "error";
          const sequence = allocateSequence();
          const createdAt = nowIso();
          await s.writeSSE({
            event: "error",
            data: JSON.stringify({
              kind: "error",
              runId,
              sequence,
              createdAt,
              code: "stream_error",
              message
            }),
            id: String(sequence)
          });
          const endSequence = allocateSequence();
          await s.writeSSE({
            event: "run-end",
            data: JSON.stringify({
              kind: "run-end",
              runId,
              sequence: endSequence,
              createdAt: nowIso(),
              status: "failed",
              error: { code: "stream_error", message }
            }),
            id: String(endSequence)
          });
        }
      );
    });
  };
  const addEntrypoint = (def) => {
    if (!def.key) throw new Error("entrypoint.key required");
    ensureActivePaymentsForEntrypoint(def);
    registry.set(def.key, def);
    registerEntrypointRoutes(def);
  };
  if (opts?.entrypoints) {
    for (const entrypoint of opts.entrypoints) {
      addEntrypoint(entrypoint);
    }
  }
  app.get("/", (c) => {
    const origin = new URL(c.req.url).origin;
    const entrypointList = Array.from(registry.values());
    entrypointList.length;
    const manifestPath = "/.well-known/agent-card.json";
    activePayments?.network;
    const x402ClientExample = [
      'import { config } from "dotenv";',
      "import {",
      "  decodeXPaymentResponse,",
      "  wrapFetchWithPayment,",
      "  createSigner,",
      "  type Hex,",
      '} from "x402-fetch";',
      "",
      "config();",
      "",
      "const privateKey = process.env.PRIVATE_KEY as Hex | string;",
      "const baseURL = process.env.RESOURCE_SERVER_URL as string; // e.g. https://example.com",
      "const endpointPath = process.env.ENDPOINT_PATH as string; // e.g. /weather",
      "const url = `${baseURL}${endpointPath}`; // e.g. https://example.com/weather",
      "",
      "if (!baseURL || !privateKey || !endpointPath) {",
      '  console.error("Missing required environment variables");',
      "  process.exit(1);",
      "}",
      "",
      "/**",
      " * Demonstrates paying for a protected resource using x402-fetch.",
      " *",
      " * Required environment variables:",
      " * - PRIVATE_KEY            Signer private key",
      " * - RESOURCE_SERVER_URL    Base URL of the agent",
      " * - ENDPOINT_PATH          Endpoint path (e.g. /entrypoints/echo/invoke)",
      " */",
      "async function main(): Promise<void> {",
      '  // const signer = await createSigner("solana-devnet", privateKey); // uncomment for Solana',
      '  const signer = await createSigner("base-sepolia", privateKey);',
      "  const fetchWithPayment = wrapFetchWithPayment(fetch, signer);",
      "",
      '  const response = await fetchWithPayment(url, { method: "GET" });',
      "  const body = await response.json();",
      "  console.log(body);",
      "",
      "  const paymentResponse = decodeXPaymentResponse(",
      '    response.headers.get("x-payment-response")!',
      "  );",
      "  console.log(paymentResponse);",
      "}",
      "",
      "main().catch((error) => {",
      "  console.error(error?.response?.data?.error ?? error);",
      "  process.exit(1);",
      "});"
    ].join("\n");
    return c.html(
      renderLandingPage({
        meta,
        origin,
        entrypoints: entrypointList,
        activePayments,
        manifestPath,
        faviconDataUrl,
        x402ClientExample
      })
    );
  });
  return {
    app,
    addEntrypoint,
    config: resolvedConfig,
    get payments() {
      return activePayments;
    }
  };
}
function logWarning(logger, message, ...args) {
  if (logger?.warn) {
    logger.warn(message, ...args);
    return;
  }
  console.warn(message, ...args);
}
function attachPreconnect(fetchImpl, baseFetch) {
  const upstream = baseFetch;
  const fallbackPreconnect = async () => {
  };
  const preconnectFn = typeof upstream.preconnect === "function" ? upstream.preconnect.bind(baseFetch) : fallbackPreconnect;
  fetchImpl.preconnect = preconnectFn;
  return fetchImpl;
}
function inferChainId(network) {
  if (!network) return void 0;
  const normalized = network.toLowerCase();
  if (normalized === "base" || normalized === "eip155:8453") return 8453;
  if (normalized === "base-sepolia" || normalized === "eip155:84532" || normalized === "base_testnet")
    return 84532;
  return void 0;
}
function normalizeTypedData(input) {
  const primaryType = input.primary_type ?? input.primaryType;
  if (!primaryType) {
    throw new Error("[agent-kit] Typed data missing primaryType");
  }
  return {
    domain: input.domain ?? {},
    types: input.types ?? {},
    message: input.message ?? {},
    primary_type: primaryType
  };
}
var toStringMessage = (message) => {
  if (typeof message === "string") return message;
  if (typeof message?.raw === "string") {
    return String(message.raw);
  }
  if (message instanceof Uint8Array) {
    return Array.from(message).map((byte) => byte.toString(16).padStart(2, "0")).join("");
  }
  if (typeof message === "object") {
    return JSON.stringify(message ?? "");
  }
  return String(message ?? "");
};
async function fetchWalletAddress(runtime) {
  try {
    const detail = await runtime.api.getAgent();
    const billingWallet = detail?.billing?.wallet ?? detail?.wallet ?? detail?.billingWallet;
    const address = billingWallet?.address;
    return typeof address === "string" ? address : null;
  } catch {
    return null;
  }
}
function resolveMaxPaymentBaseUnits(override, configOverride) {
  if (typeof override === "bigint") return override;
  const config = configOverride ?? getAgentKitConfig().wallet;
  if (typeof config.maxPaymentBaseUnits === "bigint") {
    return config.maxPaymentBaseUnits;
  }
  if (typeof config.maxPaymentUsd === "number" && Number.isFinite(config.maxPaymentUsd)) {
    const scaled = Math.floor(config.maxPaymentUsd * 1e6);
    return scaled > 0 ? BigInt(scaled) : void 0;
  }
  return void 0;
}
var normalizeAddressOrNull = (value) => {
  const sanitized = sanitizeAddress(value ?? void 0);
  return sanitized === ZERO_ADDRESS ? null : sanitized;
};
function createRuntimeSigner(opts) {
  let currentAddress = normalizeAddressOrNull(opts.initialAddress);
  let currentChainId = opts.chainId;
  const signer = {
    chain: { id: currentChainId },
    account: { address: currentAddress },
    transport: { type: "agent-runtime" },
    async signTypedData(data) {
      const typedData = normalizeTypedData(data);
      const domainChain = typedData.domain?.chainId ?? typedData.domain?.chain_id;
      if (typeof domainChain !== "undefined") {
        const parsed = Number(domainChain);
        if (Number.isFinite(parsed) && parsed > 0) {
          currentChainId = parsed;
          signer.chain.id = parsed;
        }
      }
      const response = await opts.runtime.api.signTypedData({
        typed_data: typedData,
        idempotency_key: typeof crypto?.randomUUID === "function" ? crypto.randomUUID() : globalThis?.crypto?.randomUUID ? globalThis.crypto.randomUUID() : `${Date.now()}-${Math.random()}`
      });
      const nextAddress = normalizeAddressOrNull(response?.wallet?.address);
      currentAddress = nextAddress ?? currentAddress;
      signer.account.address = currentAddress;
      const signature = response?.signed?.signature;
      if (typeof signature !== "string") {
        throw new Error("[agent-kit] Wallet signature missing in response");
      }
      return signature;
    },
    async signMessage(message) {
      const payload = toStringMessage(message);
      const response = await opts.runtime.api.signMessage({
        message: payload
      });
      const nextAddress = normalizeAddressOrNull(response?.wallet?.address);
      currentAddress = nextAddress ?? currentAddress;
      signer.account.address = currentAddress;
      const signature = response?.signed?.signature;
      if (typeof signature !== "string") {
        throw new Error("[agent-kit] Wallet signature missing in response");
      }
      return signature;
    }
  };
  return signer;
}
async function createRuntimePaymentContext(options) {
  const baseFetch = options.fetch ?? globalThis.fetch;
  if (!baseFetch) {
    logWarning(
      options.logger,
      "[agent-kit] No fetch implementation available; skipping payment wrapping"
    );
    return {
      fetchWithPayment: null,
      signer: null,
      walletAddress: null,
      chainId: null
    };
  }
  if (options.privateKey) {
    try {
      const signer2 = await createSigner(
        options.network ?? getAgentKitConfig().payments.network,
        options.privateKey
      );
      const fetchWithPayment = attachPreconnect(
        wrapFetchWithPayment(
          baseFetch,
          signer2,
          resolveMaxPaymentBaseUnits(options.maxPaymentBaseUnits)
        ),
        baseFetch
      );
      return {
        fetchWithPayment,
        signer: signer2,
        walletAddress: normalizeAddressOrNull(
          signer2?.account?.address
        ),
        chainId: typeof signer2?.chain?.id === "number" ? signer2.chain.id : null
      };
    } catch (error) {
      logWarning(
        options.logger,
        `[agent-kit] Failed to initialise paid fetch with private key: ${error?.message ?? error}`
      );
      return {
        fetchWithPayment: null,
        signer: null,
        walletAddress: null,
        chainId: null
      };
    }
  }
  if (!options.runtime) {
    logWarning(
      options.logger,
      "[agent-kit] Runtime payment context requires either a runtime or private key"
    );
    return {
      fetchWithPayment: null,
      signer: null,
      walletAddress: null,
      chainId: null
    };
  }
  const runtime = options.runtime;
  await runtime.ensureAccessToken();
  const network = options.network ?? getAgentKitConfig().payments.network ?? void 0;
  const chainId = options.chainId ?? inferChainId(network);
  if (!chainId) {
    logWarning(
      options.logger,
      "[agent-kit] Unable to derive chainId for runtime payments; provide options.chainId or options.network"
    );
    return {
      fetchWithPayment: null,
      signer: null,
      walletAddress: null,
      chainId: null
    };
  }
  const walletAddress = await fetchWalletAddress(runtime);
  const signer = createRuntimeSigner({
    runtime,
    initialAddress: walletAddress,
    chainId
  });
  try {
    const fetchWithPayment = attachPreconnect(
      wrapFetchWithPayment(
        baseFetch,
        signer,
        resolveMaxPaymentBaseUnits(options.maxPaymentBaseUnits)
      ),
      baseFetch
    );
    return {
      fetchWithPayment,
      signer,
      walletAddress: signer.account.address,
      chainId
    };
  } catch (error) {
    logWarning(
      options.logger,
      `[agent-kit] Failed to initialise runtime-backed paid fetch: ${error?.message ?? error}`
    );
    return {
      fetchWithPayment: null,
      signer: null,
      walletAddress: normalizeAddressOrNull(walletAddress),
      chainId
    };
  }
}

export { AP2_EXTENSION_URI, CART_MANDATE_DATA_KEY, CONTACT_ADDRESS_DATA_KEY, IDENTITY_REGISTRY_ABI, INTENT_MANDATE_DATA_KEY, PAYMENT_MANDATE_DATA_KEY, PAYMENT_METHOD_DATA_KEY, ZERO_ADDRESS, accountFromPrivateKey, bootstrapIdentity, bootstrapTrust, buildManifest, buildTrustConfigFromIdentity, configureAgentKit, createAgentApp, createAxLLMClient, createIdentityRegistryClient, createRuntimePaymentContext, createX402Fetch, createX402LLM, getAgentKitConfig, makeViemClientsFromEnv, normalizeAddress, normalizeDomain, paymentsFromEnv, resetAgentKitConfigForTesting, resolveEntrypointPrice, sanitizeAddress, signAgentDomainProof, toCaip10, toJsonSchemaOrUndefined, withPayments, x402LLM };
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map