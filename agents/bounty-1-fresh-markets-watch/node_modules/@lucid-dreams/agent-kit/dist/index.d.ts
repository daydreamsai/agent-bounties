import { E as EntrypointDef, P as PaymentsConfig, A as AgentMeta, a as AP2Config, b as AgentCardWithEntrypoints } from './types-B_ItB1r2.js';
export { x as AP2ExtensionDescriptor, w as AP2ExtensionParams, v as AP2Role, u as AP2_EXTENSION_URI, T as AgentCapabilities, V as AgentCard, y as AgentContext, n as CART_MANDATE_DATA_KEY, C as CONTACT_ADDRESS_DATA_KEY, q as CartContents, r as CartMandate, c as ContactAddress, I as INTENT_MANDATE_DATA_KEY, p as IntentMandate, Q as Manifest, o as PAYMENT_MANDATE_DATA_KEY, d as PAYMENT_METHOD_DATA_KEY, e as PaymentCurrencyAmount, k as PaymentDetailsInit, j as PaymentDetailsModifier, f as PaymentItem, t as PaymentMandate, s as PaymentMandateContents, R as PaymentMethod, i as PaymentMethodData, h as PaymentOptions, l as PaymentRequest, m as PaymentResponse, g as PaymentShippingOption, H as StreamAssetEnvelope, G as StreamAssetExternalTransfer, F as StreamAssetInlineTransfer, J as StreamControlEnvelope, D as StreamDeltaEnvelope, M as StreamEnvelope, S as StreamEnvelopeBase, K as StreamErrorEnvelope, N as StreamPushEnvelope, O as StreamResult, L as StreamRunEndEnvelope, z as StreamRunStartEnvelope, B as StreamTextEnvelope, U as Usage } from './types-B_ItB1r2.js';
import { TrustConfig } from '@lucid-dreams/agent-kit-identity';
export * from '@lucid-dreams/agent-kit-identity';
export { RegistrationEntry, TrustConfig, TrustModel } from '@lucid-dreams/agent-kit-identity';
export { AxLLMClient, AxLLMClientOptions, createAxLLMClient } from './utils/axllm.js';
export { CreateX402FetchOptions, CreateX402LLMOptions, X402Account, accountFromPrivateKey, createX402Fetch, createX402LLM, x402LLM } from './utils/x402.js';
export { paymentsFromEnv, toJsonSchemaOrUndefined } from './utils.js';
import { Resource, SolanaAddress, Network, paymentMiddleware } from 'x402-hono';
import { FacilitatorConfig, Signer } from 'x402/types';
import * as hono_types from 'hono/types';
import { Hono } from 'hono';
import { AgentRuntime } from '@lucid-dreams/agent-auth';
import { Hex } from 'x402-fetch';
import 'zod';
import '@ax-llm/ax';

type PaymentDefaultsConfig = {
    facilitatorUrl?: Resource;
    payTo?: `0x${string}` | SolanaAddress;
    network?: Network;
    defaultPrice?: string;
};
type WalletConfig = {
    walletApiUrl?: string;
    maxPaymentBaseUnits?: bigint;
    maxPaymentUsd?: number;
};
type AgentKitConfig = {
    payments?: PaymentDefaultsConfig;
    wallet?: WalletConfig;
};
type ResolvedAgentKitConfig = {
    payments: {
        facilitatorUrl: Resource;
        payTo: `0x${string}` | SolanaAddress;
        network: Network;
        defaultPrice?: string;
    };
    wallet: {
        walletApiUrl: string;
        maxPaymentBaseUnits?: bigint;
        maxPaymentUsd?: number;
    };
};
declare function configureAgentKit(overrides: AgentKitConfig): void;
declare function resetAgentKitConfigForTesting(): void;
declare function getAgentKitConfig(): ResolvedAgentKitConfig;

declare function resolveEntrypointPrice(entrypoint: EntrypointDef, payments: PaymentsConfig | undefined, which: "invoke" | "stream"): string | undefined;

type PaymentMiddlewareFactory = typeof paymentMiddleware;
type WithPaymentsParams = {
    app: {
        use: (path: string, ...handlers: unknown[]) => void;
    };
    path: string;
    entrypoint: EntrypointDef;
    kind: "invoke" | "stream";
    payments?: PaymentsConfig;
    facilitator?: FacilitatorConfig;
    middlewareFactory?: PaymentMiddlewareFactory;
};
declare function withPayments({ app, path, entrypoint, kind, payments, facilitator, middlewareFactory, }: WithPaymentsParams): boolean;

declare function buildManifest({ meta, registry, origin, payments, ap2, trust, }: {
    meta: AgentMeta;
    registry: Iterable<EntrypointDef>;
    origin: string;
    payments?: PaymentsConfig;
    ap2?: AP2Config;
    trust?: TrustConfig;
}): AgentCardWithEntrypoints;

type CreateAgentAppOptions = {
    payments?: PaymentsConfig | false;
    ap2?: AP2Config;
    trust?: TrustConfig;
    entrypoints?: Iterable<EntrypointDef>;
    config?: AgentKitConfig;
    useConfigPayments?: boolean;
};
declare function createAgentApp(meta: AgentMeta, opts?: CreateAgentAppOptions): {
    app: Hono<hono_types.BlankEnv, hono_types.BlankSchema, "/">;
    addEntrypoint: (def: EntrypointDef) => void;
    config: ResolvedAgentKitConfig;
    readonly payments: PaymentsConfig;
};

type FetchLike = typeof fetch;
type RuntimePaymentLogger = {
    warn?: (message: string, ...args: unknown[]) => void;
};
type RuntimePaymentOptions = {
    /**
     * Existing AgentRuntime instance used to fulfil wallet requests.
     * Required unless `privateKey` is provided.
     */
    runtime?: AgentRuntime;
    /**
     * Optional override for the network used to infer the payment chain.
     * Defaults to `getAgentKitConfig().payments.network`.
     */
    network?: string;
    /**
     * Optional explicit chain id. When omitted we attempt to infer it from `network`.
     */
    chainId?: number;
    /**
     * Maximum payment in base units (USDC has 6 decimals). Falls back to kit config.
     */
    maxPaymentBaseUnits?: bigint;
    /**
     * Optional direct private key to construct a local signer instead of using runtime wallet APIs.
     */
    privateKey?: Hex | string;
    /**
     * Fetch implementation to wrap. Defaults to `globalThis.fetch`.
     */
    fetch?: FetchLike;
    /**
     * Logger used for non-fatal warnings.
     */
    logger?: RuntimePaymentLogger;
};
type RuntimePaymentContext = {
    fetchWithPayment: FetchLike | null;
    signer: Signer | null;
    walletAddress: `0x${string}` | null;
    chainId: number | null;
};
declare function createRuntimePaymentContext(options: RuntimePaymentOptions): Promise<RuntimePaymentContext>;

export { AP2Config, AgentCardWithEntrypoints, type AgentKitConfig, AgentMeta, type CreateAgentAppOptions, EntrypointDef, PaymentsConfig, type ResolvedAgentKitConfig, type RuntimePaymentContext, type RuntimePaymentLogger, type RuntimePaymentOptions, type WithPaymentsParams, buildManifest, configureAgentKit, createAgentApp, createRuntimePaymentContext, getAgentKitConfig, resetAgentKitConfigForTesting, resolveEntrypointPrice, withPayments };
