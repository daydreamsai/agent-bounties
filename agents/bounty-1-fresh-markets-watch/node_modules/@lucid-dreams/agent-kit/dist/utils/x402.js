import { ai } from '@ax-llm/ax';
import { privateKeyToAccount } from 'viem/accounts';
import { wrapFetchWithPayment } from 'x402-fetch';

// src/utils/x402.ts
var DEFAULT_MODEL = "gpt-5";
var DEFAULT_PROVIDER = "openai";
var DEFAULT_API_URL = "https://api-beta.daydreams.systems/v1";
var MAX_PAYMENT_BASE_UNITS = "10000000";
var createX402Fetch = ({
  account,
  fetchImpl
}) => {
  if (!account) {
    throw new Error("[agent-kit] createX402Fetch requires an account");
  }
  const accountAddress = typeof account === "object" && account && "address" in account ? account.address : void 0;
  console.info(
    "[agent-kit:x402] creating paid fetch",
    accountAddress ? `for ${accountAddress}` : "(account address unavailable)"
  );
  const paymentFetch = wrapFetchWithPayment(
    fetchImpl ?? fetch,
    account,
    BigInt(MAX_PAYMENT_BASE_UNITS)
  );
  console.info("[agent-kit:x402] wrapFetchWithPayment initialised");
  const describeInput = (input) => {
    if (typeof input === "string") return input;
    if (input instanceof URL) return input.toString();
    if (typeof input?.url === "string") {
      return input.url;
    }
    return "[object Request]";
  };
  const wrappedFetch = Object.assign(
    async (input, init) => {
      const requestUrl = describeInput(input);
      const requestMethod = init?.method ?? (input instanceof Request ? input.method : void 0) ?? "POST";
      console.info("[agent-kit:x402] fetch request", requestUrl, requestMethod);
      try {
        const response = await paymentFetch(input, init ?? {});
        const paymentHeader = response.headers.get("X-PAYMENT-RESPONSE");
        console.info(
          "[agent-kit:x402] fetch response",
          requestUrl,
          response.status,
          paymentHeader ? "(paid)" : "(no x402 header)"
        );
        return response;
      } catch (error) {
        console.warn(
          "[agent-kit:x402] fetch failed",
          requestUrl,
          error?.message ?? error
        );
        throw error;
      }
    },
    {
      preconnect: paymentFetch.preconnect ?? (async () => {
      })
    }
  );
  return wrappedFetch;
};
var accountFromPrivateKey = (privateKey) => {
  if (!privateKey || privateKey.trim().length === 0) {
    throw new Error(
      "[agent-kit] accountFromPrivateKey requires a non-empty private key"
    );
  }
  return privateKeyToAccount(privateKey);
};
var createX402LLM = (options = {}) => {
  if (options.account) {
    console.info("[agent-kit:x402] initialising LLM with provided account");
  } else if (options.privateKey) {
    console.info("[agent-kit:x402] deriving account from supplied private key");
  } else {
    console.info(
      "[agent-kit:x402] no explicit account/private key supplied; falling back to env or downstream defaults"
    );
  }
  const account = options.account ?? (options.privateKey ? accountFromPrivateKey(options.privateKey) : void 0);
  if (!account) {
    throw new Error(
      "[agent-kit] createX402LLM requires either an account or a private key"
    );
  }
  const paymentFetch = options.fetch ?? createX402Fetch({ account, fetchImpl: options.fetchImpl });
  console.info("[agent-kit:x402] payment-enabled fetch ready for LLM");
  const aiOverrides = options.ai ?? {};
  const {
    config: configOverridesRaw,
    options: optionOverridesRaw,
    apiKey: apiKeyOverrideRaw,
    apiURL: apiUrlOverrideRaw,
    name: nameOverrideRaw,
    ...restAiProps
  } = aiOverrides;
  const configOverrides = configOverridesRaw && typeof configOverridesRaw === "object" ? configOverridesRaw : void 0;
  const optionOverrides = optionOverridesRaw && typeof optionOverridesRaw === "object" ? optionOverridesRaw : void 0;
  const explicitApiKey = typeof apiKeyOverrideRaw === "string" && apiKeyOverrideRaw.trim().length > 0 ? apiKeyOverrideRaw : void 0;
  const nameOverride = typeof nameOverrideRaw === "string" && nameOverrideRaw.trim().length > 0 ? nameOverrideRaw : void 0;
  const apiUrlOverride = typeof apiUrlOverrideRaw === "string" && apiUrlOverrideRaw.trim().length > 0 ? apiUrlOverrideRaw : void 0;
  const apiKey = explicitApiKey ?? process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error(
      "[agent-kit] createX402LLM requires an OpenAI API key (set options.ai.apiKey or OPENAI_API_KEY)"
    );
  }
  const baseConfig = {
    stream: false
  };
  const finalConfig = {
    ...baseConfig,
    ...configOverrides ?? {}
  };
  const finalOptions = {
    ...optionOverrides ?? {},
    fetch: paymentFetch
  };
  const aiArgs = {
    ...restAiProps,
    name: nameOverride ?? DEFAULT_PROVIDER,
    apiKey,
    apiURL: apiUrlOverride ?? DEFAULT_API_URL,
    config: finalConfig,
    options: finalOptions
  };
  console.info(
    "[agent-kit:x402] creating Ax client",
    `provider=${aiArgs.name}`,
    `model=${finalConfig.model}`
    // `apiURL=${aiArgs}`
  );
  return ai(aiArgs);
};
var x402LLM = ({
  privateKey = process.env.PRIVATE_KEY,
  model = DEFAULT_MODEL,
  apiURL = DEFAULT_API_URL
}) => createX402LLM({
  privateKey,
  ai: { apiURL }
});

export { accountFromPrivateKey, createX402Fetch, createX402LLM, x402LLM };
//# sourceMappingURL=x402.js.map
//# sourceMappingURL=x402.js.map