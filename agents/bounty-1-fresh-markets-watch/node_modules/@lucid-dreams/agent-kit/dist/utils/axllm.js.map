{"version":3,"sources":["../../src/utils/x402.ts","../../src/utils/axllm.ts"],"names":["DEFAULT_PROVIDER"],"mappings":"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","file":"axllm.js","sourcesContent":["import { ai } from \"@ax-llm/ax\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { wrapFetchWithPayment, type Hex } from \"x402-fetch\";\n\nconst DEFAULT_MODEL = \"gpt-5\";\nconst DEFAULT_PROVIDER = \"openai\";\nconst DEFAULT_API_URL = \"https://api-beta.daydreams.systems/v1\";\nconst MAX_PAYMENT_BASE_UNITS = \"10000000\";\n\ntype WrappedFetch = typeof fetch & {\n  preconnect?: () => Promise<void>;\n};\n\nexport type X402Account = Parameters<typeof wrapFetchWithPayment>[1];\n\nexport type CreateX402FetchOptions = {\n  account: X402Account;\n  fetchImpl?: typeof fetch;\n};\n\nexport const createX402Fetch = ({\n  account,\n  fetchImpl,\n}: CreateX402FetchOptions): WrappedFetch => {\n  if (!account) {\n    throw new Error(\"[agent-kit] createX402Fetch requires an account\");\n  }\n  const accountAddress =\n    typeof account === \"object\" && account && \"address\" in account\n      ? (account as { address?: string }).address\n      : undefined;\n  console.info(\n    \"[agent-kit:x402] creating paid fetch\",\n    accountAddress ? `for ${accountAddress}` : \"(account address unavailable)\"\n  );\n  const paymentFetch = wrapFetchWithPayment(\n    (fetchImpl ?? fetch) as Parameters<typeof wrapFetchWithPayment>[0],\n    account,\n    BigInt(MAX_PAYMENT_BASE_UNITS)\n  ) as WrappedFetch;\n  console.info(\"[agent-kit:x402] wrapFetchWithPayment initialised\");\n  const describeInput = (input: Parameters<typeof fetch>[0]) => {\n    if (typeof input === \"string\") return input;\n    if (input instanceof URL) return input.toString();\n    if (typeof (input as Request)?.url === \"string\") {\n      return (input as Request).url;\n    }\n    return \"[object Request]\";\n  };\n  const wrappedFetch: WrappedFetch = Object.assign(\n    async (\n      input: Parameters<typeof fetch>[0],\n      init?: Parameters<typeof fetch>[1]\n    ) => {\n      const requestUrl = describeInput(input);\n      const requestMethod =\n        init?.method ??\n        (input instanceof Request ? input.method : undefined) ??\n        \"POST\";\n      console.info(\"[agent-kit:x402] fetch request\", requestUrl, requestMethod);\n      try {\n        const response = await paymentFetch(input, init ?? {});\n        const paymentHeader = response.headers.get(\"X-PAYMENT-RESPONSE\");\n        console.info(\n          \"[agent-kit:x402] fetch response\",\n          requestUrl,\n          response.status,\n          paymentHeader ? \"(paid)\" : \"(no x402 header)\"\n        );\n        return response;\n      } catch (error) {\n        console.warn(\n          \"[agent-kit:x402] fetch failed\",\n          requestUrl,\n          (error as Error)?.message ?? error\n        );\n        throw error;\n      }\n    },\n    {\n      preconnect: paymentFetch.preconnect ?? (async () => {}),\n    }\n  );\n  return wrappedFetch;\n};\n\nexport const accountFromPrivateKey = (privateKey: Hex): X402Account => {\n  if (!privateKey || privateKey.trim().length === 0) {\n    throw new Error(\n      \"[agent-kit] accountFromPrivateKey requires a non-empty private key\"\n    );\n  }\n  return privateKeyToAccount(privateKey) as X402Account;\n};\n\ntype AiFactoryArgs = Parameters<typeof ai>[0];\ntype AiFactoryConfig = NonNullable<AiFactoryArgs[\"config\"]>;\ntype AiFactoryOptions = NonNullable<AiFactoryArgs[\"options\"]>;\n\nexport type CreateX402LLMOptions = {\n  account?: X402Account;\n  privateKey?: Hex;\n  fetch?: WrappedFetch;\n  fetchImpl?: typeof fetch;\n  model?: string;\n  ai?:\n    | (Record<string, unknown> & {\n        options?: Partial<AiFactoryOptions>;\n        config?: Partial<AiFactoryConfig>;\n      })\n    | undefined;\n};\n\nexport const createX402LLM = (\n  options: CreateX402LLMOptions = {}\n): ReturnType<typeof ai> => {\n  if (options.account) {\n    console.info(\"[agent-kit:x402] initialising LLM with provided account\");\n  } else if (options.privateKey) {\n    console.info(\"[agent-kit:x402] deriving account from supplied private key\");\n  } else {\n    console.info(\n      \"[agent-kit:x402] no explicit account/private key supplied; falling back to env or downstream defaults\"\n    );\n  }\n\n  const account =\n    options.account ??\n    (options.privateKey\n      ? accountFromPrivateKey(options.privateKey)\n      : undefined);\n\n  if (!account) {\n    throw new Error(\n      \"[agent-kit] createX402LLM requires either an account or a private key\"\n    );\n  }\n\n  const paymentFetch =\n    options.fetch ?? createX402Fetch({ account, fetchImpl: options.fetchImpl });\n  console.info(\"[agent-kit:x402] payment-enabled fetch ready for LLM\");\n\n  const aiOverrides = options.ai ?? {};\n  const {\n    config: configOverridesRaw,\n    options: optionOverridesRaw,\n    apiKey: apiKeyOverrideRaw,\n    apiURL: apiUrlOverrideRaw,\n    name: nameOverrideRaw,\n    ...restAiProps\n  } = aiOverrides;\n\n  const configOverrides =\n    configOverridesRaw && typeof configOverridesRaw === \"object\"\n      ? (configOverridesRaw as Partial<AiFactoryConfig>)\n      : undefined;\n  const optionOverrides =\n    optionOverridesRaw && typeof optionOverridesRaw === \"object\"\n      ? (optionOverridesRaw as Partial<AiFactoryOptions>)\n      : undefined;\n  const explicitApiKey =\n    typeof apiKeyOverrideRaw === \"string\" && apiKeyOverrideRaw.trim().length > 0\n      ? apiKeyOverrideRaw\n      : undefined;\n  const nameOverride =\n    typeof nameOverrideRaw === \"string\" && nameOverrideRaw.trim().length > 0\n      ? nameOverrideRaw\n      : undefined;\n  const apiUrlOverride =\n    typeof apiUrlOverrideRaw === \"string\" && apiUrlOverrideRaw.trim().length > 0\n      ? apiUrlOverrideRaw\n      : undefined;\n\n  const apiKey = (explicitApiKey ?? process.env.OPENAI_API_KEY) as\n    | string\n    | undefined;\n\n  if (!apiKey) {\n    throw new Error(\n      \"[agent-kit] createX402LLM requires an OpenAI API key (set options.ai.apiKey or OPENAI_API_KEY)\"\n    );\n  }\n\n  const baseConfig: AiFactoryConfig = {\n    stream: false,\n  };\n\n  const finalConfig = {\n    ...baseConfig,\n    ...(configOverrides ?? {}),\n  } as AiFactoryConfig;\n\n  const finalOptions = {\n    ...(optionOverrides ?? {}),\n    fetch: paymentFetch,\n  } as AiFactoryOptions;\n\n  const aiArgs = {\n    ...restAiProps,\n    name: nameOverride ?? DEFAULT_PROVIDER,\n    apiKey,\n    apiURL: apiUrlOverride ?? DEFAULT_API_URL,\n    config: finalConfig,\n    options: finalOptions,\n  } as AiFactoryArgs;\n\n  console.info(\n    \"[agent-kit:x402] creating Ax client\",\n    `provider=${aiArgs.name}`,\n    `model=${finalConfig.model}`\n    // `apiURL=${aiArgs}`\n  );\n\n  return ai(aiArgs);\n};\n\nexport const x402LLM = ({\n  privateKey = process.env.PRIVATE_KEY as Hex,\n  model = DEFAULT_MODEL,\n  apiURL = DEFAULT_API_URL,\n}: {\n  privateKey: Hex;\n  model?: string;\n  apiURL?: string;\n}) =>\n  createX402LLM({\n    privateKey,\n    model,\n    ai: { apiURL },\n  });\n","import { createX402LLM, type CreateX402LLMOptions } from \"./x402\";\nimport type { Hex } from \"viem\";\n\nexport type AxLLMClientOptions = {\n  provider?: string;\n  model?: string;\n  apiKey?: string;\n  apiUrl?: string;\n  temperature?: number;\n  debug?: boolean;\n  env?: Record<string, string | undefined>;\n  client?: ReturnType<typeof createX402LLM>;\n  clientFactory?: () => ReturnType<typeof createX402LLM> | null;\n  x402?: CreateX402LLMOptions;\n  logger?: {\n    warn?: (message: string, error?: unknown) => void;\n  };\n};\n\nexport type AxLLMClient = {\n  ax: ReturnType<typeof createX402LLM> | null;\n  isConfigured(): boolean;\n};\n\nconst DEFAULT_PROVIDER = \"openai\";\nconst DEFAULT_MODEL = \"gpt-5\";\n\nexport function createAxLLMClient(\n  options: AxLLMClientOptions = {}\n): AxLLMClient {\n  const resolved = resolveOptions(options);\n  const logger = options.logger;\n\n  const axInstance = (() => {\n    if (options.client) return options.client;\n\n    const fromFactory = options.clientFactory?.();\n    if (fromFactory) return fromFactory;\n\n    try {\n      return createX402LLM(buildCreateOptions(resolved, options.x402));\n    } catch (error) {\n      logger?.warn?.(\n        `[agent-kit] failed to initialise Ax LLM client: ${\n          (error as Error).message\n        }`,\n        error\n      );\n      return null;\n    }\n  })();\n\n  return {\n    ax: axInstance,\n    isConfigured() {\n      return Boolean(axInstance);\n    },\n  };\n}\n\nfunction resolveOptions(options: AxLLMClientOptions) {\n  const env = readEnv(options.env);\n\n  const provider =\n    options.provider ??\n    env.AX_PROVIDER ??\n    env.AXLLM_PROVIDER ??\n    env.OPENAI_PROVIDER ??\n    DEFAULT_PROVIDER;\n\n  const model =\n    options.model ??\n    env.AX_MODEL ??\n    env.AXLLM_MODEL ??\n    env.OPENAI_MODEL ??\n    DEFAULT_MODEL;\n\n  const apiKey = options.apiKey ?? env.OPENAI_API_KEY;\n\n  const apiUrl =\n    options.apiUrl ?? env.AX_API_URL ?? env.AXLLM_API_URL ?? env.OPENAI_API_URL;\n\n  const temperature =\n    options.temperature ??\n    parseNumber(\n      env.AX_TEMPERATURE ?? env.AXLLM_TEMPERATURE ?? env.OPENAI_TEMPERATURE\n    );\n\n  const debug =\n    options.debug ?? parseBoolean(env.AX_DEBUG ?? env.AXLLM_DEBUG) ?? false;\n\n  return { provider, model, apiKey, apiUrl, temperature, debug };\n}\n\nfunction buildCreateOptions(\n  resolved: ReturnType<typeof resolveOptions>,\n  overrides: CreateX402LLMOptions | undefined\n): CreateX402LLMOptions {\n  const x402 = overrides ? { ...overrides } : {};\n  const aiOverrides = overrides?.ai ? { ...overrides.ai } : {};\n  const aiConfigOverrides =\n    aiOverrides.config && typeof aiOverrides.config === \"object\"\n      ? { ...aiOverrides.config }\n      : undefined;\n  const aiOptionOverrides =\n    aiOverrides.options && typeof aiOverrides.options === \"object\"\n      ? { ...aiOverrides.options }\n      : undefined;\n\n  const finalTemperature =\n    aiConfigOverrides && \"temperature\" in aiConfigOverrides\n      ? aiConfigOverrides.temperature\n      : resolved.temperature;\n\n  const finalConfig = {\n    stream: true,\n    model: aiConfigOverrides?.model ?? x402.model ?? resolved.model,\n    ...(aiConfigOverrides ?? {}),\n    ...(finalTemperature !== undefined\n      ? { temperature: finalTemperature }\n      : {}),\n  };\n\n  const finalOptions = {\n    ...(aiOptionOverrides ?? {}),\n    ...(resolved.debug ? { debug: resolved.debug } : {}),\n  };\n\n  const apiKey =\n    aiOverrides.apiKey ??\n    resolved.apiKey ??\n    (typeof process !== \"undefined\" ? process.env.OPENAI_API_KEY : undefined);\n\n  if (!apiKey) {\n    throw new Error(\n      \"[agent-kit] createAxLLMClient requires an OpenAI API key (set apiKey or OPENAI_API_KEY)\"\n    );\n  }\n\n  const name = aiOverrides.name ?? resolved.provider;\n  const apiURL = aiOverrides.apiURL ?? resolved.apiUrl;\n\n  const finalAi = {\n    ...aiOverrides,\n    name,\n    apiKey,\n    ...(apiURL ? { apiURL } : {}),\n    config: finalConfig,\n    options: finalOptions,\n  } as NonNullable<CreateX402LLMOptions[\"ai\"]>;\n\n  const createOptions: CreateX402LLMOptions = {\n    ...x402,\n    model: x402.model ?? resolved.model,\n    ai: finalAi,\n  };\n\n  if (!createOptions.account && !createOptions.privateKey) {\n    const envPrivateKey =\n      typeof process !== \"undefined\"\n        ? (process.env.PRIVATE_KEY as Hex | undefined)\n        : undefined;\n    if (envPrivateKey) {\n      createOptions.privateKey = envPrivateKey;\n    }\n  }\n\n  return createOptions;\n}\n\nfunction readEnv(\n  env: Record<string, string | undefined> | undefined\n): Record<string, string | undefined> {\n  if (env) return env;\n  if (typeof process !== \"undefined\" && process?.env) {\n    return process.env as Record<string, string | undefined>;\n  }\n  return {};\n}\n\nfunction parseBoolean(value: string | undefined): boolean | undefined {\n  if (value === undefined) return undefined;\n  if (value.trim() === \"\") return undefined;\n  return [\"1\", \"true\", \"yes\", \"on\"].includes(value.toLowerCase());\n}\n\nfunction parseNumber(value: string | undefined): number | undefined {\n  if (value === undefined) return undefined;\n  const numeric = Number.parseFloat(value);\n  return Number.isFinite(numeric) ? numeric : undefined;\n}\n"]}