import * as _ax_llm_ax from '@ax-llm/ax';
import { ai } from '@ax-llm/ax';
import { wrapFetchWithPayment, Hex } from 'x402-fetch';

type WrappedFetch = typeof fetch & {
    preconnect?: () => Promise<void>;
};
type X402Account = Parameters<typeof wrapFetchWithPayment>[1];
type CreateX402FetchOptions = {
    account: X402Account;
    fetchImpl?: typeof fetch;
};
declare const createX402Fetch: ({ account, fetchImpl, }: CreateX402FetchOptions) => WrappedFetch;
declare const accountFromPrivateKey: (privateKey: Hex) => X402Account;
type AiFactoryArgs = Parameters<typeof ai>[0];
type AiFactoryConfig = NonNullable<AiFactoryArgs["config"]>;
type AiFactoryOptions = NonNullable<AiFactoryArgs["options"]>;
type CreateX402LLMOptions = {
    account?: X402Account;
    privateKey?: Hex;
    fetch?: WrappedFetch;
    fetchImpl?: typeof fetch;
    model?: string;
    ai?: (Record<string, unknown> & {
        options?: Partial<AiFactoryOptions>;
        config?: Partial<AiFactoryConfig>;
    }) | undefined;
};
declare const createX402LLM: (options?: CreateX402LLMOptions) => ReturnType<typeof ai>;
declare const x402LLM: ({ privateKey, model, apiURL, }: {
    privateKey: Hex;
    model?: string;
    apiURL?: string;
}) => _ax_llm_ax.AxAI<string>;

export { type CreateX402FetchOptions, type CreateX402LLMOptions, type X402Account, accountFromPrivateKey, createX402Fetch, createX402LLM, x402LLM };
