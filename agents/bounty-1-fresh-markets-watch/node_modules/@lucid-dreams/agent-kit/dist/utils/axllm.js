import { ai } from '@ax-llm/ax';
import { privateKeyToAccount } from 'viem/accounts';
import { wrapFetchWithPayment } from 'x402-fetch';

// src/utils/x402.ts
var DEFAULT_PROVIDER = "openai";
var DEFAULT_API_URL = "https://api-beta.daydreams.systems/v1";
var MAX_PAYMENT_BASE_UNITS = "10000000";
var createX402Fetch = ({
  account,
  fetchImpl
}) => {
  if (!account) {
    throw new Error("[agent-kit] createX402Fetch requires an account");
  }
  const accountAddress = typeof account === "object" && account && "address" in account ? account.address : void 0;
  console.info(
    "[agent-kit:x402] creating paid fetch",
    accountAddress ? `for ${accountAddress}` : "(account address unavailable)"
  );
  const paymentFetch = wrapFetchWithPayment(
    fetchImpl ?? fetch,
    account,
    BigInt(MAX_PAYMENT_BASE_UNITS)
  );
  console.info("[agent-kit:x402] wrapFetchWithPayment initialised");
  const describeInput = (input) => {
    if (typeof input === "string") return input;
    if (input instanceof URL) return input.toString();
    if (typeof input?.url === "string") {
      return input.url;
    }
    return "[object Request]";
  };
  const wrappedFetch = Object.assign(
    async (input, init) => {
      const requestUrl = describeInput(input);
      const requestMethod = init?.method ?? (input instanceof Request ? input.method : void 0) ?? "POST";
      console.info("[agent-kit:x402] fetch request", requestUrl, requestMethod);
      try {
        const response = await paymentFetch(input, init ?? {});
        const paymentHeader = response.headers.get("X-PAYMENT-RESPONSE");
        console.info(
          "[agent-kit:x402] fetch response",
          requestUrl,
          response.status,
          paymentHeader ? "(paid)" : "(no x402 header)"
        );
        return response;
      } catch (error) {
        console.warn(
          "[agent-kit:x402] fetch failed",
          requestUrl,
          error?.message ?? error
        );
        throw error;
      }
    },
    {
      preconnect: paymentFetch.preconnect ?? (async () => {
      })
    }
  );
  return wrappedFetch;
};
var accountFromPrivateKey = (privateKey) => {
  if (!privateKey || privateKey.trim().length === 0) {
    throw new Error(
      "[agent-kit] accountFromPrivateKey requires a non-empty private key"
    );
  }
  return privateKeyToAccount(privateKey);
};
var createX402LLM = (options = {}) => {
  if (options.account) {
    console.info("[agent-kit:x402] initialising LLM with provided account");
  } else if (options.privateKey) {
    console.info("[agent-kit:x402] deriving account from supplied private key");
  } else {
    console.info(
      "[agent-kit:x402] no explicit account/private key supplied; falling back to env or downstream defaults"
    );
  }
  const account = options.account ?? (options.privateKey ? accountFromPrivateKey(options.privateKey) : void 0);
  if (!account) {
    throw new Error(
      "[agent-kit] createX402LLM requires either an account or a private key"
    );
  }
  const paymentFetch = options.fetch ?? createX402Fetch({ account, fetchImpl: options.fetchImpl });
  console.info("[agent-kit:x402] payment-enabled fetch ready for LLM");
  const aiOverrides = options.ai ?? {};
  const {
    config: configOverridesRaw,
    options: optionOverridesRaw,
    apiKey: apiKeyOverrideRaw,
    apiURL: apiUrlOverrideRaw,
    name: nameOverrideRaw,
    ...restAiProps
  } = aiOverrides;
  const configOverrides = configOverridesRaw && typeof configOverridesRaw === "object" ? configOverridesRaw : void 0;
  const optionOverrides = optionOverridesRaw && typeof optionOverridesRaw === "object" ? optionOverridesRaw : void 0;
  const explicitApiKey = typeof apiKeyOverrideRaw === "string" && apiKeyOverrideRaw.trim().length > 0 ? apiKeyOverrideRaw : void 0;
  const nameOverride = typeof nameOverrideRaw === "string" && nameOverrideRaw.trim().length > 0 ? nameOverrideRaw : void 0;
  const apiUrlOverride = typeof apiUrlOverrideRaw === "string" && apiUrlOverrideRaw.trim().length > 0 ? apiUrlOverrideRaw : void 0;
  const apiKey = explicitApiKey ?? process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error(
      "[agent-kit] createX402LLM requires an OpenAI API key (set options.ai.apiKey or OPENAI_API_KEY)"
    );
  }
  const baseConfig = {
    stream: false
  };
  const finalConfig = {
    ...baseConfig,
    ...configOverrides ?? {}
  };
  const finalOptions = {
    ...optionOverrides ?? {},
    fetch: paymentFetch
  };
  const aiArgs = {
    ...restAiProps,
    name: nameOverride ?? DEFAULT_PROVIDER,
    apiKey,
    apiURL: apiUrlOverride ?? DEFAULT_API_URL,
    config: finalConfig,
    options: finalOptions
  };
  console.info(
    "[agent-kit:x402] creating Ax client",
    `provider=${aiArgs.name}`,
    `model=${finalConfig.model}`
    // `apiURL=${aiArgs}`
  );
  return ai(aiArgs);
};

// src/utils/axllm.ts
var DEFAULT_PROVIDER2 = "openai";
var DEFAULT_MODEL = "gpt-5";
function createAxLLMClient(options = {}) {
  const resolved = resolveOptions(options);
  const logger = options.logger;
  const axInstance = (() => {
    if (options.client) return options.client;
    const fromFactory = options.clientFactory?.();
    if (fromFactory) return fromFactory;
    try {
      return createX402LLM(buildCreateOptions(resolved, options.x402));
    } catch (error) {
      logger?.warn?.(
        `[agent-kit] failed to initialise Ax LLM client: ${error.message}`,
        error
      );
      return null;
    }
  })();
  return {
    ax: axInstance,
    isConfigured() {
      return Boolean(axInstance);
    }
  };
}
function resolveOptions(options) {
  const env = readEnv(options.env);
  const provider = options.provider ?? env.AX_PROVIDER ?? env.AXLLM_PROVIDER ?? env.OPENAI_PROVIDER ?? DEFAULT_PROVIDER2;
  const model = options.model ?? env.AX_MODEL ?? env.AXLLM_MODEL ?? env.OPENAI_MODEL ?? DEFAULT_MODEL;
  const apiKey = options.apiKey ?? env.OPENAI_API_KEY;
  const apiUrl = options.apiUrl ?? env.AX_API_URL ?? env.AXLLM_API_URL ?? env.OPENAI_API_URL;
  const temperature = options.temperature ?? parseNumber(
    env.AX_TEMPERATURE ?? env.AXLLM_TEMPERATURE ?? env.OPENAI_TEMPERATURE
  );
  const debug = options.debug ?? parseBoolean(env.AX_DEBUG ?? env.AXLLM_DEBUG) ?? false;
  return { provider, model, apiKey, apiUrl, temperature, debug };
}
function buildCreateOptions(resolved, overrides) {
  const x402 = overrides ? { ...overrides } : {};
  const aiOverrides = overrides?.ai ? { ...overrides.ai } : {};
  const aiConfigOverrides = aiOverrides.config && typeof aiOverrides.config === "object" ? { ...aiOverrides.config } : void 0;
  const aiOptionOverrides = aiOverrides.options && typeof aiOverrides.options === "object" ? { ...aiOverrides.options } : void 0;
  const finalTemperature = aiConfigOverrides && "temperature" in aiConfigOverrides ? aiConfigOverrides.temperature : resolved.temperature;
  const finalConfig = {
    stream: true,
    model: aiConfigOverrides?.model ?? x402.model ?? resolved.model,
    ...aiConfigOverrides ?? {},
    ...finalTemperature !== void 0 ? { temperature: finalTemperature } : {}
  };
  const finalOptions = {
    ...aiOptionOverrides ?? {},
    ...resolved.debug ? { debug: resolved.debug } : {}
  };
  const apiKey = aiOverrides.apiKey ?? resolved.apiKey ?? (typeof process !== "undefined" ? process.env.OPENAI_API_KEY : void 0);
  if (!apiKey) {
    throw new Error(
      "[agent-kit] createAxLLMClient requires an OpenAI API key (set apiKey or OPENAI_API_KEY)"
    );
  }
  const name = aiOverrides.name ?? resolved.provider;
  const apiURL = aiOverrides.apiURL ?? resolved.apiUrl;
  const finalAi = {
    ...aiOverrides,
    name,
    apiKey,
    ...apiURL ? { apiURL } : {},
    config: finalConfig,
    options: finalOptions
  };
  const createOptions = {
    ...x402,
    model: x402.model ?? resolved.model,
    ai: finalAi
  };
  if (!createOptions.account && !createOptions.privateKey) {
    const envPrivateKey = typeof process !== "undefined" ? process.env.PRIVATE_KEY : void 0;
    if (envPrivateKey) {
      createOptions.privateKey = envPrivateKey;
    }
  }
  return createOptions;
}
function readEnv(env) {
  if (env) return env;
  if (typeof process !== "undefined" && process?.env) {
    return process.env;
  }
  return {};
}
function parseBoolean(value) {
  if (value === void 0) return void 0;
  if (value.trim() === "") return void 0;
  return ["1", "true", "yes", "on"].includes(value.toLowerCase());
}
function parseNumber(value) {
  if (value === void 0) return void 0;
  const numeric = Number.parseFloat(value);
  return Number.isFinite(numeric) ? numeric : void 0;
}

export { createAxLLMClient };
//# sourceMappingURL=axllm.js.map
//# sourceMappingURL=axllm.js.map