import { AxMCPTransport, AxMCPJSONRPCRequest, AxMCPJSONRPCResponse, AxMCPJSONRPCNotification, AxFunction } from '@ax-llm/ax';

interface StdioTransportConfig {
    command: string;
    args?: string[];
    env?: NodeJS.ProcessEnv;
}
declare class AxMCPStdioTransport implements AxMCPTransport {
    private process;
    private rl;
    private pendingResponses;
    constructor(config: Readonly<StdioTransportConfig>);
    send(message: Readonly<AxMCPJSONRPCRequest<unknown>>): Promise<AxMCPJSONRPCResponse<unknown>>;
    sendNotification(message: Readonly<AxMCPJSONRPCNotification>): Promise<void>;
    connect(): Promise<void>;
    /**
     * Terminate the child process and clean up resources
     */
    terminate(): Promise<void>;
}
/**
 * Create a new AxMCPStdioTransport instance
 * @param config Configuration for the stdio transport
 * @returns A new AxMCPStdioTransport instance
 */
declare function axCreateMCPStdioTransport(config: Readonly<StdioTransportConfig>): AxMCPStdioTransport;

declare enum AxJSInterpreterPermission {
    FS = "node:fs",
    NET = "net",
    OS = "os",
    CRYPTO = "crypto",
    PROCESS = "process"
}
declare class AxJSInterpreter {
    private permissions;
    constructor({ permissions, }?: Readonly<{
        permissions?: readonly AxJSInterpreterPermission[];
    }> | undefined);
    private codeInterpreterJavascript;
    toFunction(): AxFunction;
}
declare function axCreateJSInterpreter(options?: Readonly<{
    permissions?: readonly AxJSInterpreterPermission[];
}>): AxJSInterpreter;

export { AxJSInterpreter, AxJSInterpreterPermission, AxMCPStdioTransport, type StdioTransportConfig, axCreateJSInterpreter, axCreateMCPStdioTransport };
